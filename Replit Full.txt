# Add a "Made with Replit" badge to your Webview
Source: https://docs.replit.com/additional-resources/add-a-made-with-replit-badge-to-your-webview

Learn how to add, customize, and embed a Made with Replit badge in your Replit App's Webview to showcase your project and link back to your cover page.

You can add a "Made with Replit" badge in your public Replit App's Webview. It will link back to your Replit App's cover page so that visitors can learn more about your creations.

## What is the Webview?

The Webview is the view of your Replit App that visitors to your Replit App see when they click "Open website."

The Webview appears full-screen in its own browser window, and has the following URL format:

`https://UNIQUE-TOKEN.CLUSTER_NAME.replit.dev`

(Or at your custom domain if you've set one up)

## Adding the Badge

You can add a badge to any Replit App with an index page. Any website created with the official HTML template will have this badge added by default.

1. Go to your Replit App's file browser and find `index.html`
   <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/misc/img-indexfile.png" alt_text="img-indexfile" width="400" height="400" />
2. Add the following code before the closing `</body>` tag:

```html
<script
src="https://replit.com/public/js/replit-badge-v2.js"
theme="dark"
position="bottom-right"
></script>
```

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/misc/img-htmlcode.png" alt="img-htmlcode" />
</Frame>

## Testing your Badge

1. Run your Replit App, then click "Open in a new tab"

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/misc/img-openintab.png" alt="img-openintab" />
</Frame>

2. Your badge should appear in the lower right. This is what visitors to your page would see

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/misc/badge-preview.png" alt="Badge Preview" />
</Frame>

3. Click your badge to get back to the Replit App's cover page

## Changing the Color Theme

You can change the color of your badge by replacing `theme="blue"` with any color including dark, light, red, orange, yellow, lime, green, teal, blue, blurple, purple, magenta and pink.

```html
<script
  src="https://replit.com/public/js/replit-badge-v2.js"
  theme="pink"
  position="bottom-right"
></script>
```

## Changing the Position

You can change the position of your badge by adding a position attribute with a value of `top-left`, `top-right`, `bottom-left`, or `bottom-right`. If the position isn't changing, check the console for more information - you may have specified an invalid position.

```html
<script
  src="https://replit.com/public/js/replit-badge-v2.js"
  theme="dark"
  position="top-left"
></script>
```

## Removing the Badge

If the badge was already a part of your template and you would like to remove it, simply delete the script from `index.html`:

```html
<!-- Delete this -->
<script src="https://replit.com/public/js/replit-badge-v2.js"></script>
```

## Advanced: Custom Badges

If the default configurations aren't enough for you, you can create your own custom badges with standard HTML and CSS.

Badges are hosted on `https://replit.com/badge`, meaning you can embed an image to further style your badges with CSS. This also means you can embed badges in your GitHub repositories and other Markdown files!

```html
<style>
  #replitBadge {
    position: fixed;
    bottom: 0;
    left: 0;
  }
</style>

<Frame>
  <img src="https://replit.com/badge?theme=light" id="replitBadge" alt="Replit Badge"/>
</Frame>
```

You can also supply additional options not available in the script. For example, you can set the caption (maximum limit of 30 characters)

```
https://replit.com/badge?caption=Amazing%20Badges
```

![Amazing Replit badge](https://replit.com/badge?caption=Amazing%20Badges)

or even switch the badge variant to something smaller.

```
https://replit.com/badge?caption=Amazing%20Badges&variant=small
```

![Amazing small Replit badge](https://replit.com/badge?caption=Amazing%20Badges\&variant=small)

## Advanced: Embedding into Markdown

You can share off your Replit flare by embedding a badge into your repository README. The following Markdown snippet combines a link and image, allowing you to redirect users directly to your Replit App.

```
[![Try with Replit Badge](https://replit.com/badge?caption=Try%20with%20Replit)](https:/.replit.com/)
```

Try clicking this:

[![Try with Replit Badge](https://replit.com/badge?caption=Try%20with%20Replit)](https:/.replit.com/)

Please let us know in the community what you think of this feature. Replit App on!


# Earning with Replit Bounties
Source: https://docs.replit.com/additional-resources/bounties/bounty-hunting

Bounties on Replit allow you to request and pay for coding tasks or project work using a platform-specific currency called Cycles. When you have a specific need—such as developing a new product, needing coding help for a personal project, or requiring API integration—you can create a Bounty. This acts as a job posting that other members, known as Bounty Hunters, can accept to complete the specified task.

If you're interested in building projects and earning Cycles while doing it, you're in for a treat with Bounties.

## Become a Bounty Hunter

If you'd like to become a verified Bounty Hunter, [apply here](https://replit.typeform.com/to/ss7IxmIf).
Fill out the form, and you'll receive the Verified Bounty Hunter badge notification on your applications.

Otherwise, you can get started by checking out the [Bounties page](https://replit.com/bounties) and applying to earn Cycles.

## Browse Bounties

Each posted Bounty includes a reward in Cycles for successful completion and a description of the work they need.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/bounties/pick_bounty.png" alt="Pick a Bounty" />
</Frame>

## Apply to work on a Bounty

Once you find a Bounty you're interested in, select the "Apply to Work" button in the upper-right corner.

### Tips for Applying

The best Bounty applications explain to the Poster why you're a good fit for the job and include examples of your past work. Here are some additional tips for creating a quality application:

Here are some other tips on how to create a quality application:

* Add links to your GitHub, LinkedIn, Twitter, or other social profiles to your Replit account. These links will also appear in your Bounty applications.
* Consider using a professional headshot as your Replit profile picture.
* If you'd like to start your Bounty application with a greeting, you can say something like `Hello [username]...` or `Hello, my name is [your first name]...`
* Include links to relevant projects in your application, such as a Replit App, GitHub repo, or hosted project.
* Describe the initial 1-2 milestones you plan to accomplish once accepted. This shows the Bounty Poster that you understand their problem and the technical requirements.
* If possible, provide time estimates for completing certain parts of the Bounty after you're accepted.

Here's an example application for a Bounty to create a space invaders game:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/bounties/apply_bounty.png" alt="Apply a Bounty" />
</Frame>

## Do the work

If the Bounty Poster selects your application, you'll see the "Accepted" badge on your application:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/bounties/accepted.png" alt="Time to Do the Work!" />
</Frame>

Now it's time to do the work! Communicate with the Bounty Poster early and often - make sure you're both clear on requirements and expectations.

## Deliver the work

When you've completed your work, return to the Bounty page and select "Submit Work."

Add a description of the work (pro-tip: relate it to the acceptance criteria outlined in the Bounty) and link to the Replit App where you've written the code.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/bounties/submit_solution.png" alt="Submit a Solution" />
</Frame>

The Poster will review your work and may request changes. If these changes are within the scope of the original Bounty, simply make the updates in the Replit App and submit again.
Once the Poster accepts your work, you're awarded your well-earned Cycles.


# Bounty Templates
Source: https://docs.replit.com/additional-resources/bounties/bounty-templates

Learn how to communicate effectively during bounty projects with templates for both bounty hunters and posters to use throughout the process.

## Communication Expectations

Effective communication is vital throughout the bounty posting and hunting process. To help with this, we've provided templates that you can use to maintain professionalism and ensure everyone's expectations align. Keep in mind that these templates are starting points and can be adjusted to suit your specific needs.

## Bounty Hunter

### Upon Acceptance

After accepting a bounty, it's important to reach out to the Poster within 24 hours via email or Discord.

```
Hello there,
I'm very excited to begin working on this Bounty. I am located in <geoarea>. I usually work between the hours of <xyzxyz> and the best way to reach me is by email. I just wanted to take a moment to check in and outline my approach.
- <milestone 1> - <your expected date of delivery>
- <milestone 2> - <your expected date of delivery>
Please let me know if you have any questions. I look forward to working with you.
Best,
Your Name
```

### Check-ins

To ensure a smooth and successful Bounty experience, it is important to maintain regular communication with the Bounty Poster. This includes providing updates on progress every few days, as well as addressing any roadblocks, pain points, or questions that may arise. Lack of visibility into the progress of the project is a common cause of dissatisfaction among Bounty Posters. Keeping them informed will help to mitigate this issue and maintain a positive working relationship.

#### What to say when giving a status update:

```
I wanted to check-in and give you an update on my progress. Everything is going well, and I am still on target to meet <milestone 1> by <expected date of delivery>. Please reach out if you have any questions or need further information about this Bounty.
```

#### What to say when you need to change the timeline:

```
I wanted to give you an update on my timeline. <xyx> has taken longer than I expected due to <xyxyx> reasons. I have been able to determine next steps, but wanted to let you know my <milestone 1> date has changed to <new expected delivery day>. I have solved any current roadblocks and am on track to complete the Bounty.
```

### Upon Submission

Congratulations on successfully completing the Bounty! It is now important to promptly follow up with the bounty poster to allow them to review the completed work. This will provide an opportunity for them to provide feedback or request any necessary changes. Following up quickly will help ensure a smooth process and timely completion of the project.

```
Hi there,
I have submitted the completed Bounty at <link to the Bounty>. Please let me know if you request changes or have any questions about the submission. It has been a pleasure working with you.
```

### Changes are Requested

If the Bounty Poster requests any changes, it is important to respond within 24 hours to acknowledge receipt of their feedback. During this response, it is crucial to discuss a plan for the next steps and a timeline for implementing the suggested updates. It is important to approach any requested changes in a constructive manner. To assist with this process, the following are the two templates you can personalize

Example:

```
Thank you for <list the input or changes requested>. I value your feedback as it helps me become a better Bounty Hunter. I will have a revised version of this project ready for you to review by <date>.
One solution to the input you mentioned is <list the solution in a detailed, non-technical way>. Does this sound like an ideal solution for your Bounty? If so, I can have an updated version for you by <date>.
```

Example:

```
I know you are concerned about <list the concern in a polite way>. Including <list the suggestion in a detailed, non-technical way> may be an ideal solution.
I am open to revisions and willing to make changes to improve the quality of your work. If this solution works for you, I can get you an updated version by <date>.
```

## Poster

### Upon Acceptance

Once you accept a Bounty Hunter for your Bounty, you should reach out to them within 24 hours via email or Discord. Feel free to use this template if you are not sure how to start.

```
Hi <name>,
I am excited to work with you on this Bounty. You seem like a great fit for this project. Here is a little bit about me <share information that is helpful for the Bounty Hunter to know about you>.
I would like to chat with you soon to review requirements and set milestones.
Please let me know if you have any questions about the Bounty as you get started.
```

### Check-ins

Open and consistent communication with the Bounty Hunter is crucial, especially if the project is complex or has multiple milestones. This will help ensure that the project stays on track and is completed within the agreed-upon timeframe. Here are a few examples of what you can say to stay in touch with your Bounty Hunter:

```
Hi,
I wanted to check in and see how the Bounty was going. Do you have any questions about the requirements? I am happy to chat <via email or Discord> if you need further guidance.
```

```
Hello,
How is the Bounty going? Do you think you are still on track to complete it by <date>? Do you have any part of it completed that you can send to me as a sample? Please let me know if you have any questions.
```

### Upon Submission

Once your Bounty Hunter submits the Bounty, we recommend you review the submission within three days. If you’re happy with the submission, feel free to press the `Accept` button to complete the Bounty and release the Cycles to the Bounty Hunter. Send them a thank you or acknowledgment that the work has been received and the Cycles released.

```
Hi,
Just received your submission. It looks great. Thank you for all your hard work on this. <Mention what you liked about working with this Bounty Hunter. Would you like to work together again?>
```

### Changes Requested

You can request changes on your Bounty's Discussion tab. It is important that the changes you request are within the scope of the original project. Give clear expectations of what needs to be changed and ensure the Bounty Hunter has the correct resources or access to test projects if needed.

```
Hello,
Thanks for your submission! Would you be up for changing the following:
<Include specific details of what changes to make or information regarding testing/deployment of the project>.
```


# Frequently Asked Questions (FAQ)
Source: https://docs.replit.com/additional-resources/bounties/faq

Learn how to post and complete Bounties on Replit, including pricing guidelines, payment processes, and best practices for both Bounty Posters and Hunters.

export const Cost800kCycles = '$8,000';

export const Cost700kCycles = '$7,000';

export const Cost650kCycles = '$6,500';

export const Cost450kCycles = '$4,500';

export const Cost350kCycles = '$3,500';

export const Cost250kCycles = '$2,500';

export const Cost35kCycles = '$350';

<AccordionGroup>
  <Accordion title="What are Bounties?">
    Bounties are a simple way to trade Cycles for different types of tasks on Replit. If you have a new product idea, need coding assistance for a personal project, or want to integrate an API, create a Bounty! You'll be able to examine submissions and pick a developer, known as a Bounty Hunter, to complete the project, which is referred to as the "work." When you post a Bounty, Replit will deduct the required Cycles from your account and hold them until the project is finished.
  </Accordion>

  <Accordion title="Bounty Posting">
    <Accordion title="How do I post a Bounty for others to complete?">
      You can publicly post a Bounty on the [Bounties page](https://replit.com/bounties). You will be asked to provide a title, description, and reward amount before posting. Your user account will also need enough Cycles to cover the reward amount before posting; you can reload Cycles [here](https://replit.com/cycles).
    </Accordion>

    <Accordion title="What types of projects are available for Bounties?">
      Anything you can think of or need for your own project. Some of the more popular Bounties we’ve seen are internal tools for your startup, features for existing Replit App (like chat moderation or API integration), websites, and bots (Discord, Slack, Telegram).
    </Accordion>

    <Accordion title="What should I name my Bounty?">
      Keep it simple and descriptive! The name should highlight what is distinctive about that particular Bounty. Try to think about what will catch a Bounty Hunter’s eye.
    </Accordion>

    <Accordion title="How many Cycles should I offer for a Bounty?">
      We offer suggestions within the Bounty creation form for certain categories, but ultimately, you decide based on your budget and the caliber of developer you want to work with.

      <ul>
        <li>
          {Cost250kCycles} (250,000 Cycles) - {Cost350kCycles} (350,000 Cycles) if your app needs:

          <ul>
            <li>1 external connection / API</li>
            <li>1-2 pages</li>
            <li>completion in 4-6 weeks</li>
          </ul>
        </li>

        <li>
          {Cost450kCycles} (450,000 Cycles) - {Cost650kCycles} (650,000 Cycles) if your app needs:

          <ul>
            <li>2-3 API connections</li>
            <li>2-3 pages</li>
            <li>a developer with 2+ years of experience</li>
            <li>user account creation</li>
            <li>ideal for 2-3 month projects</li>
          </ul>
        </li>

        <li>
          {Cost800kCycles} (800,000+ Cycles) if your app needs:

          <ul>
            <li>unlimited API connections</li>
            <li>3+ pages</li>
            <li>the ability to handle your first 1000+ users</li>
            <li>ideal for 3+ month projects</li>
          </ul>
        </li>
      </ul>

      If you can't put the full amount upfront for a large Bounty, indicate in your initial post the payment milestones that will be posted through other Bounties.
    </Accordion>

    <Accordion title="Are there any fees for posting a Bounty?">
      Yes, Replit charges the Bounty Poster a 10% fee for posting a Bounty. Also, note that Replit will hold the entire number of cycles you’ve promised for the Bounty from your account when posting a Bounty.
    </Accordion>

    <Accordion title="Can I cancel a Bounty after it’s been accepted?">
      No, you can only cancel a Bounty *before* accepting an application. To cancel an accepted application for a Bounty, contact the Replit team through the "Contact Support" button in the "Having trouble?" section. If you want to make changes to the accepted Bounty, it's best to discuss the proposed revisions directly with the Bounty Hunter.
    </Accordion>
  </Accordion>

  <Accordion title="Bounty Hunting">
    <Accordion title="What if I want to complete Bounties and earn Cycles?">
      If you want to become a verified Bounty Hunter, you can apply [here](https://replit.com/bounties/join). However, being a verified Bounty Hunter is not required to apply for Bounties. Replit’s Bounty program is looking for experienced coders who can tackle Bounties and provide great customer service for Bounty Posters.
    </Accordion>

    <Accordion title="What workspace should Bounty Hunters use to create the work?">
      Replit provides access to private Replit App for coding the work, which is Replit’s recommended workspace for completing a Bounty. The completed work must be submitted on Replit with a valid Replit App link.
    </Accordion>

    <Accordion title="Are there any fees for completing a Bounty?">
      No. Upon successful completion of the Bounty, the Bounty Hunter’s account will be credited with the full Bounty amount listed.
    </Accordion>

    <Accordion title="Am I able to cash out my Cycles into real money?">
      Yes. Cycles earned from Bounties are eligible for cash out. There is a minimum threshold of 35,000 Cycles (about {Cost350kCycles} USD) per cash out. There is a 25% cash-out fee and additional fees based on your country of residence and chosen payment method. If you cash out more than 70,000 Cycles (about {Cost700kCycles} USD) in a given request, then the cash-out fee is reduced to 15%.
    </Accordion>

    <Accordion title="How do I request a Cycles cash out?">
      Please note, a Replit staff member will **never** reach out to you in order to initiate a cash out. Only you can begin the process yourself following the instructions below. Once you have earned at least 35,000 Cycles ({Cost350kCycles} USD) from Bounties, you can contact [cashout@replit.com](mailto:cashout@replit.com) with the subject line "Cycles Cash Out - username", replacing "username" with your Replit username. In the body of your email, write the number of Cycles that you wish to cash out.
      If this is your first cash out, we will send you an online form to verify your identity on [Persona](https://withpersona.com/). You will need a valid government ID and a device with a camera to complete this verification.
      After that, you will need to verify your payment information by completing the cash-out form on Replit's site [here](https://replit.com/cash-out).
      Once you have verified your identity and payment information on your Replit account, we will withdraw the requested amount of Cycles from your wallet and execute the payment. If you no longer have a payable balance of Cycles equivalent to the amount you requested, we will cancel the payment and ask you for a new desired amount to withdraw.
    </Accordion>

    <Accordion title="Are [secrets](/replit-workspace/workspace-features/secrets) included in my work to the Bounty Poster?">
      No, when the work is provided, contents in the `secrets` sidebar is not included. If the intent is to provide that information to the Poster, the parties should discuss how they would like to transfer that information.
    </Accordion>

    <Accordion title="What rights are transferred in the work upon completion?">
      All rights to the work are transferred from the Bounty Hunter to the Bounty Poster upon successful completion of the Bounty and Cycles are exchanged. By submitting a work for acceptance, the Bounty Hunter represents that they have all necessary rights in the content of the work to transfer to the Poster, as specified in our [terms](https://replit.com/site/cycles-terms).
    </Accordion>

    <Accordion title="What if I can't respond or deliver on time?">
      When accepting a Bounty, it's very important to set expectations around timelines and communication cadence with the Bounty Poster in one of your first exchanges. Some Posters would like an email or message check-in every week, and some prefer daily check-ins. Some Posters use the Bounties platform for critical time-sensitive work, and in this case, it's very important to set expectations for whether or not their intended deadline is possible. When a Hunter does not respond in a timely manner, it often causes harm to the Poster's project. Repeated failure to set and meet communication expectations with Bounty Posters may lead to suspension of your Bounty Hunter account. We understand that sometimes there are uncontrollable circumstances that cause a Hunter not to respond in a timely manner. If that is the case, we request you let us know by emailing [bounties@replit.com](mailto:bounties@replit.com).
    </Accordion>

    <Accordion title="What if I am unable to complete a Bounty?">
      If you are unable to complete a Bounty, please email [bounties@replit.com](mailto:bounties@replit.com) along with any mitigating circumstances so that we can assist you. Please note that if this happens more than once, you may be suspended from the Bounties platform.
    </Accordion>

    <Accordion title="Is there a limit on how many Bounties I can work on at a given time?">
      We recommend that you don’t work on more than two Bounties at a given time. This is to prevent yourself from burning out by taking on too many Bounties simultaneously. This also enables you to give focused attention to a few clients at a given time.
    </Accordion>
  </Accordion>

  <Accordion title="Support">
    <Accordion title="How do I contact the Bounty Poster or the Bounty Hunter about the Bounty?">
      If you have questions for the Bounty Poster, you can include them in the application form or reach out through any social media platforms linked in the user’s profile. The Poster will indicate a preferred communication channel (such as email or Discord) in the Bounty post for discussions throughout the project. If you are unable to contact the Poster or Bounty Hunter and need assistance with a Bounty, you can reach out to the Moderator via the “Contact Support” button under the “Having trouble?” section of the Bounties page.
    </Accordion>

    <Accordion title="What if I have a dispute with Poster or a problem with the work?">
      We encourage our Bounty Posters and Bounty Hunters to try and settle conflicts among themselves. If for any reason this fails, or if you encounter non-permitted usage, users can contact the Moderator via the “Contact Support” button under the “Having trouble?” section of the Bounties page. All decisions by Replit in case of a dispute are final and binding on both the Hunter and Poster.
    </Accordion>
  </Accordion>
</AccordionGroup>


# Resources for Bounty Hunters
Source: https://docs.replit.com/additional-resources/bounties/hunter-resources

Find templates, portfolio tips, and tutorials to help you succeed as a Replit bounty hunter. Learn how to showcase your work and build your skills.

## Templates

Need some boilerplate code? Use these templates to get started on your next Bounty:

* [Bots](https://replit.com/templates/bots)
* [Graphics](https://replit.com/templates/graphics)
* [Websites](https://replit.com/templates/websites)
* [AI](https://replit.com/templates?q=AI)

## Replit Profile Tips

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/bounties/bounties_profile.png" alt="Bounties Profile" />
</Frame>

<Icon icon="check" iconType="solid" /> Use [this template](https://replit.com/@replit/Portfolio-Site-Template?v=1#ReadMe.md) to create a portfolio of work to pin to your profile.

<Icon icon="check" iconType="solid" /> Add links to previous work, Github profile, Discord, etc. in your profile that are relevant and up to date.

<Icon icon="check" iconType="solid" /> Make sure the Replit Apps on your profile are a good representation of your skills.

<Icon icon="xmark" iconType="solid" /> Don't include partial pieces of work on your profile page (hide those in a folder or use Private Replit Apps).

<Icon icon="xmark" iconType="solid" /> The Replit-generated names like PuzzlingPriceyKey are cool and all, but make sure the Replit Apps on your profile have sensible names and are published with nice cover photos.

## Build your Portfolio

Use these tutorials and projects as inspiration to add to your portfolio:

* [Intro to JS](https://replit.com/learn#:~:text=This%20tutorial-,covers,-the%20basics%20of): Understand the basics of JS
* [Socket.IO](https://replit.com/learn#:~:text=Socket.IO-,Tutorial,-Learn%20how%20to): build a multi-player app
* [Intro to Bash](https://replit.com/learn#:~:text=Intro%20to-,Bash,-Bash%20is%20one): learn how to read and print files, create games, and run program files as scripts
* [Chatbot](https://replit.com/@QwertyQwerty54/Chatbot?v=1): browse the code used to make a chatbot with Python
* [AI Basics with Hangman](https://replit.com/@WyattGeorge/AI-Hangman?v=1): create your own version and add it to your portfolio to showcase your AI skills

Check out the [Bounty Hunter Feature Tutorial](https://replit.com/@replit/Bounty-Hunters-Tutorial) to learn more.

<iframe width="560" height="315" src="https://www.youtube.com/embed/89Qby0LX2rY" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen />


# Posting and awarding a Bounty
Source: https://docs.replit.com/additional-resources/bounties/posting-a-bounty

Learn how to post a bounty, manage applications, and review work submissions on Replit's bounty platform to get help with your projects.

If you're familiar with other freelancing platforms, Bounties will feel familiar.

### Check Cycles

Before you post a Bounty, ensure you have enough [Cycles](/getting-started/intro-replit) to pay the Bounty. Once the Bounty is listed, Replit will hold the Cycles as a deposit until the Bounty is completed or closed.

### Post a Bounty

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/bounties/posting-bounty.webp" alt="How to Post a Bounty" />
</Frame>

1. On the [Bounties page](https://replit.com/bounties), click the "Create a Bounty" button in the upper-right-hand corner of the screen.
2. Fill out the "Create a Bounty" form, adding as much detail as you can so Bounty Hunters know what they're applying to do.
   Write a clear title and *pay special attention defining acceptance criteria*, as this is going to guide your Bounty Hunter's decisions and will be referred to when settling disputes.
   Set the due date, your preferred method of communication, and the number of Cycles you're offering for the work.
3. Post your Bounty!

You are not allowed to circumvent Bounties by taking projects off-platform. This includes promising payments outside the Bounties system or any future promise of work outside Bounties. You could be banned permanently for attempting to do so.

### Wait for applications

Sit back and wait for Bounty Hunters to apply!

### Pick an applicant and communicate well!

Once you have a Bounty Hunter you'd like to work with, click the "Accept Application" button. This closes the Bounty to further applications.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/bounties/accepting-proposal.webp" alt="Received an Application" />
</Frame>

Now it's your turn to reach out to the Bounty Hunter you've selected! (Be sure you're both clear on deliverables and timeline expectations)

### Review the work

When your Bounty Hunter has completed the work, you'll see the following screen that allows you to view the work. After checking out the work, you can request changes or accept the work.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/bounties/view_submission.png" alt="View Submission" />
</Frame>

If you request changes, be sure to give your Bounty Hunter clear and actionable feedback within the bounds of the original Bounty.

*Please do not use this mechanism to add features or increase the project's scope - if you need another feature, make another bounty!*

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/bounties/req_changes.png" alt="Request Changes" />
</Frame>

Once you're happy with the work, Accept it, and the Bounty process is complete.
The code now belongs to you, and Replit will send the Cycles deposit to the Bounty Hunter.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/bounties/completed.png" alt="Bounty Completed" />
</Frame>

## Bounty Poster Feature Tutorial

Check out the [Bounty Poster Feature Tutorial](https://replit.com/@replit/Bounty-Poster-Tutorial).

<iframe width="560" height="315" src="https://www.youtube.com/embed/VZ7J6K198Ig" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen />


# CLUI, the Graphical CLI
Source: https://docs.replit.com/additional-resources/clui-graphical-cli

Command Line User Interface, often referred to as the CLUI is an interactive command bar from which you can perform a variety of actions. There are three variations of the CLUI located across Replit- Account, Shortcuts, and Workspace.

## Account

The Account CLUI allows you to view and manage your account & teams, view warnings you've been issued, restore deleted Replit App, and more. Get started by navigating to the [CLUI page](https://replit.com/~/cli). Type in the input to search for a command, and hit Enter to execute it.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/getting-started/clui-account.png" alt="Account CLUI" />
</Frame>

### Command Reference

<details>
  <summary><strong>account</strong>: Manage your account</summary>

  #### `view-warns`

  View warnings you have been issued.

  #### `change-username`

  Change your username (this can only be done once).
</details>

<details>
  <summary><strong>trash</strong>: List and restore deleted Replit App</summary>

  #### `restore <title>`

  Restore a deleted Replit App by its title. If multiple Replit App exist with the same name, the most recently deleted Replit App will be restored.

  #### `view`

  View your most recently deleted Replit App.
</details>

<details>
  <summary><strong>team</strong>: View and manage your teams</summary>

  #### `view`

  View the members of a team you are in by its username.

  #### `fork-repl-to-project`

  Forks an existing Replit App to create a Team Project.
</details>

<details>
  <summary><strong>clear</strong>: Clears the screen</summary>

  #### `clear`

  Clears the screen of all past commands you've executed.
</details>

## Shortcuts

The Shortcuts version of the CLUI can be accessed from the top navigation bar on most Replit pages. Use the keyboard command **CMD/CTRL + K** to open it up at any time or click on it.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/getting-started/shortcuts-clui.png" alt="Shortcuts CLUI" />
</Frame>

### Command Reference

#### Search

Allows you to search Replit for Replit App, Templates, Code, People, and more.

#### New

Create a new Replit App.

#### My Replit App

Browse through and easily navigate to your Replit App.

#### My Code

Search through the code in all of your Replit App.

## Workspace

The Workspace CLUI allows you to quickly perform operations, access Tools, find files, or search for terms in your code.

You can access the Workspace CLUI with the keyboard shortcut **CMD/CTRL + K** at any time in the Workspace. Alternatively, you can click on the Search icon in the upper-left corner of the page.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/getting-started/ws-clui.png" alt="Workspace CLUI" />
</Frame>


# Google Authentication in Python and Flask
Source: https://docs.replit.com/additional-resources/google-auth-in-flask

Learn how to implement Google OAuth authentication in a Flask app on Replit, including user login and Google Sheets API integration.

Allowing your users to log in to your website using their Google account has these benefits:

1. You don't have to implement your own authentication scheme.
2. You can get users' name and contact information easily.
3. You can use the same credentials to access users' Google resources like Sheets and Drive.

This guide that will walk you through how to do that with Python and Flask on Replit.

First, we'll walk through how to setup basic OAuth authentication, then cover how to use the resulting credentials to access users' Google resources.

## Introduction to OAuth

Google authentication is based on the OAuth standard. The way OAuth works is as follows:

1. Somewhere on your website, you direct a user to a login page.
2. When they go to the login page, you don't implement the login form on your website, but instead redirect to Google's login service to login the user.
3. When Google's login service successfully logs in the user, it redirects back to your website at a predefined URL of your choosing, say `https://YOUR_DOMAIN/oauth2callback`, while sending some information pertinent to the user and the login session.
4. You use the user's login information to further obtain an access token, which is like a pass you can use to access the user's resources, like their profile information, their spreadsheets, documents and more.

## OAuth: Show me the code

If you are like me, the first thing you want is working code. The code below is what you need. However, you'll need to set up some things in your Google Cloud Console in order to get everything working. That will be covered in the next section. Create a new Replit App using the [Flask template](https://replit.com/@replit/Flask?v=1) and put the following in `main.py`. The comments in the code explains what the individual parts do:

```python
from flask import Flask, redirect, session, url_for, request
import google_auth_oauthlib.flow
import json
import os
import requests

app = Flask('app')
# `FLASK_SECRET_KEY` is used by sessions. You should create a random string
# and store it as secret.
app.secret_key = os.environ.get('FLASK_SECRET_KEY') or os.urandom(24)

# `GOOGLE_APIS_OAUTH_SECRET` contains the contents of a JSON file to be downloaded
# from the Google Cloud Credentials panel. See next section.
oauth_config = json.loads(os.environ['GOOGLE_OAUTH_SECRETS'])

# This sets up a configuration for the OAuth flow
oauth_flow = google_auth_oauthlib.flow.Flow.from_client_config(
    oauth_config,
    # scopes define what APIs you want to access on behave of the user once authenticated
    scopes=[
        "https://www.googleapis.com/auth/userinfo.email",
        "openid",
        "https://www.googleapis.com/auth/userinfo.profile",
    ]
)

# This is entrypoint of the login page. It will redirect to the Google login service located at the
# `authorization_url`. The `redirect_uri` is actually the URI which the Google login service will use to
# redirect back to this app.
@app.route('/signin')
def signin():
    # We rewrite the URL from http to https because inside the Replit App http is used,
    # but externally it's accessed via https, and the redirect_uri has to match that
    oauth_flow.redirect_uri = url_for('oauth2callback', _external=True).replace('http://', 'https://')
    authorization_url, state = oauth_flow.authorization_url()
    session['state'] = state
    return redirect(authorization_url)

# This is the endpoint that Google login service redirects back to. It must be added to the "Authorized redirect URIs"
# in the API credentials panel within Google Cloud. It will call a Google endpoint to request
# an access token and store it in the user session. After this, the access token can be used to access
# APIs on behalf of the user.
@app.route('/oauth2callback')
def oauth2callback():
    if not session['state'] == request.args['state']:
        return 'Invalid state parameter', 400
    oauth_flow.fetch_token(authorization_response=request.url.replace('http:', 'https:'))
    session['access_token'] = oauth_flow.credentials.token
    return redirect("/")

# This is the home page of the app. It directs the user to log in if they are not already.
# It shows the user info's information if they already are.
@app.route('/')
def welcome():
    if "access_token" in session:
        user_info = get_user_info(session["access_token"])
        if user_info:
            return f"""
                Hello {user_info["given_name"]}!<br>
                Your email address is {user_info["email"]}<br>
                <a href="/logout">Log out</a>
            """
    return """
        <h1>Hello!</h1>
        <a href="/signin">Sign In via Google</a><br>
    """

# Call the userinfo API to get the user's information with a valid access token.
# This is the first example of using the access token to access an API on the user's behalf.
def get_user_info(access_token):
    response = requests.get("https://www.googleapis.com/oauth2/v3/userinfo", headers={
       "Authorization": f"Bearer {access_token}"
   })
    if response.status_code == 200:
        user_info = response.json()
        return user_info
    else:
        print(f"Failed to fetch user info: {response.status_code} {response.text}")
        return None

@app.route('/logout')
def logout():
    session.clear()
    return redirect('/')

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)

```

## Set up your OAuth App / Client

To get the above code working, you'll need to do these things in Google Cloud.

1. Create a Google Cloud project (if you don't already have one).
2. Configure the OAuth consent screen.
3. Create an OAuth client ID for your app.

### Create a Google Cloud project

If you already have a Google Cloud project you want to use for this exercise, you can skip this step.

1. Go to the [Google Cloud Console](https://console.cloud.google.com/)
2. Click on the project selector dropbox next to the Google Cloud logo:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/google-auth-in-flask/google-project-dropdown.png" alt="Google Project Dropdown" />
</Frame>

3. Select an existing project or Click "New Project" and create an new project.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/google-auth-in-flask/select-project.png" alt="Select Project" />
</Frame>

4. If creating a new project, enter a project name, and click "Create".

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/google-auth-in-flask/new-project.png" alt="New Project" />
</Frame>

If you see your new project show up in a popup, click "Select project" to make that the *active project*.

### Configure the OAuth consent screen

Now that you have a project, you can configure the OAuth consent screen for it:

1. Go to the [OAuth Consent Screen](https://console.cloud.google.com/apis/credentials/consent)

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/google-auth-in-flask/oauth-consent-screen.png" alt="OAuth Consent Screen" />
</Frame>

2. Make sure the project in the project drop down is the one you want.
3. Select "External" to allow any user to log in to your app with a Google account. "Internal" will allow only people from your organization.
4. Click "Create".
5. Enter an app name and the email of the person supporting this app (you?)

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/google-auth-in-flask/oauth-consent-step-2.png" alt="OAuth Consent Screen" />
</Frame>

6. Enter an email address under "Developer contact information".

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/google-auth-in-flask/oauth-consent-step-2-b.png" alt="Developer contact information" />
</Frame>

7. Click "Save and continue".
8. In the Scopes screen, you can add the APIs you want your app to have access to. You already have access to the APIs for getting basic user information.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/google-auth-in-flask/oauth-scopes.png" alt="OAuth Scopes" />
</Frame>

For now, leave this as is and click "Save and continue".
9\. In Test Users, you need to add the email of the users you want to be able to test the app during its testing phase.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/google-auth-in-flask/test-users.png" alt="Test Users" />
</Frame>

Click "Add users"
10\. Add one or more email Google email addresses, and click "Add".

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/google-auth-in-flask/test-users-add.png" alt="Test Users" />
</Frame>

Then click "Save and continue".
11\. Review the summary screen. You can always go back and edit any of the steps.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/google-auth-in-flask/summary.png" alt="Test Users" />
</Frame>

### Create an OAuth client ID for your app

This is the last part. To get OAuth working, you need to create an OAuth client ID for the app.

1. Go to [Credentials](https://console.cloud.google.com/apis/credentials).

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/google-auth-in-flask/credentials.png" alt="Test Users" />
</Frame>

2. Click "Create credentials"

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/google-auth-in-flask/create-credentials.png" alt="Test Users" />
</Frame>

select "OAuth client ID".
3\.  Select "Web application" for Application type. Enter a name for this client ID.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/google-auth-in-flask/create-credentials-web.png" alt="Test Users" />
</Frame>

4. Now, go to your Flask Replit App. Open the shell, and enter: `echo https://$REPLIT_DEV_DOMAIN/oauth2callback`. The result will look something like: `https://81309e9b-c4df-48e0-a2c2-0a8d3c0e3162-00-35ppsa0tcuv6v.infra-staging.replit.dev/oauth2callback`. Copy this text and enter it as one of the "Authorized redirect URIs" in the bottom of the form

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/google-auth-in-flask/authorized-redirect-uris.png" alt="Test Users" />
</Frame>

Later when you deploy your app, you'll want to come back here to add another entry `https://YOUR_APP_DOMAIN/oauth2callback`

5. Click "Create"
6. Click "Download JSON":

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/google-auth-in-flask/secrets_json.png" alt="Test Users" />
</Frame>

7. Go to your Replit App again, open the Secrets pane. Create a secret named `GOOGLE_OAUTH_SECRETS`, and paste of the contents of the downloaded file
   as the secret value.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/google-auth-in-flask/add-secret.png" alt="Test Users" />
</Frame>

Phew! That was tedious. Congratulations if you made it through! Now you can run the Flask app and log in using a test user Google account. To make your app available to any Google user, you'll need to go back to the [consent page](https://console.cloud.google.com/apis/credentials/consent) and click "Publish App". A verification process may be required if your app requires additional Google APIs like Sheets and Drive.

Next, we'll cover how to integrate with a Google API like Sheets. Follow along if you want to go further.

## Google Sheets API Setup

In order to add a Google API integration like Google Sheets, first you need to enable the API for the app. You can [browser the available APIs](https://console.cloud.google.com/apis/library). As an example, we'll use Google Sheets.

1. Go to the [Google Sheets API listing page](https://console.cloud.google.com/apis/library/sheets.googleapis.com).
2. Click "Enable".

Done! That's all the Google Cloud setup you had to do for this part.

## Google Sheets Integration: Show me the code

First, in the oauth flow section of the original code, we leave everything the same, except add `"https://www.googleapis.com/auth/spreadsheets.readonly"` to the list of scopes:

```python
# This sets up a configuration for the OAuth flow
oauth_flow = google_auth_oauthlib.flow.Flow.from_client_config(
    oauth_config,
    # scopes define what APIs you want to access on behave of the user once authenticated
    scopes=[
        "https://www.googleapis.com/auth/userinfo.email",
        "openid",
        "https://www.googleapis.com/auth/userinfo.profile",
        "https://www.googleapis.com/auth/spreadsheets.readonly"
    ]
)
```

Now, the way you access a Google API with the `googleapiclient.discovery` library is to first create a `Credentials` object using the access token, and then use the `build` function to create a callable API object. For the sheets API it looks like:

```python
credentials = google.oauth2.credentials.Credentials(token=session['access_token'])
service = build("sheets", "v4", credentials=credentials)
sheets_api = service.spreadsheets()
```

As to how to actually use the Sheets API, I've created a couple of helper functions:

```python
# fetch all sheets within a Google spreadsheet
def get_sheets(sheets_api, spreadsheet_id) -> list[str]:
    result = sheets_api.get(spreadsheetId=spreadsheet_id).execute()
    return [sheet["properties"]["title"] for sheet in result["sheets"]]

# fetch the data for a given sheet within a Google spreadsheet
def get_sheet_data(sheets_api, spreadsheet_id, sheet_title) -> list[list[str]]:
    result = (
        sheets_api.values()
        .get(spreadsheetId=spreadsheet_id, range=sheet_title)
        .execute()
    )
    return result["values"]
```

With the above help, we can create a POST handler endpoint that imports a Google spreadsheet like so:

```python
@app.route("/import_spreadsheet", methods = ['POST'])
def import_spreadsheet():
    if 'access_token' not in session:
        return redirect('/signin')
    spreadsheet_id = request.form["spreadsheet_id"]
    credentials = google.oauth2.credentials.Credentials(token=session['access_token'])
    service = build("sheets", "v4", credentials=credentials)
    sheets_api = service.spreadsheets()
    try:
        sheets = get_sheets(sheets_api, spreadsheet_id)
        data_by_sheets = {}
        for sheet in sheets:
            data = get_sheet_data(sheets_api, spreadsheet_id, sheet)
            data_by_sheets[sheet] = data
    except googleapiclient.errors.HttpError as e:
        return f"upload failure"
    dirpath = os.path.join("static", "uploads", spreadsheet_id)
    filepath = os.path.join(dirpath, "data.json")
    os.makedirs(dirpath, exist_ok=True)
    with open(filepath, "w") as file:
        json.dump(data_by_sheets, file)
    return "upload success!"
```

Here is the full working code:

```python
from flask import Flask, redirect, session, url_for, request
import google_auth_oauthlib.flow
import json
import os
import requests
from googleapiclient.discovery import build
import googleapiclient.errors
import google.oauth2.credentials

app = Flask('app')
# `FLASK_SECRET_KEY` is used by sessions. You should create a random string
# and store it as secret.
app.secret_key = os.environ.get('FLASK_SECRET_KEY') or os.urandom(24)

# `GOOGLE_APIS_OAUTH_SECRET` contains the contents of a JSON file to be downloaded
# from the Google Cloud Credentials panel. See next section.
oauth_config = json.loads(os.environ['GOOGLE_OAUTH_SECRETS'])

# This sets up a configuration for the OAuth flow
oauth_flow = google_auth_oauthlib.flow.Flow.from_client_config(
    oauth_config,
    # scopes define what APIs you want to access on behave of the user once authenticated
    scopes=[
        "https://www.googleapis.com/auth/userinfo.email",
        "openid",
        "https://www.googleapis.com/auth/userinfo.profile",
        "https://www.googleapis.com/auth/spreadsheets.readonly"
    ]
)

# This is entrypoint of the login page. It will redirect to the Google login service located at the
# `authorization_url`. The `redirect_uri` is actually the URI which the Google login service will use to
# redirect back to this app.
@app.route('/signin')
def signin():
    # We rewrite the URL from http to https because inside the Replit App http is used,
    # but externally it's accessed via https, and the redirect_uri has to match that
    oauth_flow.redirect_uri = url_for('oauth2callback', _external=True).replace('http://', 'https://')
    authorization_url, state = oauth_flow.authorization_url()
    session['state'] = state
    return redirect(authorization_url)

# This is the endpoint that Google login service redirects back to. It must be added to the "Authorized redirect URIs"
# in the API credentials panel within Google Cloud. It will call a Google endpoint to request
# an access token and store it in the user session. After this, the access token can be used to access
# APIs on behalf of the user.
@app.route('/oauth2callback')
def oauth2callback():
    if not session['state'] == request.args['state']:
        return 'Invalid state parameter', 400
    oauth_flow.fetch_token(authorization_response=request.url.replace('http:', 'https:'))
    session['access_token'] = oauth_flow.credentials.token
    return redirect("/")

# Call the userinfo API to get the user's information with a valid access token.
# This is the first example of using the access token to access an API on the user's behalf.
def get_user_info(access_token):
    response = requests.get("https://www.googleapis.com/oauth2/v3/userinfo", headers={
       "Authorization": f"Bearer {access_token}"
   })
    if response.status_code == 200:
        user_info = response.json()
        return user_info
    else:
        print(f"Failed to fetch user info: {response.status_code} {response.text}")
        return None

@app.route('/logout')
def logout():
    session.clear()
    return redirect('/')

# fetch all sheets within a Google spreadsheet
def get_sheets(sheets_api, spreadsheet_id) -> list[str]:
    result = sheets_api.get(spreadsheetId=spreadsheet_id).execute()
    return [sheet["properties"]["title"] for sheet in result["sheets"]]

# fetch the data for a given sheet within a Google spreadsheet
def get_sheet_data(sheets_api, spreadsheet_id, sheet_title) -> list[list[str]]:
    result = (
        sheets_api.values()
        .get(spreadsheetId=spreadsheet_id, range=sheet_title)
        .execute()
    )
    return result["values"]

# Render a form to allow importing a spreadsheet
@app.route("/import_spreadsheet_form")
def import_spreadsheet_form():
    return """
    <h3>Import Spreadsheet</h3>
    <form action="/import_spreadsheet" method="POST">
        <label>Spreadsheet ID</label>
        <input type="text" name="spreadsheet_id">

        <button type="submit">Import</button>
    </form>
    """

@app.route("/import_spreadsheet", methods = ['POST'])
def import_spreadsheet():
    if 'access_token' not in session:
        return redirect('/signin')
    spreadsheet_id = request.form["spreadsheet_id"]
    credentials = google.oauth2.credentials.Credentials(token=session['access_token'])
    service = build("sheets", "v4", credentials=credentials)
    sheets_api = service.spreadsheets()
    try:
        sheets = get_sheets(sheets_api, spreadsheet_id)
        data_by_sheets = {}
        for sheet in sheets:
            data = get_sheet_data(sheets_api, spreadsheet_id, sheet)
            data_by_sheets[sheet] = data
    except googleapiclient.errors.HttpError as e:
        return f"upload failure"
    dirpath = os.path.join("static", "uploads", spreadsheet_id)
    filepath = os.path.join(dirpath, "data.json")
    os.makedirs(dirpath, exist_ok=True)
    with open(filepath, "w") as file:
        json.dump(data_by_sheets, file)
    return "upload success! Really!"

@app.route('/')
def welcome():
    if "access_token" in session:
        user_info = get_user_info(session["access_token"])
        if user_info:
            return f"""
            Hello {user_info["given_name"]}!<br>
            Your email address is {user_info["email"]}<br>
            <a href="/signin">Sign In to Google</a><br>
            <a href="/import_spreadsheet_form">Import a Sheet</a>
            """
    return """
    <h1>Welcome to Google Sheet Importer</h1>
    <a href="/signin">Sign In to Google</a><br>
    <a href="/import_spreadsheet_form">Import a Sheet</a>
    """

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
```

Remember, if you deploy the app. Make sure to:

1. Added the production `/oauth2callback` URI for to the "Authorized redirect URIs".
2. Go to the [consent page](https://console.cloud.google.com/apis/credentials/consent) and "Publish App".

Hope you had a good experience, and hope you Enjoy your further advantures.


# Streaming native graphics using VNC
Source: https://docs.replit.com/additional-resources/streaming-native-graphics-vnc

Replit offers virtual network computing (VNC) functionality. VNC is a mature virtual desktop protocol that allows your Replit App to stream a native desktop to your web browser. This protocol allows native applications (developed in Python, Java, C++, etc.) to open desktop windows as they would on any physical computer.

This streaming technology allows you to work with legacy applications in your browser from any device! For example, you could run a Python-powered game designed for desktop right on your mobile phone or tablet without making any changes to the underlying code.

<a href="https://replit.com/@demcrepl/Tetris-in-Pygame" target="_blank">Tetris (powered by PyGame)</a>

<img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/vnc/tetris.png" alt="image of Tetris in a Replit App" />

## How Can I Use VNC?

Any Replit App – in any language – can use a virtual desktop. No changes are needed to execute native graphics programs on Replit. The VNC pane will appear when any application attempts to open a native desktop window.

## Securing Your Replit App

By default, your VNC connection does not have a password and can only be accessed from [https://replit.com](https://replit.com) since the connection relies on the same authentication used for the WebSocket. If you need to access your Replit App via the external [noVNC](https://novnc.com) client, you can set a VNC password.

Set a password in your Replit App [secrets](/replit-workspace/workspace-features/secrets) configuration. `Secrets` is a secure place to store passwords without the fear of other users accessing your passwords. Setting `VNC_PASSWORD` will add enhanced security when connecting remotely.

## How Can I Use Fullscreen VNC?

You must have secured your Replit App as instructed above to proceed with these steps.

1. Execute the following command in your "Shell" tab:
   ```sh
   echo $REPL_ID
   ```

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/vnc/replid.png" alt="image showing the echo command" />
</Frame>

2. Construct your connection URL by replacing `REPL_ID` in with the output from above: `<\REPL_ID\>.id.repl.co`
3. Open the [noVNC client](https://novnc.com/noVNC/vnc.html) in a separate browser tab.
4. Open connection settings.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/vnc/settings.png" alt="open connection settings" />
</Frame>

5. Expand the WebSockets field. Enter your connection URL (`\<REPL_ID\>.id.repl.co`) in the `host` field, and leave the `path` field empty.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/vnc/host.png" alt="host" />
</Frame>

6. Change the `Scaling Mode` to `Remote Resizing`:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/vnc/scaling.png" alt="scaling" />
</Frame>

7. Use the `runner` username and the password configured above when asked for credentials.

## Examples

* <a href="https://replit.com/@demcrepl/Tetris-in-Pygame" target="_blank">PyGame</a>
* <a href="https://replit.com/@amasad-matplotlib" target="_blank">Python matplotlib</a>
* <a href="https://replit.com/@sigcse2021/Game-of-Life-demcrepl" target="_blank">Java Processing</a>


# Deployments and Database Billing
Source: https://docs.replit.com/billing/about-usage-based-billing

Learn how Replit bills for deployments and databases, including outbound data transfer, compute units, requests, and PostgreSQL usage metrics.

There are three types of usage-based billing for deployments:

1. Outbound Data Transfer
2. Autoscale Compute Units
3. Requests

You can view your usage in your account [here](https://replit.com/account#resource-usage). Billing occurs monthly or once your accumulated costs exceed your monthly credits. Replit Core and Teams users receive monthly allowances for these resources.

# Deployments

### 1. Deployments Outbound Data Transfer

This type of usage is billed per byte with Replit Core users receiving a monthly allowance. Only egress (outgoing) data is counted against this allowance, potentially leading to overages. In contrast, ingress (incoming) data is always free.

| Subscription | Allowance |
| ------------ | --------- |
| Replit Core  | 100 GiB   |

The allowances apply to [Static](../cloud-services/deployments/static-deployments), [Autoscale](../cloud-services/deployments/autoscale-deployments), [Reserved VM](../cloud-services/deployments/reserved-vm-deployments) and [Scheduled](../cloud-services/deployments/scheduled-deployments) deployments.

See the [pricing page](https://www.replit.com/pricing) for the current price of outbound data transfer.

***

### 2. Compute Units

Autoscale Deployments are billed based on Compute Units, which take into account both CPU and RAM usage over time.

Overages are billed based on Compute Units. The granularity of the billing is down to each individual compute unit. See the [pricing page](https://www.replit.com/pricing) for the current price of compute units.

Here is a breakdown of how RAM and CPU seconds for an Autoscale Deployment translate into Compute Units:

| Resource     | Compute Units |
| ------------ | ------------- |
| 1 RAM Second | 2 Units       |
| 1 CPU Second | 18 Units      |

Static Deployments don't consume Compute Units. Their billing is solely for Outbound Data Transfers beyond a [specified amount](#).

[Learn more about Autoscale Deployments](/cloud-services/deployments/autoscale-deployments).

***

### 3. Requests

Autoscale Deployments also consider the number of requests made.

See the [pricing page](https://www.replit.com/pricing) for the current price of requests.

# Databases

### 1. PostgreSQL Usage Metrics

Replit PostgreSQL offers effortless high availability with no administrative or maintenance burden. Being serverless, Replit PostgreSQL only charges for actual usage, resulting in potential cost savings of up to 10 times.

Replit PostgreSQL databases bill for usage based on the following usage metrics:

* **[Compute Time](#compute-time)**: The amount of compute resources used per hour.
* **[Data Storage](#data-storage)**: The volume of data and history stored.

You can view your usage in your account [here](https://replit.com/account#resource-usage).

#### **Compute Time**

Compute time is determined by number of hours your database remains active during a given billing period. Databases are considered active when they receive requests and for an additional 5-minute period after the last request. If a database remains idle for 5 minutes, it will be suspended and enter an inactive state.

#### **Data Storage**

Data storage is the total volume of data stored across all databases in your account, measured in gibibytes (GiB). Storage is calculated as the maximum amount of storage used per month. Each PostgreSQL database consumes 33MB of storage, even if it doesn't contain any data. This is the default storage footprint of the Postgres server.

<Note>
  The total storage limit for each database is 10 gibibytes (GiB).
</Note>

# Additional Notes

If there's an issue with your payment method, we'll notify you. Continuous payment failures might lead to the suspension of your deployments. If this happens, please [contact support](https://support.replit.com) and update your payment details to regain access to our services.


# Replit AI Billing
Source: https://docs.replit.com/billing/ai-billing

Learn how billing and credits work for Replit AI features including Agent and Assistant usage, checkpoints, and managing your spend.

export const AssistantCheckpointCost = '$0.05';

export const AgentCheckpointCost = '$0.25';

export const TeamsCredits = '$40';

export const CoreCredits = '$25';

export const NewUserFreeAdvancedAssistantRequests = '20';

export const NewUserFreeAgentCheckpoints = '10';

New users receive **{NewUserFreeAgentCheckpoints}** free Agent checkpoints and **{NewUserFreeAdvancedAssistantRequests}** Advanced Assistant edit requests.

Core subscribers receive **{CoreCredits}** in monthly credits, while Teams subscribers get **{TeamsCredits}** in monthly credits per user.
These credits automatically apply to Agent, Advanced Assistant usage, and other Replit cloud services (deployments, storage, databases, etc.).

## Agent billing

The Replit Agent operates on a usage-based billing system where you pay **{AgentCheckpointCost}** per checkpoint.
A checkpoint occurs when the Agent makes file changes while working on your request, regardless of whether the entire task is complete.

Core subscribers receive **{CoreCredits}** in monthly credits, while Teams subscribers get **{TeamsCredits}** in monthly credits per user. These credits automatically apply to both Agent usage and other Replit cloud service costs.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/replitai/agent_07.png" alt="agent_07" />
</Frame>

You can keep track of your Agent usage from within the **Agent** tab or on the usage page. The usage page can take up to 30 minutes to reflect activity.

## Assistant billing

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/replitai/assistant_03.png" alt="assistant_03" />
</Frame>

The Replit Assistant has two modes, Basic Assistant and Advanced Assistant. Basic Assistant is free to use.

The Advanced Assistant, similar to the Agent, operates on a usage-based billing system where you pay **{AssistantCheckpointCost}** per edit request.
An edit request is typically made when you ask the Advanced Assistant for help building a feature or fixing an error.

You can keep track of your Assistant usage from within the Assistant tab or on the usage page. The usage page can take up to 30 minutes to reflect activity.

## Managing your spend

You are able to set usage alerts and budgets to stay on top of your spending. Learn more about [managing your spend](/billing/managing-spend).


# Deployment Repricing (Feb 2025)
Source: https://docs.replit.com/billing/deployment-repricing

Summary of the Deployment pricing changes coming in spring 2025.

export const ReservedAfter = '$40';

export const ReservedBefore = '$51.20';

export const ActiveAppsDeploymentFee = '$3';

export const ActiveAppsAfter = '$35.12';

export const ActiveAppsBefore = '$12.54';

export const MinimalUsageDeploymentFee = '$1';

export const MinimalUsageAfter = '$1.32';

export const MinimalUsageBefore = '$0.13';

export const DedicatedLargeVm = '$160.00';

export const DedicatedLargeVmOld = '$204.80';

export const DedicatedMediumVm = '$80.00';

export const DedicatedMediumVmOld = '$102.40';

export const DedicatedSmallVm = '$40.00';

export const DedicatedSmallVmOld = '$51.20';

export const SharedLargeVm = 'Deprecated';

export const SharedLargeVmOld = '$25.60';

export const SharedMediumVm = '$20.00';

export const SharedMediumVmOld = '$12.80';

export const SharedSmallVm = '$10.00';

export const SharedSmallVmOld = '$6.40';

export const ScheduledDeployment = '$1.00';

export const SchedulerPrice = '$0.00';

export const SchedulerPriceOld = '$0.10';

export const ScheduledComputeUnit = '$0.00000320';

export const ScheduledComputeUnitOld = '$0.00000125';

export const AutoscaleDeployment = '$1.00';

export const AutoscaleRequests = '$0.00000120';

export const AutoscaleRequestsOld = '$0.00000040';

export const AutoscaleComputeUnit = '$0.00000320';

export const AutoscaleComputeUnitOld = '$0.00000125';

export const AutoscaleBaseFee = '$1';

export const TeamsCredits = '$40';

export const CoreCredits = '$25';

export const OldCoreCredits = '$10';

Starting March 24th, 2025, we're updating our pricing system for Replit Deployments for all existing Core and Teams users. Your active deployments will automatically transition to the new pricing system during your next billing period after March 24th, 2025. No action is required at this time.

For all Starter users and new subscribers (after February 22nd, 2025), the changes are effective immediately.

* New {AutoscaleBaseFee}/month base fee for Autoscale & Scheduled Deployments.
* Autoscale, Scheduled Deployments, and Shared Reserved VMs pricing has increased.
* Dedicated Reserved VMs pricing has decreased.
* All other product pricing (Agent checkpoints, Core subscription, databases, etc.) remain unchanged.

### Why this change is being made

In the past few months we've made Replit Deployments more reliable, faster, and cheaper. We've also raised the monthly Core plan credits from {OldCoreCredits} to {CoreCredits} ({TeamsCredits } for Teams), which are applied towards Deployment costs. To reflect the improved level of service and the boost in credits, we’re aligning prices. These changes only apply to Deployments compute products.

### Updated prices

| Product                                  |            Previous Price |                                                                                       Updated Price |
| :--------------------------------------- | ------------------------: | --------------------------------------------------------------------------------------------------: |
| **Autoscale Deployments**                |                           |                                                                                                     |
| Compute Unit (Per Second)                | {AutoscaleComputeUnitOld} |                                                                              {AutoscaleComputeUnit} |
| Autoscale Requests (Count)               |    {AutoscaleRequestsOld} |                                                                                 {AutoscaleRequests} |
| Autoscale Deployment (Per Month)         |                       N/A |                                                                               {AutoscaleDeployment} |
| **Scheduled Deployments**                |                           |                                                                                                     |
| Compute Unit (Per Second)                | {ScheduledComputeUnitOld} |                                                                              {ScheduledComputeUnit} |
| Scheduler Price                          |       {SchedulerPriceOld} |                                                                                    {SchedulerPrice} |
| Scheduled Deployment (Per Month)         |                       N/A |                                                                               {ScheduledDeployment} |
| **Reserved VM Deployments**              |                           |                                                                                                     |
| Shared 0.25 vCPU / 1GiB RAM (Per Month)  |        {SharedSmallVmOld} |                                                                                     {SharedSmallVm} |
| Shared 0.5 vCPU / 2GiB RAM (Per Month)   |       {SharedMediumVmOld} |                                                                                    {SharedMediumVm} |
| Shared 1 vCPU / 4GiB RAM (Per Month)     |        {SharedLargeVmOld} | <Tooltip tip="Current deployments using this configuration will now be $30/mo">Deprecated</Tooltip> |
| Dedicated 1 vCPU / 4GiB RAM (Per Month)  |     {DedicatedSmallVmOld} |                                                                                  {DedicatedSmallVm} |
| Dedicated 2 vCPU / 8GiB RAM (Per Month)  |    {DedicatedMediumVmOld} |                                                                                 {DedicatedMediumVm} |
| Dedicated 4 vCPU / 16GiB RAM (Per Month) |     {DedicatedLargeVmOld} |                                                                                  {DedicatedLargeVm} |

### Example scenarios

Here are a few examples of how this change may impact your deployment prices. Note that most Agent apps are deployed using Autoscale Deployments.

**Scenario 1: You have a weekend project with minimal usage (100,000 Compute Units, 1000 requests)**

* Before: {MinimalUsageBefore}
* After: {MinimalUsageAfter} (+{MinimalUsageDeploymentFee} deployment fee and increase in unit and request prices)

**Scenario 2: You have 3 active applications with hundreds of daily active users on an Autoscale deployments (10M Compute Units, 100,000 requests)**

* Before: {ActiveAppsBefore}
* After: {ActiveAppsAfter} (+{ActiveAppsDeploymentFee} deployment fee, and increase in unit and request prices)

**Scenario 3: You have a Dedicated Reserved VM deployment with 1vCPU and 4GiB RAM**

* Before: {ReservedBefore}/month
* After: {ReservedAfter}/month

### Need help?

Thank you for being a Replit customer. We're excited to continue supporting your projects. If you have any questions regarding the changes, please reach out to [support@replit.com](mailto:support@replit.com)


# Managing Your Spend
Source: https://docs.replit.com/billing/managing-spend

Set up usage alerts and budgets to monitor and control costs for usage-based billing services on Replit. Get notified when you reach spending thresholds.

export const NewInvoiceThreshold = '$50';

export const OldInvoiceThreshold = '$10';

export const StaticDeploymentOutboundPerGiB = '$0.10';

export const OrganizationBudgetIncrement = '$500';

export const CycleValue = '$0.01';

export const ScheduledOutboundCost = '$0.10';

export const SchedulerMonthlyCost = '$0.10';

export const ScheduledDefaultCost = '$0.000028';

export const DedicatedLargeVm = '$160.00';

export const DedicatedLargeVmOld = '$204.80';

export const DedicatedMediumVm = '$80.00';

export const DedicatedMediumVmOld = '$102.40';

export const DedicatedSmallVm = '$40.00';

export const DedicatedSmallVmOld = '$51.20';

export const SharedLargeVm = 'Deprecated';

export const SharedLargeVmOld = '$25.60';

export const SharedMediumVm = '$20.00';

export const SharedMediumVmOld = '$12.80';

export const SharedSmallVm = '$10.00';

export const SharedSmallVmOld = '$6.40';

export const ScheduledDeployment = '$1.00';

export const SchedulerPrice = '$0.00';

export const SchedulerPriceOld = '$0.10';

export const ScheduledComputeUnit = '$0.00000320';

export const ScheduledComputeUnitOld = '$0.00000125';

export const AutoscaleDeployment = '$1.00';

export const AutoscaleRequests = '$0.00000120';

export const AutoscaleRequestsOld = '$0.00000040';

export const AutoscaleComputeUnit = '$0.00000320';

export const AutoscaleComputeUnitOld = '$0.00000125';

export const AutoscaleBaseFee = '$1';

export const AssistantCheckpointCost = '$0.05';

export const AgentCheckpointCost = '$0.25';

export const TeamsCredits = '$40';

export const CoreCredits = '$25';

export const OldCoreCredits = '$10';

export const NewUserFreeAdvancedAssistantRequests = '20';

export const NewUserFreeAgentCheckpoints = '10';

export const AssistantEditRequestPrice = '$0.05';

You have the option to establish a monthly usage alert and usage budget for usage-based billing services to control your costs.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/replitai/usage-alerts.png" alt="usage-alerts" />
</Frame>

### User usage alerts

Usage alerts are a simple way to get a heads-up when you hit a certain spending amount beyond your monthly credits. You will be notified when you hit the set amount on Replit and via email.

Visit your [account page](https://replit.com/account#billing) or [usage page](https://replit.com/usage) to set up a usage alert.

### User budgets

Budgets are a hard cap on your monthly spending. Once your budget is met or exceeded, we will send you an email notification and temporarily suspend all of your usage-based services. After suspension, you will have 30 days to update your budget and resume deployments until they are deleted. Suspended deployments are not automatically resumed, you must resume each deployment once your budget is no longer exceeded.

Visit your [account page](https://replit.com/account#billing) or [usage page](https://replit.com/usage) to set up a budget.

### Organization budgets

Visit your organizations billing settings or usage page to set up a budget. Budgets must be in increments of {OrganizationBudgetIncrement}.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/teams/billing/billing-panel-usage-budget.png" alt="Billing Settings" />
</Frame>


# Cancellation
Source: https://docs.replit.com/billing/teams-billing/cancellation

Learn how to cancel your organization subscription and understand what happens to your resources when you delete your organization.

## Subscription cancellation

You can cancel your subscription by deleting your organization under your organizations advanced settings. Upon deletion of your org, all resources will be deleted (Replit Apps, Deployments, Projects, etc.) and you will immediately lose access to the organization.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/teams/billing/org-deletion.png" alt="org-deletion" />
</Frame>


# Managing Seats
Source: https://docs.replit.com/billing/teams-billing/managing-seats

Learn how to add and remove seats in your organization, including prorated billing and scheduling changes for the next billing period.

## Where to manage seats

Seats can be managed from the Organization's billing settings or the members page.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/teams/billing/seat-management-members-page.png" alt="seat-management-members-page" />
</Frame>

## Adding Seats

Adding a seat happens immediately and you will pay a prorated value for the seat for the remainder of your billing period and get a prorated Monthly Credit. For example, if you are half way through the billing period, the seat will cost 50% of the full cost, and the Monthly Credit for the seat will be 50%. At the next billing period cycle, the seat will cost full value and the Monthly Credit will be the full amount.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/teams/billing/seat-management-add-seat.png" alt="seat-management-add-seat" />
</Frame>

## Removing Seats

To remove a seat from your organization, that seat must be empty. Any seat that is associated with a user cannot be removed. Removing a seat does not immediately take effect - you will have access to this seat until the end of your current billing period. At the start of the next billing period, your organization will have the updated number of seats.

### Adding members to seats scheduled for removal

If you have a seat scheduled to be removed at the start of the next billing period, you still can add a member to consume that seat. Adding a member will stop that seat from being removed at the start of the next billing period.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/teams/billing/scheduled-seat-warning.png" alt="scheduled-seat-warning" />
</Frame>


# Overview
Source: https://docs.replit.com/billing/teams-billing/overview

Learn about seat pricing and usage-based billing for Replit Teams, including how invoicing works and monthly credit allocations per team member.

export const TeamsCredits = '$40';

## Replit Teams Billing

Replit Teams plans have two parts of their billing: Seats and Usage-Based costs. Both are charged at the same time on the same invoice. To see your historic and upcoming bills, visit the usage page.

An invoice will have:

* The upfront seat cost for the current billing period
* The usage-based costs for the previous billing period

## Seat pricing

Seats are a fixed fee per user per billing period. Each seat comes with a monthly spend credit, which is currently {TeamsCredits} per user per month.

## Usage-Based pricing

Visit our [Usage-Based](/billing/about-usage-based-billing) docs for more information.


# Billing
Source: https://docs.replit.com/category/billing

Replit's billing system helps you optimize your spending on the platform.

You can use Replit's billing tools to review your spending patterns, set monthly budget limits,
and receive alerts when you reach a spending threshold. Set up your alerts and limits to
prevent unexpected charges and give yourself time to increase your budget if needed for
uninterrupted access.

## Getting started

You can access Replit's billing features from the tools in the following sections.

### Account billing page

View plan details, payment information, manage usage alerts, and set a budget.

<Accordion title="How to access the Account billing page">
  1. Select your profile icon in the top right corner to access the dropdown menu.
  2. Select <img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/shared/settings-icon.svg" alt="gear icon" /> **Account**.
  3. Select <img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/billing/credit-card-icon.svg" alt="credit card icon" /> **Billing** from the left navigation bar to view your current plan, current month usage, alert settings, and budget limit.
     You should see a screen that resembles the following screenshot:

  <Frame>
    <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/billing/billing-settings.webp" alt="billing settings screen" />
  </Frame>
</Accordion>

### Usage dashboard

Track detailed resource consumption and costs for the current billing period, organized by service category.

<Accordion title="How to access the Usage dashboard">
  From the home screen, select <img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/shared/buttons/usage-icon.svg" alt="usage icon" /> **Usage** from the left navigation bar.
  You should see a screen that resembles the following screenshot:

  <Frame>
    <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/billing/usage-screen.webp" alt="sample Usage screen" />
  </Frame>
</Accordion>

### Invoices

Review past usage and payments for subscriptions and usage-based charges.

<Accordion title="How to access invoices">
  1. From the home screen, select <img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/shared/buttons/usage-icon.svg" alt="usage icon" /> **Usage** from the left navigation bar.
  2. Select **See previous invoices** in the **Resource usage** section, which opens a page on Replit's third-party provider.
     You should see a screen that resembles the following screenshot:

  <Frame>
    <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/billing/sample-invoice.webp" alt="sample Invoices screen" />
  </Frame>
</Accordion>

## Key features

* View your current plan and usage in the **Billing** section of the <a href="https://replit.com/account" target="_blank">Account</a> page.
* Set alerts and budgets to manage costs and prevent unexpected charges. See [Managing Your Spend](/billing/managing-spend) for more information.
* Track detailed resource consumption and costs for the current billing period in your **Usage** dashboard.
* View and download current and past costs from the invoice portal linked from the **Usage** dashboard.

## Use cases

The following examples demonstrate how to use Replit's billing features to control spending and gain insights into resource usage.

### Control costs for your Replit App

Use the following features to protect against unexpected costs when your autoscale-deployed app goes viral:

* Create a usage alert to notify you when your spending reaches your custom threshold
* Set a budget limit to suspend your app when you reach the cap
* If you reach your monthly limit, increase your budget and restart the app to restore availability

### View your expenses over time

Use data from the **Usage** and **Invoice** pages to perform the following tasks:

* Streamline expense reporting with export-ready invoices
* Download or view itemized reports for accounting and budget planning
* Identify cost optimization opportunities by reviewing usage trends

## Next steps

To learn more about Replit's billing and plans, see the following resources:

* <a href="https://replit.com/pricing" target="_blank">Pricing plans</a> - Compare plans and features
* [AI Billing](/billing/ai-billing): Learn how Replit charges for Agent and Assistant usage
* [Deployments and Database Billing](/billing/about-usage-based-billing): Learn about compute units, data transfer, and database costs
* [Replit Teams](/category/teams/) - Learn about the Teams plan, which includes AI-powered collaborative coding and team management


# Bounties
Source: https://docs.replit.com/category/bounties

Learn how to earn Cycles by completing coding tasks or post your own Bounties to get help with development projects on Replit.

<CardGroup cols={2}>
  <Card title="Earning with Replit Bounties" href="/additional-resources/bounties/bounty-hunting" icon="coins" horizontal>
    Bounties on Replit allow you to request and pay for coding tasks or project work using Cycles. Create a Bounty for tasks like product development or API integration.
  </Card>

  <Card title="Posting and awarding a Bounty" href="/additional-resources/bounties/posting-a-bounty" icon="briefcase" horizontal>
    Posting Bounties on Replit is easy and similar to freelancing platforms. Create and award tasks to Bounty Hunters.
  </Card>

  <Card title="Resources for Bounty Hunters" href="/additional-resources/bounties/hunter-resources" icon="book" horizontal>
    Access helpful templates and resources to enhance your Bounty Hunting experience.
  </Card>

  <Card title="Bounty Templates" href="/additional-resources/bounties/bounty-templates" icon="file" horizontal>
    Check out the templates for creating your Bounties and communicating expectations clearly.
  </Card>

  <Card title="Frequently Asked Questions (FAQ)" href="/additional-resources/bounties/faq" icon="question" horizontal>
    Learn more about what Bounties are and how they work with our FAQ section.
  </Card>
</CardGroup>


# Cloud Services
Source: https://docs.replit.com/category/cloud-services

Learn how to deploy your Replit Apps and manage cloud storage and databases to build production-ready applications.

<CardGroup cols={2}>
  <Card title="Replit Deployments" href="/category/replit-deployments" icon="cloud" horizontal>
    12 items
  </Card>

  <Card title="Storage and Databases" href="/category/storage-and-databases" icon="database" horizontal>
    3 items
  </Card>
</CardGroup>


# Legal and Security
Source: https://docs.replit.com/category/legal-and-security

Learn about Replit's policies on security, privacy, licensing, usage limits, and other legal matters to help you use the platform safely and effectively.

<CardGroup cols={2}>
  <Card title="Reporting Abuse on Replit" href="/legal-and-security-info/abuse-report" icon="bug" horizontal>
    At Replit, we strive to maintain a safe and welcoming environment for all our users. Report any abusive, harmful, or inappropriate content immediately.
  </Card>

  <Card title="Copyright claims and takedown requests" href="/legal-and-security-info/copyright-claims-takedown-requests" icon="copy" horizontal>
    It is against our Terms and Conditions to publish content that violates copyrights, privacy, or contract rights. We act immediately on takedown requests.
  </Card>

  <Card title="Licensing information" href="/legal-and-security-info/licensing-info" icon="file" horizontal>
    Find details on how your Replit Apps are licensed here.
  </Card>

  <Card title="Strike system FAQ" href="/legal-and-security-info/strike-system-faq" icon="triangle" horizontal>
    Learn about warnings, bans, and the site ban process at Replit.
  </Card>

  <Card title="Account Inactivity" href="/legal-and-security-info/account-inactivity" icon="user" horizontal>
    Replit reserves the right to terminate inactive accounts after 6 months of no activity.
  </Card>

  <Card title="Deleting your data" href="/legal-and-security-info/deleting-your-data" icon="trash" horizontal>
    Instructions for deleting your personal information from Replit.
  </Card>

  <Card title="Security" href="/legal-and-security-info/security" icon="lock" horizontal>
    Information on how Replit secures your code, applications, and user data.
  </Card>

  <Card title="Support Policy" href="/legal-and-security-info/support-policy" icon="headset" horizontal>
    Learn about the support options Replit offers for users, both free and members.
  </Card>

  <Card title="Trust and Safety at Replit" href="/legal-and-security-info/trust-and-safety" icon="shield" horizontal>
    We strive to create a trusted and safe community. Here's how we do it.
  </Card>

  <Card title="Usage Quota & Limits" href="/legal-and-security-info/usage" icon="gauge" horizontal>
    Learn about Replit's service limits, soft limits, and hard limits.
  </Card>

  <Card title="Replit web accessibility statement" href="/legal-and-security-info/web-accessibility" icon="eye" horizontal>
    See Replit's accessibility features and commitment to web accessibility.
  </Card>
</CardGroup>


# Object Storage
Source: https://docs.replit.com/category/object-storage

Learn how to use Replit's object storage service to store and manage data objects in buckets with Python and TypeScript APIs.

<CardGroup cols={2}>
  <Card title="Overview" href="/cloud-services/storage-and-databases/object-storage/overview" icon="book" horizontal>
    Object Storage is a data storage architecture that manages data as Objects. In Object Storage, data is stored in containers called Buckets, which can hold any number of Objects. Each Object consists of data, metadata, and a unique identifier.
  </Card>

  <Card title="Python API Reference" href="/cloud-services/storage-and-databases/object-storage/python-api-reference/" icon="python" horizontal>
    3 items
  </Card>

  <Card title="TypeScript API Reference" href="/cloud-services/storage-and-databases/object-storage/typescript-api-reference/" icon="code" horizontal>
    3 items
  </Card>
</CardGroup>


# Replit AI
Source: https://docs.replit.com/category/replit-ai

Replit's AI-powered tools help you code faster, solve problems more efficiently, and deliver production-ready apps.

{/* <!-- vale off --> */}

{/* <!-- vale on --> */}

Replit AI enables you to accomplish the following tasks:

* Transform a text description into an e-commerce app without prior coding experience.
* Learn what a section of code does by asking AI to explain it.
* Accelerate onboarding by providing contextual answers to questions about your codebase.

## What is Replit AI

Replit AI is the set of artificial intelligence capabilities integrated with the Replit workspace.
Use Replit AI to create and customize apps to match your needs using natural language prompts.

Replit AI includes these powerful services:

<CardGroup cols={2}>
  <Card title="Agent" icon="robot">
    Specializes in generating new projects and building complex features.
  </Card>

  <Card title="Assistant" icon="wand-magic-sparkles">
    Specializes in describing your code, making quick fixes, and adding new features.
  </Card>
</CardGroup>

Learn more about Agent and Assistant in the following video:

<Frame>
  <iframe src="https://www.youtube.com/embed/QiW2hXEphpI" title="Replit Assistant and Agent" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen />
</Frame>

## Getting started

The quickest way to start using the Replit's AI-powered tools is to follow the
[Create with AI](/getting-started/quickstarts/ask-ai/) Quickstart to build an app.

<Warning>
  Agent and Advanced Assistant are premium features that charge your Replit account
  based on usage. For pricing information and billing policies, see [Replit AI Billing](/billing/ai-billing/).
</Warning>

Alternatively, open either Agent or Assistant by following:

* Open an existing Replit App
* Select the <img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/shared/workspace-search-icon.svg" alt="magnifying glass icon" /> magnifying glass at the top to open the search tool
* Scroll to the **Tools** section or enter **Agent** or **Assistant** in the input area.

<Note>
  Agent is only available in Replit Apps created using Agent.
  For more information, see [Replit Agent on existing Replit App](/replitai/agent#replit-agent-on-existing-replit-app).
</Note>

### Key features

Replit AI offers the following powerful development features:

* Complete app and feature generation from natural language descriptions
* Intelligent code completion to write error-free code faster
* Interactive AI chat for help on topics including code explanation, debugging, idea generation, and database design

## Use cases

The following examples showcase how Replit AI can transform your ideas into apps.

### Improve selected code using Assistant

Select lines of code within a file and ask Assistant to explain what it accomplishes.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/replitai/replitai-overview-assistant-explain.png" alt="image of Assistant's explanation of selected code" />
</Frame>

### Add a complex API integration using Agent

Add a Stripe payment processor integration to your web app to accept payments.
Learn more about this topic in the following video:

<Frame>
  <iframe src="https://www.youtube.com/embed/TW8xaPERcRU" title="Stripe Checkout in Replit" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen />
</Frame>

## Next steps

{/* vale off */}

To learn more about Replit's AI-powered features, see the following resources:

* Learn more about Replit Agent and usage pricing in [Replit Agent](/replitai/agent/)
* Learn more about Replit Assistant and usage pricing in [Replit Assistant](/replitai/assistant/)

{/* vale on */}


# Replit Apps
Source: https://docs.replit.com/category/replit-apps

Replit Apps help you transform your ideas into apps anyone can access, anywhere.

## What is a Replit App?

Replit Apps are cloud-hosted projects that contain code, data, and assets.
You can create, run, and deploy them from a secure, isolated environment.

Replit Apps integrate with the following tools in your Replit workspace to provide
a seamless development experience:

* **AI-powered tools**: Use Agent and Assistant to create, debug, and explain your code.
* **Collaboration**: Work with others in real time on the same app.
* **Deployment**: Deploy your app to the cloud with a single click.
* **Templates**: Start your app quickly using preset configurations for various use cases.

<Note>
  **Replit App** is the new product name for **Repl**. To learn more about the renaming, see <a href="https://blog.replit.com/replit-apps" target="_blank">Repls are now Replit Apps</a>.
</Note>

## Getting started

<Tip>
  For step-by-step instructions on creating Replit Apps, see the following Quickstart guides:

  * [Remix an App](getting-started/quickstarts/remix-an-app)
  * [Create with AI](/getting-started/quickstarts/ask-ai)
  * [Build from Scratch](/getting-started/quickstarts/from-scratch)
</Tip>

To open a Replit App, log into Replit and open it in your workspace using one
of the following methods.

<Accordion title="Create a new Replit App">
  1. Select <img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/shared/buttons/create-app-icon.svg" alt="plus icon" /> **Create App**.
     You should see the following screen:

     <Frame>
       <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/replit-apps/create-new-app.png" alt="Create a new App tabs" />
     </Frame>

  2. Select one of the following options:

     * **Create with Replit Agent**: Use AI-powered tools to create a new Replit App.
     * **Choose a Template**: Create a new Replit App based on an existing one.
     * **Import from GitHub**: Create a new Replit App from a GitHub repository.

  3. Complete the dialog prompts to start a new Replit App.
</Accordion>

<Accordion title="Open an existing Replit App">
  To access a Replit App you created previously, select
  <img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/shared/folder-icon.svg" alt="folder icon" /> **Apps**
  from the left sidebar.
</Accordion>

## Key features

Replit Apps offer the following features:

* **Zero-setup:** Create apps or write code directly on Replit.com without any installs or configuration.
* **Auto-save:** Your project continuously saves changes to the cloud and lets you resume coding from any web browser
* **Version Control:** Track changes, explore file history, and sync your files without any configuration, through Replit's version control systems
* **Public/Private Visibility Controls:** Control who can view, run, or create a Remix of your app  with privacy settings
* **Deployments:** Deploy your code to the cloud without making any complex configuration changes
* **Custom App URLs:** Get a unique URL for your app or assign a custom domain for a professional presence

To learn more about Workspace tools that streamline Replit App creation, see [Workspace Overview](/category/replit-workspace/).

## How it works

When you create a Replit App, Replit sets up a private space for your project in the cloud.
As you add features and modifications to your app, Replit saves your changes
automatically so you can resume editing from any web browser.

Replit provides pre-configured environments with all the necessary components.
This lets you start creating your app immediately without worrying about
server configuration, database setup, or environment management.

Replit automatically assigns each Replit App a unique web address where you
can preview your app while you're working on it. When you're ready to share your
creation, you can deploy it with just a few clicks to make it available 24/7.

## Use cases

The following examples showcase how you can use Replit Apps to accelerate your
app creation process.

### Explore something new

Select a template to start coding in a specific programming language or software stack.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/replit-apps/template-use-case.png" alt="screenshot of a template description" />
</Frame>

### Create and test APIs

Build an API with RESTful endpoints and use workspace tools to test them before going live.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/replit-apps/api-use-case.png" alt="screenshot of code from an API and the API Request Tester" />
</Frame>

## Next steps

To learn more about Replit Apps, see the following resources:

* [Templates](https://www.replit.com/templates/): explore starter project setups to give you a head start
* [Deployment](/category/replit-deployments): learn which deployment option works best for your Replit App
* [Custom Domains](cloud-services/deployments/custom-domains#custom-domains-with-deployments): Set your domain to link to your Replit App
* [Storage and Databases](/category/storage-and-databases): Discover your storage options


# Replit Core
Source: https://docs.replit.com/category/replit-core

Learn about Replit Core membership features and benefits to enhance your development experience with advanced tools and capabilities.

<CardGroup cols={1}>
  <Card title="Replit Core Overview" href="/replit-core/replit-core" icon="star" horizontal>
    Replit Core is the membership to unlock the full Replit experience.
  </Card>
</CardGroup>


# Overview
Source: https://docs.replit.com/category/replit-deployments

Share your Replit Apps with the world in just a few clicks.

Replit Deployments lets you publish your Replit App to the cloud using a simplified process.

## What is Replit Deployments?

Replit Deployments is a feature that saves a **snapshot** of your Replit App to the cloud,
where it everyone can interact with it. A snapshot captures the current state of the files in your
Replit App.

When you deploy your Replit App, you create a **deployment**. A deployment is a running instance
of your app on Replit's cloud infrastructure. This makes the app reliably available on the internet,
separate from the version in your workspace.

<Info>
  Replit's infrastructure is backed by Google Cloud Platform (GCP). All deployments are hosted in the United States.
</Info>

Replit Deployments includes tools to monitor your deployment status and view web analytics.

Replit offers the following deployment types:

<CardGroup>
  <Card title="Autoscale Deployments" href="/cloud-services/deployments/autoscale-deployments" icon="layer-group">
    Automatically adjusts resources based on your app's usage.
  </Card>

  <Card title="Static Deployments" href="/cloud-services/deployments/static-deployments" icon="files">
    Provides an affordable way to host websites that don't change based on user input.
  </Card>

  <Card title="Reserved VM Deployments" href="/cloud-services/deployments/reserved-vm-deployments" icon="server">
    Provides a consistent amount of computing resources for your app to run continuously.
  </Card>

  <Card title="Scheduled Deployments" href="/cloud-services/deployments/scheduled-deployments" icon="clock">
    Runs your app at scheduled times that you choose.
  </Card>
</CardGroup>

## Getting started

Follow the steps below to deploy your Replit App:

1. From your Replit App workspace, select <img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/shared/deploy-icon.svg" alt="Deployment icon" /> **Deploy** at the top.
2. In the **Deployments** tab, select your deployment option.
3. If **Add a payment method** appears, follow the prompts to add a payment method.

Replit automatically selects the best deployment option for your app based on the project type and your needs.

However, to choose a different deployment type, consider the following information.

<Accordion title="Choose the right deployment option for your app">
  The following video explains how to choose the right deployment option for your app:

  <Frame>
    <iframe src="https://www.youtube.com/embed/sXP5d0k1atk" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen />
  </Frame>

  Use the following decision tree featured in the video to help you choose:

  <Frame>
    <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/deployments/deploying-your-repl/choose-your-deployment.png" alt="Diagram explaining how to choose a deployment option" />
  </Frame>
</Accordion>

## Key features

Deployments offer the following convenient features:

* **Multiple deployment types**: Select or update a deployment type that meets your needs in a few clicks.
* **Custom domains**: Serve your app from your web domain.
* **Analytics**: Track visitor data and other metrics for your deployed app.
* **Monitoring tools**: View your app's deployment status and configuration.
* **Access controls**: Control who can see your app with a single click. Available only for **Teams** members.

## How it works

When you deploy your Replit App, Replit creates a snapshot of your app's files and dependencies.
This snapshot is then sent to Replit's cloud infrastructure, where it runs as a separate instance of your app.
To update your deployment with the latest changes, deploy again to create a fresh snapshot.

<Warning>
  Avoid saving and relying on data written to a deployed app's filesystem. To store data, use a storage or database option such as Replit's [Storage and Database](/category/storage-and-databases) offerings.
</Warning>

## Use cases

The following examples show different types of Replit Deployments.

### Autoscale deployment: Typing speed assessment app

Let the cloud scale up resources when users take typing tests and reduce them when not in use.

### Static deployment: Solar system simulation

Learn about the planets in a solar system visualization app on the web.
This visualization renders in the browser and doesn't transfer any user input to a server.

### Reserved VM deployment: Discord bot

Run a Discord bot that helps you moderate and onboard members.
It's always online to chat with users and respond to commands with predictable pricing and performance.

### Scheduled deployment: Home automation triggers

Schedule API calls to start and stop your smart home devices at specific times and days.

## Next steps

To learn more about Replit Deployments, see the following resources:

* [Autoscale Deployments](/cloud-services/deployments/autoscale-deployments/): Learn how to set up applications that scale with traffic
* [Static Deployments](/cloud-services/deployments/static-deployments/): Discover how to deploy static websites quickly and efficiently
* [Reserved VM Deployments](/cloud-services/deployments/reserved-vm-deployments/): Explore dedicated VM options for specialized use cases
* [Scheduled Deployments](/cloud-services/deployments/scheduled-deployments/): Set up recurring tasks with simple scheduling
* [Custom Domains](/cloud-services/deployments/custom-domains/): Connect your deployment to a custom domain
* [Troubleshooting](/cloud-services/deployments/static-deployments/): Resolve common deployment issues


# Overview
Source: https://docs.replit.com/category/replit-workspace

The Replit workspace is an environment where you can create apps and write code in a single browser tab without any installation or setup. From the workspace, you can create, run, and deploy your apps from any device.

The workspace provides instant access to all the tools you need to
start creating immediately. Its customizable interface, feature-rich code
editor, and integrated toolset streamline the app development process.

The workspace can help you accomplish the following goals:

* Build apps using only natural language descriptions using Replit's AI-powered tools.
* Collaborate on building an app or conduct interviews using Replit's real-time multiplayer tools.
* Build and deploy your app from any web-enabled device, such as a phone, tablet, or laptop.

## What is a Replit workspace?

The workspace is a browser user interface that lets you access Replit tools.
The user interface consists of a dock that lets you quickly open tools and arrange them in
resizable content panes. For a list of tools, see the [Workspace Features](/category/workspace-features/)
documentation.

## Getting started

To open a workspace, log into Replit and then perform either of the following:

* Select **Create App** and complete the dialog prompts to start a new Replit App.
* Select **Apps** and open one of your Replit Apps.

From the workspace, access the complete list of tools by performing either of the following:

* Select <img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/shared/workspace-all-tools-button.svg" alt="All tools icon" /> **All tools** in the dock on the left.
* Select the <img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/shared/workspace-search-icon.svg" alt="magnifying glass icon" /> magnifying glass at the top to open the search tool, then scroll to the "Tools" section.

To learn more about workspace customization and features, see [Introduction to the Workspace](replit-workspace/introduction-to-workspace/).

### Key features

The workspace offers the following powerful development features:

* Configurable, intuitive layout for viewing tools side by side or in your [preferred arrangement](/replit-workspace/workspace-features/preferences/)
* Web app preview and interaction through the [**Webview**](/replit-workspace/workspace-features/webview/) tool
* Application log monitoring in the [**Console**](/replit-workspace/workspace-features/console-shell/) tool
* Centralized management of your app's API keys and credentials in the [**Secrets**](/replit-workspace/workspace-features/secrets/) tool
* Customizable **Run** button actions in the [**Workflow**](/replit-workspace/workflows/) tool
* Real-time [collaboration](/replit-workspace/workspace-features/multiplayer/) with teammates over the network
* Seamless [deployment](/category/replit-deployments/) to cloud services and database integration
* AI-powered tools, [Agent](/replitai/agent/) and [Assistant](/replitai/assistant/), for project setup, feature development, and debugging.

## Use cases

The following examples showcase how the workspace can accelerate your app development process.

### Create a full-stack app

Build and deploy complete applications with front-end, back-end, and database components using
AI-powered tools.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/workspace/workspace_use_case_fullstack.jpg" alt="image displaying a full-stack Replit App" />
</Frame>

### Create and share a Template

Publish an app and share it with others as a Template which serves as a foundation for building their
own variations and enhancements.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/workspace/workspace_use_case_share.png" alt="image displaying the Replit App sharing function in the info dialog" />
</Frame>

## Next steps

To learn more about the workspace, see the following resources:

* Learn how to navigate and setup the workspace in [Introduction to the Workspace](replit-workspace/introduction-to-workspace/)
* Explore the workspace tools in the [Workspace Features](/category/workspace-features) sections
* Learn more about the desktop app in [Replit Desktop App](/platforms/desktop-app)
* Learn more about the mobile app in [Replit Mobile App](/platforms/mobile-app)


# Storage and Databases
Source: https://docs.replit.com/category/storage-and-databases

Learn about storage and database options on Replit, including object storage, a SQL database, and the Replit Key-Value Store.

<CardGroup cols={2}>
  <Card title="Object Storage" href="/category/object-storage" icon="database" horizontal>
    3 items
  </Card>

  <Card title="SQL Database (PostgreSQL)" href="/cloud-services/storage-and-databases/sql-database" icon="server" horizontal>
    What is the Database tool?
  </Card>

  <Card title="Replit Key-Value Store" href="/cloud-services/storage-and-databases/replit-database" icon="key" horizontal>
    What is the Replit Key-Value Store?
  </Card>
</CardGroup>


# Replit Teams
Source: https://docs.replit.com/category/teams

Build and ship software faster with your team using Replit's collaborative development platform.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/teams/teams.avif" alt="Replit Teams collaboration interface" />
</Frame>

Replit Teams enables organizations to build, share, and ship software faster with powerful collaboration features and enterprise-ready tools. Whether you're building internal tools, rapid prototypes, or production applications, Teams provides everything you need in one unified platform.

## Enterprise-Grade Platform

Our enterprise offering provides the security, control, and support that organizations need:

<CardGroup cols={2}>
  <Card title="Enterprise Security" icon="shield-check">
    SOC-2 compliant platform with SAML SSO, role-based access control, and advanced security features.
  </Card>

  <Card title="Centralized Management" icon="building">
    Manage teams, billing, and resources from a central dashboard. Monitor usage and control costs effectively.
  </Card>
</CardGroup>

* **Dedicated Support**: Priority access to technical assistance and account management
* **Custom Solutions**: Flexible deployment options and enterprise-specific integrations
* **Usage Analytics**: Track resource utilization and optimize team performance
* **Compliance & Security**: Advanced security features and compliance reporting

## Development & Collaboration

At its core, Teams is built for seamless collaboration and efficient development:

* **Real-time Collaboration**: Work together in shared environments with multiplayer editing and live chat
* **Zero Setup Time**: Pre-configured environments that work instantly for your entire team
* **Built-in Version Control**: Native Git integration with conflict resolution and branch management
* **AI-Powered Development**: Accelerate development with AI assistance for code completion and debugging

<Note>
  Teams workspaces support real-time collaboration with up to 50 concurrent users, making them perfect for pair programming, code reviews, and team debugging sessions.
</Note>

## Community Features

<CardGroup cols={2}>
  <Card title="Core Sponsorships" href="/teams/replit-core-sponsorships" icon="heart">
    Support open-source projects and engage with the Replit community through sponsorships.
  </Card>

  <Card title="Public Profiles" href="/teams/public_profiles" icon="user-group">
    Showcase your team's work and attract talent with public organization profiles.
  </Card>
</CardGroup>

## Getting Started

<Steps>
  1. **Create Your Organization**
     * Set up your team on Replit
     * Choose your subscription plan
     * Configure organization settings
  2. **Invite Team Members**
     * Add developers and stakeholders
     * Set up roles and permissions
     * Configure SSO (Enterprise)
  3. **Start Building**
     * Create your first project
     * Set up collaboration workflows
     * Deploy your applications
</Steps>

## Essential Resources

Learn more about Teams with our comprehensive documentation:

<CardGroup cols={2}>
  <Card title="Identity & Access" href="/teams/identity-and-access-management/" icon="lock">
    Comprehensive guide to user management, permissions, and SSO integration
  </Card>

  <Card title="Security & Compliance" href="/teams/information-security/overview" icon="shield">
    Detailed information about our security features and compliance standards
  </Card>
</CardGroup>

Additional documentation:

* [Project Management Guide](/teams/projects/overview)
* [Teams Billing Information](/billing/teams-billing/overview)
* [Collaboration Tools](/teams/collaboration-on-replit)

## Use Cases

Teams supports diverse organizational needs across different scales:

* **Enterprise Applications**: Build and deploy mission-critical applications with enterprise-grade security and scaling
* **Internal Tooling**: Develop and maintain internal tools with seamless access management
* **Rapid Prototyping**: Accelerate innovation with instant development environments
* **Open Source**: Collaborate on open-source projects and manage community contributions
* **Education**: Create learning environments and manage educational resources

<Note>
  Ready to transform your team's development workflow? [Contact our sales team](https://replit.com/teams) for a personalized demo and enterprise pricing information.
</Note>


# Themes
Source: https://docs.replit.com/category/themes

Learn how to create, manage, and customize themes in Replit. Change colors, syntax highlighting, and UI elements to make your coding environment your own.

<CardGroup cols={2}>
  <Card title="Creating your first theme" href="/replit-workspace/themes/first-theme" icon="brush" horizontal>
    With Custom Themes, you can make Replit truly yours by customizing much of the UI from background and foreground colors to syntax highlighting. Let's dive into creating your first theme!
  </Card>

  <Card title="Managing installed themes" href="/replit-workspace/themes/switching-managing-themes" icon="bars" horizontal>
    All of your installed themes can be managed from your account under the Themes section.
  </Card>

  <Card title="Syntax Highlighting" href="/replit-workspace/themes/syntax-highlighting" icon="highlighter" horizontal>
    Syntax highlighting lets you color specific tokens in your code. Customize it to your liking with Custom Themes!
  </Card>

  <Card title="Theme Design" href="/replit-workspace/themes/theme-design" icon="palette" horizontal>
    Enhance your themes with details like contrast, color palette, and visibility. Let's go over how to perfect your favorite themes.
  </Card>

  <Card title="Themes Explore Page" href="/replit-workspace/themes/explore" icon="compass" horizontal>
    Browse and preview Custom Themes created by the community. Publish your own theme to share a unique palette with others!
  </Card>

  <Card title="Port from VSCode" href="/replit-workspace/themes/port-from-vscode" icon="code" horizontal>
    Port your favorite theme from VS Code to Replit with ease! A few clicks are all it takes to select your colors and create your theme.
  </Card>
</CardGroup>


# Using Git on Replit
Source: https://docs.replit.com/category/using-git-on-replit

Learn how to connect Replit with GitHub, import repositories, use Git commands, and manage version control in your Replit workspace.

<CardGroup cols={2}>
  <Card title="Connecting Replit to GitHub" href="/replit-workspace/using-git-on-replit/connect-github-to-replit" icon="link" horizontal>
    To import and edit GitHub repositories on Replit, first connect your Replit account to GitHub.
  </Card>

  <Card title="Import your first Repository" href="/replit-workspace/using-git-on-replit/import-repository" icon="download" horizontal>
    Now that you've linked your GitHub account to Replit, it's time to import some code from GitHub!
  </Card>

  <Card title="Private & Personal Repositories" href="/replit-workspace/using-git-on-replit/private-repo" icon="lock" horizontal>
    Once you've imported a GitHub repository, you will need to grant Replit permission so you can make changes tracked by your remote repository.
  </Card>

  <Card title="Using the Git Pane" href="/replit-workspace/using-git-on-replit/use-gui" icon="git" horizontal>
    The Git pane serves as a powerful tool for effortless code tracking, management, branch navigation, and collaborative work within your workspace.
  </Card>

  <Card title="Using Git with the Shell" href="/replit-workspace/using-git-on-replit/git-shell" icon="terminal" horizontal>
    Cloning an existing repository from the shell.
  </Card>

  <Card title="Running GitHub repositories on Replit" href="/replit-workspace/using-git-on-replit/running-github-repositories-replit" icon="play" horizontal>
    GitHub repositories can be run automatically on Replit. Head to [https://replit.com/github](https://replit.com/github) to import a repository. Unlock private repositories after authenticating with GitHub and purchasing the Replit Core membership.
  </Card>

  <Card title="Git workflows and commands" href="/replit-workspace/using-git-on-replit/git-commands" icon="git" horizontal>
    The most crucial features of Git to learn are the basic Git workflow and commands.
  </Card>

  <Card title="GitHub Authentication Errors in Replit" href="/replit-workspace/using-git-on-replit/github-auth-errors" icon="bomb" horizontal>
    While interacting with our Git-based Version Control tool in the Workspace and our GitHub integration, you may run into error messages.
  </Card>
</CardGroup>


# Workspace Features
Source: https://docs.replit.com/category/workspace-features

Explore key features of the Replit workspace including secrets management, file history, debugging, multiplayer coding, and resource monitoring tools.

<CardGroup cols={3}>
  <Card title="Secrets" icon="key" iconType="solid" href="/replit-workspace/workspace-features/secrets" horizontal>
    Learn how to add and manage secrets for safeguarding sensitive information in your Replit projects.
  </Card>

  <Card title="File History" icon="clock-rotate-left" iconType="solid" href="/replit-workspace/workspace-features/file-history" horizontal>
    Rewind back in time to recover lost edits with Replit's auto-save feature.
  </Card>

  <Card title="Inline Threads" icon="comments" iconType="solid" href="/replit-workspace/workspace-features/inline-threads" horizontal>
    Make comments and discuss topics with collaborators directly in your code.
  </Card>

  <Card title="Expandable Storage" icon="hard-drive" iconType="solid" href="/replit-workspace/workspace-features/expandable-storage" horizontal>
    Access account-wide storage for storing large amounts of data across your Replit Apps.
  </Card>

  <Card title="Multiplayer" icon="users" iconType="solid" href="/replit-workspace/workspace-features/multiplayer" horizontal>
    Code together in real-time with two or more users.
  </Card>

  <Card title="Replit App Resources" icon="gauge" iconType="solid" href="/replit-workspace/workspace-features/resources-panel" horizontal>
    Monitor current resource usage of your Replit App, including RAM, CPU, and Storage.
  </Card>

  <Card title="Preferences" icon="gear" iconType="solid" href="/replit-workspace/workspace-features/preferences" horizontal>
    Customize your coding experience through the Settings tool.
  </Card>

  <Card title="Console & Shell" icon="terminal" iconType="solid" href="/replit-workspace/workspace-features/console-shell" horizontal>
    Every Replit App comes with both a Console and a Shell.
  </Card>

  <Card title="The Webview" icon="laptop" iconType="solid" href="/replit-workspace/workspace-features/webview">
    The Webview is a specialized Tool for previewing and debugging your web application.
  </Card>
</CardGroup>


# April 2024 Updates
Source: https://docs.replit.com/changelog/2024-04-changelog

April 17, 2024 · 5 min read

<Card title="Ornella Altunyan" icon={<img src="https://pbs.twimg.com/profile_images/1534254902343479296/dno4w0QP_400x400.jpg" alt="Ornella Altunyan" />} href="https://replit.com/@ornella" horizontal>
  Developer Advocate
</Card>

**Welcome to the Replit Changelog.**

Last month, we released many new features and improvements designed to boost your productivity, collaboration, and coding experience on Replit. Some of the key highlights include:

*   **Replit Teams early access** - [Sign up for the waitlist today](https://replit.com/teams) to join the beta of Replit Teams.
*   **[Scheduled Deployments](https://docs.replit.com/cloud-services/deployments/scheduled-deployments)** - Schedule tasks without deep technical setup.
*   **[Advanced port configuration](https://docs.replit.com/replit-workspace/ports)** - Explicit port mappings, improved port management, and more.

**Explorers**: If you want to try new features as soon as they are available, turn on the Explorer role in your [Account Settings](https://replit.com/account#roles).

## Workspace

### Scheduled Deployments

Scheduled Deployments are now available in the **Deployments Pane**.

We’ve made it easier to schedule tasks without deep technical setup. Simply tell Replit when to run your application using natural language, such as "Run this script every Tuesday and Thursday at 3:00 PM." We’ll handle the conversion into the necessary cron expressions. You can use Scheduled Deployments to automate Slack analytics reports, periodic data cleanups, routine system health checks, and more. Currently, Scheduled Deployments support a configuration of 1vCPU and 2 GiB RAM and allow up to 11 hours for the longest job, with no concurrency limits on the jobs scheduled.

With Scheduled Deployments, you can more efficiently automate and manage applications that need to be redeployed at specific, granular intervals. To read more and learn about pricing, check out the full [blog post](https://blog.replit.com/scheduled-deployments).

### Replit Teams early access

We’re reinventing how software is developed collaboratively and with AI, so that every part of your team can have the tools to build and ship something great.

<Frame>
  <img src="https://docimg.replit.com/images/changelog/2024-04-17/teams-image.png" />
</Frame>

The [waitlist](https://replit.com/teams) is now open for early access to the Replit Teams beta. Here’s what you can expect from Replit Teams:

*   **Organizational intelligence**: Unleash AI-powered code completion, chat, and retrieval-augmented generation (RAG) across your team.
*   **Ultra-fast workspaces**: Access 8vCPUs and 16GB RAM machines, ensuring a smooth workspace experience for your whole team.
*   **Shared deployments**: Deployments that can be managed and redeployed by anyone on the team, streamlining your workflow.
*   **Living repos**: With a dynamic, collaborative dashboard, you can see who’s coding, get a top-level view of in-progress work, and effortlessly dive back into tasks.
*   **Replit-native collaboration**: Speed up code reviews and merges with tools designed for efficient teamwork.
*   **Role-based access control (RBAC)**: Keep your projects secure with access controls that allow you to easily manage team roles and permissions.
*   **Centralized billing**: Simplify your team’s operations with a straightforward billing system for deployments, compute resources, and more, all in one place.

Read more on [our blog](https://blog.replit.com/teams-beta), and [join the waitlist](https://replit.com/teams) today.

### Advanced port configuration

New port configuration features make it easier to work on complex or multiple services within a single project:

*   **Explicit port mappings**: Ports consistently retain their mapping once they are opened. This change is reflected in the `.replit` configuration file, which also stores other project settings. This simplifies the setup for projects that involve running multiple services.
*   **Improved port visibility and management**: You’ll get a notification in the Shell or Console whenever a port is opened. There are options to view, configure, or stop exposing the port, which improves control over which ports are accessible.

<Frame>
  <img src="https://docimg.replit.com/images/changelog/2024-03-14/ports-networking.png" />
</Frame>

*   **Localhost port handling**: To support developers who utilize localhost, there is now a popup notification that allows you to expose localhost ports if you choose.
*   **Webview port switching**: The Webview now allows you to switch between active ports easily, facilitating the testing and use of applications that listen on multiple ports simultaneously.

<Frame>
  <img src="https://docimg.replit.com/images/changelog/2024-03-14/webview-ports.png" />
</Frame>

Read more about ports and the new features on [the blog](https://blog.replit.com/ports).

## Mobile

The latest release of the [Replit Mobile App](https://docs.replit.com/replit-workspace/replit-mobile-app) contains new features and improvements, including:

*   Persistent Workspace layout that automatically restores where you left off
*   Shortcuts to recent Deployments are shown on the **My Repls** page
*   Bug fixes and more

Download the latest version of the Replit Mobile App in the [App Store or Google Play Store](https://replit.com/mobile).

## Developer experience

### Nix packages saved[​](/updates#nix-packages-saved "Direct link to Nix packages saved")

You can now build your Nix environment once and enjoy it always (even across forks). If you ever added a package to `replit.nix` and noticed that your Repl spent a long time Building Nix Environment on startup, this will now start instantly (after one last build).

Whatever you build with Nix counts against your storage quota. Check how much disk space Nix packages are using in the **Storage** details of the **Resources** menu. If you select the trash can, you can clear all storage used by Nix packages. We still maintain a very large cache of Nix packages, and using any of these prebuilt packages does not count against your storage quota.

<Frame>
  <img src="https://docimg.replit.com/images/changelog/2024-04-17/nix-packages-saved.png" />
</Frame>

## Documentation

The following docs have been updated for clarity and to accompany new features:

*   [Replit FAQ](https://docs.replit.com/faq/)
*   [Quickstart Guides](https://docs.replit.com/getting-started/Quickstarts/Python/deploy-flask-app)
*   [Workspace docs](https://docs.replit.com/category/replit-workspace) with [Additional Resources](https://docs.replit.com/category/additional-resources)
*   [Scheduled Deployments](https://docs.replit.com/cloud-services/deployments/scheduled-deployments)
*   [Static Deployments](https://docs.replit.com/cloud-services/deployments/static-deployments)
*   [SSH](https://docs.replit.com/replit-workspace/ssh)

## Social highlights

### Developer Day

On April 2, we hosted our second annual Replit Developer Day. If you missed the livestream, watch it on demand and catch up on the highlights on [our blog](https://blog.replit.com/devday-recap).

### LLMs for Code Repair

At Developer Day, we also announced Code Repair, our state-of-the-art AI model and the world’s first low-latency code repair AI agent. Code Repair automates debugging 20 common diagnostics that account for 60% of [Language Server Protocol (LSP)](https://en.wikipedia.org/wiki/Language_Server_Protocol) errors. To learn more, read the [full blog post](https://blog.replit.com/code-repair).

## General updates

### Updates to our Terms of Service

As part of our website refresh, we have rewritten our Terms of Service to be more user-friendly. Please take a moment to review the updated [Terms of Service](https://replit.com/site/terms). By continuing to use Replit, you accept these updated Terms. If you have any questions, please contact us via the link at the bottom of the Terms of Service page. Thank you for being a part of the Replit community!


# May 2024 Updates
Source: https://docs.replit.com/changelog/2024-05-changelog

May 16, 2024 · **4 min read**

<Card title="Ornella Altunyan" icon={<img src="https://pbs.twimg.com/profile_images/1534254902343479296/dno4w0QP_400x400.jpg" alt="Ornella Altunyan" />} href="https://replit.com/@ornella" horizontal>
  Developer Advocate
</Card>

**Welcome to the Replit Changelog.**

Last month, we released many new features and improvements designed to boost your productivity, collaboration, and coding experience on Replit. Some of the key highlights include:

*   **[Object Storage](https://docs.replit.com/category/object-storage)** - Store and manage unstructured data right from the workspace.
*   **Improved Deployment logs** - Built-in search, error highlighting, 30-day persistence, and more.
*   **Merge conflict markers** - Resolve merge conflicts in the editor during merging and rebasing.
*   **Replit Mobile App updates** - New Recent Deployments section and tablet improvements.

**Explorers**: If you want to try new features as soon as they are available, turn on the Explorer role in your [Account Settings](https://replit.com/account#roles).

## Workspace

### Object Storage

Replit Object Storage allows you to store and manage unstructured data like media files, documents, and other content types efficiently. It's built to be resilient, handling simultaneous reads and writes, and scales seamlessly to accommodate growing application demands.

<Frame>
  <img src="https://docimg.replit.com/images/changelog/2024-05-16/object-storage-files.png" />
</Frame>

Here’s what you need to know:

*   **Minimal configuration**: It works right out of the box in the Replit Workspace and deployment environments.
*   **Versatile options**: Ideal for storing large volumes of unstructured data such as images, user-generated content like PDFs, and data files including CSV and JSON.
*   **Integration with existing tools**: We provide libraries in Python and TypeScript to interact with Object Storage, making it accessible with minimal code.

Additionally, Object Storage is powered by Google Cloud Storage, ensuring high durability and performance. This means you’ll have automated scaling and a reduction in latency.

To integrate Object Storage into your project, navigate to the **Tools** menu, select **Object Storage** to open a new pane, and create a new bucket.

<Frame>
  <img src="https://docimg.replit.com/images/changelog/2024-05-16/object-storage-bucket.png" />
</Frame>

Write, read, and upload to GCP-backed Object Storage in only a few lines of code. For more details on how to use this feature, check out the [full blog post](https://blog.replit.com/object-storage) or the [documentation](https://docs.replit.com/category/object-storage).

### Improved Deployment logs

We’re launching an improved logs experience for Deployments. Logs now include:

*   Built-in search
*   Log & error highlighting
*   30-day persistence
*   More filters like date and log type
*   General performance enhancements (faster loads!)

<Frame>
  <img src="https://docimg.replit.com/images/changelog/2024-05-16/logs.png" />
</Frame>

### CPU & RAM monitoring for Deployments

We added CPU and RAM monitoring to Deployments. Now, you can easily get basic system information about your Deployment machine directly from your Replit Workspace.

<Frame>
  <img src="https://docimg.replit.com/images/changelog/2024-05-16/cpu_ram.png" />
</Frame>

### Merge conflict markers

Merge conflicts are now highlighted during merging and rebasing, so you can resolve them quickly, without leaving the editor.

<Frame>
  <img src="https://docimg.replit.com/images/changelog/2024-05-16/merge-conflicts.png" />
</Frame>

## Mobile

### Recent Deployments section

The Replit Mobile App now has a **Recent Deployments** section at the top of the My Repls screen, which makes it easier to access and monitor your recent projects.

### Tablet improvements

We’ve upgraded the Replit Mobile App experience for tablet users. When you connect a keyboard, you can now access the full Replit Workspace as you would in a browser on your computer, as compared to the mobile version.

Download the latest version of the Replit Mobile App in the [App Store or Google Play Store](https://replit.com/mobile).

## Developer experience

### `code path/to/file`

You can now use `code path/to/file` to create and open new files. Opening files with `code` or `xdg-open` no longer creates a new Pane group every time. This change also applies to git commit message editing.

### Programmatic access to dev URLs

Now, you can get the dev URL for your Repl programmatically using the environment variable `REPLIT_DEV_DOMAIN`.

## Documentation

The following docs have been updated for clarity and to accompany new features:

*   [Object Storage](https://docs.replit.com/category/object-storage)
*   [Configure a Repl](https://docs.replit.com/replit-workspace/configuring-repl)
*   [Account inactivity](https://docs.replit.com/legal-and-security-info/account-inactivity)


# Welcome to the Replit Changelog.
Source: https://docs.replit.com/changelog/updates



## May 2024 Updates

May 16, 2024 · **4 min read**

<Card title="Ornella Altunyan" icon={<img src="https://pbs.twimg.com/profile_images/1534254902343479296/dno4w0QP_400x400.jpg" alt="Ornella Altunyan" />} href="https://replit.com/@ornella" horizontal>
  Developer Advocate
</Card>

Last month, we released many new features and improvements designed to boost your productivity, collaboration, and coding experience on Replit. Some of the key highlights include:

*   **[Object Storage](https://docs.replit.com/category/object-storage)** - Store and manage unstructured data right from the workspace.
*   **Improved Deployment logs** - Built-in search, error highlighting, 30-day persistence, and more.
*   **Merge conflict markers** - Resolve merge conflicts in the editor during merging and rebasing.
*   **Replit Mobile App updates** - New Recent Deployments section and tablet improvements.

**Explorers**: If you want to try new features as soon as they are available, turn on the Explorer role in your [Account Settings](https://replit.com/account#roles).

## Workspace

### Object Storage

Replit Object Storage allows you to store and manage unstructured data like media files, documents, and other content types efficiently. It's built to be resilient, handling simultaneous reads and writes, and scales seamlessly to accommodate growing application demands.

<Frame>
  <img src="https://docimg.replit.com/images/changelog/2024-05-16/object-storage-files.png" />
</Frame>

Here’s what you need to know:

*   **Minimal configuration**: It works right out of the box in the Replit Workspace and deployment environments.
*   **Versatile options**: Ideal for storing large volumes of unstructured data such as images, user-generated content like PDFs, and data files including CSV and JSON.
*   **Integration with existing tools**: We provide libraries in Python and TypeScript to interact with Object Storage, making it accessible with minimal code.

Additionally, Object Storage is powered by Google Cloud Storage, ensuring high durability and performance. This means you’ll have automated scaling and a reduction in latency.

To integrate Object Storage into your project, navigate to the **Tools** menu, select **Object Storage** to open a new pane, and create a new bucket.

<Frame>
  <img src="https://docimg.replit.com/images/changelog/2024-05-16/object-storage-bucket.png" />
</Frame>

Write, read, and upload to GCP-backed Object Storage in only a few lines of code. For more details on how to use this feature, check out the [full blog post](https://blog.replit.com/object-storage) or the [documentation](https://docs.replit.com/category/object-storage).

### Improved Deployment logs

We’re launching an improved logs experience for Deployments. Logs now include:

*   Built-in search
*   Log & error highlighting
*   30-day persistence
*   More filters like date and log type
*   General performance enhancements (faster loads!)

<Frame>
  <img src="https://docimg.replit.com/images/changelog/2024-05-16/logs.png" />
</Frame>

### CPU & RAM monitoring for Deployments

We added CPU and RAM monitoring to Deployments. Now, you can easily get basic system information about your Deployment machine directly from your Replit Workspace.

<Frame>
  <img src="https://docimg.replit.com/images/changelog/2024-05-16/cpu_ram.png" />
</Frame>

### Merge conflict markers

Merge conflicts are now highlighted during merging and rebasing, so you can resolve them quickly, without leaving the editor.

<Frame>
  <img src="https://docimg.replit.com/images/changelog/2024-05-16/merge-conflicts.png" />
</Frame>

## Mobile

### Recent Deployments section

The Replit Mobile App now has a **Recent Deployments** section at the top of the My Repls screen, which makes it easier to access and monitor your recent projects.

### Tablet improvements

We’ve upgraded the Replit Mobile App experience for tablet users. When you connect a keyboard, you can now access the full Replit Workspace as you would in a browser on your computer, as compared to the mobile version.

Download the latest version of the Replit Mobile App in the [App Store or Google Play Store](https://replit.com/mobile).

## Developer experience

### `code path/to/file`

You can now use `code path/to/file` to create and open new files. Opening files with `code` or `xdg-open` no longer creates a new Pane group every time. This change also applies to git commit message editing.

### Programmatic access to dev URLs

Now, you can get the dev URL for your Repl programmatically using the environment variable `REPLIT_DEV_DOMAIN`.

## Documentation

The following docs have been updated for clarity and to accompany new features:

*   [Object Storage](https://docs.replit.com/category/object-storage)
*   [Configure a Repl](https://docs.replit.com/replit-workspace/configuring-repl)
*   [Account inactivity](https://docs.replit.com/legal-and-security-info/account-inactivity)

## April 2024 Updates

April 17, 2024 · **5 min read**

<Card title="Ornella Altunyan" icon={<img src="https://pbs.twimg.com/profile_images/1534254902343479296/dno4w0QP_400x400.jpg" alt="Ornella Altunyan" />} href="https://replit.com/@ornella" horizontal>
  Developer Advocate
</Card>

**Welcome to the Replit Changelog.**

Last month, we released many new features and improvements designed to boost your productivity, collaboration, and coding experience on Replit. Some of the key highlights include:

*   **Replit Teams early access** - [Sign up for the waitlist today](https://replit.com/teams) to join the beta of Replit Teams.
*   **[Scheduled Deployments](https://docs.replit.com/cloud-services/deployments/scheduled-deployments)** - Schedule tasks without deep technical setup.
*   **[Advanced port configuration](https://docs.replit.com/replit-workspace/ports)** - Explicit port mappings, improved port management, and more.

**Explorers**: If you want to try new features as soon as they are available, turn on the Explorer role in your [Account Settings](https://replit.com/account#roles).

## Workspace

### Scheduled Deployments

Scheduled Deployments are now available in the **Deployments Pane**.

We’ve made it easier to schedule tasks without deep technical setup. Simply tell Replit when to run your application using natural language, such as "Run this script every Tuesday and Thursday at 3:00 PM." We’ll handle the conversion into the necessary cron expressions. You can use Scheduled Deployments to automate Slack analytics reports, periodic data cleanups, routine system health checks, and more. Currently, Scheduled Deployments support a configuration of 1vCPU and 2 GiB RAM and allow up to 11 hours for the longest job, with no concurrency limits on the jobs scheduled.

With Scheduled Deployments, you can more efficiently automate and manage applications that need to be redeployed at specific, granular intervals. To read more and learn about pricing, check out the full [blog post](https://blog.replit.com/scheduled-deployments).

### Replit Teams early access

We’re reinventing how software is developed collaboratively and with AI, so that every part of your team can have the tools to build and ship something great.

<Frame>
  <img src="https://docimg.replit.com/images/changelog/2024-04-17/teams-image.png" />
</Frame>

The [waitlist](https://replit.com/teams) is now open for early access to the Replit Teams beta. Here’s what you can expect from Replit Teams:

*   **Organizational intelligence**: Unleash AI-powered code completion, chat, and retrieval-augmented generation (RAG) across your team.
*   **Ultra-fast workspaces**: Access 8vCPUs and 16GB RAM machines, ensuring a smooth workspace experience for your whole team.
*   **Shared deployments**: Deployments that can be managed and redeployed by anyone on the team, streamlining your workflow.
*   **Living repos**: With a dynamic, collaborative dashboard, you can see who’s coding, get a top-level view of in-progress work, and effortlessly dive back into tasks.
*   **Replit-native collaboration**: Speed up code reviews and merges with tools designed for efficient teamwork.
*   **Role-based access control (RBAC)**: Keep your projects secure with access controls that allow you to easily manage team roles and permissions.
*   **Centralized billing**: Simplify your team’s operations with a straightforward billing system for deployments, compute resources, and more, all in one place.

Read more on [our blog](https://blog.replit.com/teams-beta), and [join the waitlist](https://replit.com/teams) today.

### Advanced port configuration

New port configuration features make it easier to work on complex or multiple services within a single project:

*   **Explicit port mappings**: Ports consistently retain their mapping once they are opened. This change is reflected in the `.replit` configuration file, which also stores other project settings. This simplifies the setup for projects that involve running multiple services.
*   **Improved port visibility and management**: You’ll get a notification in the Shell or Console whenever a port is opened. There are options to view, configure, or stop exposing the port, which improves control over which ports are accessible.

<Frame>
  <img src="https://docimg.replit.com/images/changelog/2024-03-14/ports-networking.png" />
</Frame>

*   **Localhost port handling**: To support developers who utilize localhost, there is now a popup notification that allows you to expose localhost ports if you choose.
*   **Webview port switching**: The Webview now allows you to switch between active ports easily, facilitating the testing and use of applications that listen on multiple ports simultaneously.

<Frame>
  <img src="https://docimg.replit.com/images/changelog/2024-03-14/webview-ports.png" />
</Frame>

Read more about ports and the new features on [the blog](https://blog.replit.com/ports).

## Mobile

The latest release of the [Replit Mobile App](https://docs.replit.com/replit-workspace/replit-mobile-app) contains new features and improvements, including:

*   Persistent Workspace layout that automatically restores where you left off
*   Shortcuts to recent Deployments are shown on the **My Repls** page
*   Bug fixes and more

Download the latest version of the Replit Mobile App in the [App Store or Google Play Store](https://replit.com/mobile).

## Developer experience

### Nix packages saved[​](/updates#nix-packages-saved "Direct link to Nix packages saved")

You can now build your Nix environment once and enjoy it always (even across forks). If you ever added a package to `replit.nix` and noticed that your Repl spent a long time Building Nix Environment on startup, this will now start instantly (after one last build).

Whatever you build with Nix counts against your storage quota. Check how much disk space Nix packages are using in the **Storage** details of the **Resources** menu. If you select the trash can, you can clear all storage used by Nix packages. We still maintain a very large cache of Nix packages, and using any of these prebuilt packages does not count against your storage quota.

<Frame>
  <img src="https://docimg.replit.com/images/changelog/2024-04-17/nix-packages-saved.png" />
</Frame>

## Documentation

The following docs have been updated for clarity and to accompany new features:

*   [Replit FAQ](https://docs.replit.com/faq/)
*   [Quickstart Guides](https://docs.replit.com/getting-started/Quickstarts/Python/deploy-flask-app)
*   [Workspace docs](https://docs.replit.com/category/replit-workspace) with [Additional Resources](https://docs.replit.com/category/additional-resources)
*   [Scheduled Deployments](https://docs.replit.com/cloud-services/deployments/scheduled-deployments)
*   [Static Deployments](https://docs.replit.com/cloud-services/deployments/static-deployments)
*   [SSH](https://docs.replit.com/replit-workspace/ssh)

## Social highlights

### Developer Day

On April 2, we hosted our second annual Replit Developer Day. If you missed the livestream, watch it on demand and catch up on the highlights on [our blog](https://blog.replit.com/devday-recap).

### LLMs for Code Repair

At Developer Day, we also announced Code Repair, our state-of-the-art AI model and the world’s first low-latency code repair AI agent. Code Repair automates debugging 20 common diagnostics that account for 60% of [Language Server Protocol (LSP)](https://en.wikipedia.org/wiki/Language_Server_Protocol) errors. To learn more, read the [full blog post](https://blog.replit.com/code-repair).

## General updates

### Updates to our Terms of Service

As part of our website refresh, we have rewritten our Terms of Service to be more user-friendly. Please take a moment to review the updated [Terms of Service](https://replit.com/site/terms). By continuing to use Replit, you accept these updated Terms. If you have any questions, please contact us via the link at the bottom of the Terms of Service page. Thank you for being a part of the Replit community!


# About Deployments
Source: https://docs.replit.com/cloud-services/deployments/about-deployments

Deployments are a way to release a snapshot of your Replit App, ensuring that changes made within the editor don't disrupt the production build. Customize run and build commands, and connect the Deployment to a `<app-name>.replit.app` or a custom domain.

export const CoreCredits = '$25';

Replit offers Deployments for all use cases:

* [Autoscale Deployments](/cloud-services/deployments/autoscale-deployments): scale down to save costs, and scale up to multiple instances to handle high traffic
* [Static Deployments](/cloud-services/deployments/static-deployments): fast static sites, free for subscribed users
* [Reserved VMs](/cloud-services/deployments/reserved-vm-deployments): a single VM for cost certainty and special use cases
* [Scheduled Deployments](/cloud-services/deployments/scheduled-deployments): a service that allows you to schedule your applications to run at predetermined time intervals seamlessly

Want to learn more about deployments? Struggling to choose the right type?

Here's a comprehensive overview:

<Frame>
  <iframe width="100%" height="400" src="https://www.youtube.com/embed/sXP5d0k1atk" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen />
</Frame>

## What is a Deployment?

A Deployment saves your Replit App's current state as a "snapshot" and runs it on a shared or dedicated machine. This allows you to share your Replit App with others or host a website or Discord bot with minimal downtime. Unlike publishing to the community, which doesn't host your Replit App under a domain and has a wake-up phase when accessed via the cover page, the other Deployment options offer different specs and capabilities for your Replit App in production.

## Why deploy?

Deployments are useful for a variety of reasons. For example, you can use them to:

* Host a website or Discord bot with minimal downtime
* Separate your development environment from your production environment
* Share a snapshot of your Replit App with others

## How to deploy?

Deployments are initiated from the Replit App editor. Select the **Deploy** button or open the **Deployments** tool to get started.

### Deployment environment variables

When deploying your applications on Replit, you can customize your Deployment behavior by using environment variables. These variables provide information about the Deployment environment, helping you adapt your application's behavior accordingly.

**REPLIT\_DEPLOYMENT**: This environment variable is set to `1` when your application is deployed on Replit. You can use this variable to determine whether your code is running in a deployed environment.

For example, in a Node.js application, you can check if your application is deployed using:

```javascript
if (process.env.REPLIT_DEPLOYMENT) {
  // Your code specific to the Deployment environment
}
```

## Which Deployment should I choose?

Replit offers three types of Deployments to serve different use cases. [Matt](https://x.com/mattppal) made a flow chart to help you choose the right one (click to open in new tab):

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/deployments/deploying-your-repl/choose-your-deployment.png" alt="Choosing an option" />
</Frame>

Still curious? Read on to learn more about each Deployment option.

### Autoscale Deployments

[Autoscale Deployments](/cloud-services/deployments/autoscale-deployments) is our most commonly recommended option. It offers both flexible machine sizing and horizontal scaling.

Autoscale can scale to as many instances as required. You're charged in proportion to traffic, and you can scale up horizontally to handle high load when needed.

It is our recommended choice for websites, web applications, APIs, or microservices.

Autoscale is the right choice if:

* Your application is a server using HTTP, HTTP/2, WebSockets, or gRPC to handle requests.
* You want to try multiple ideas without spending on applications that don't receive traffic.
* You want to be able to scale up quickly to handle large amounts of requests.
* You need our highest reliability (99.95% uptime).

Your app may not be suitable for Autoscale if:

* Your application runs background activities outside of request handling.
* Your application can't run multiple instances in parallel.
* Your application can't handle multiple requests in parallel.
* Restarts are disruptive to your application.

### Reserved VM Deployments

[Reserved VM Deployments](/cloud-services/deployments/reserved-vm-deployments) run exactly one copy of your application on a single VM. It offers flexible machine sizing with cost certainty.

It is our best choice for long-running or compute-intensive applications and jobs. If your application is not suitable for Autoscale, consider Reserved VMs instead.

Reserved VM is the right choice if:

* You want cost certainty.
* Your application is not a server.
* Your application does not tolerate being restarted easily.
* You require a long-running connection (e.g., bots).
* You run background activities outside of request handling.
* You require the host VM to always run (99.9% uptime).

### Static Deployments

[Static Deployments](/cloud-services/deployments/static-deployments) serve static content such as HTML, JavaScript, and CSS files. There is no server involved.

This is a cost-effective way to share simple websites such as portfolios, personal sites, or company landing pages. For more information, refer to the [billing section](/cloud-services/deployments/static-deployments) of the Static Deployments document.

### Scheduled Deployments

[Scheduled Deployments](/cloud-services/deployments/scheduled-deployments) helps you schedule your app to run at specific times effortlessly. You can easily specify execution times using natural language, eliminating the need for complex setup procedures. As a Replit Core member, you receive {CoreCredits} per month in credits to offset expenses, enhancing your accessibility. The specifications include a 1vCPU/2 GiB RAM configuration, an 11-hour timeout duration, and no concurrency limits.

### Persistent storage

Please note that Autoscale, Static, and Reserved VM Deployments do not have persistent storage. Any data saved to the filesystem will not persist after redeploying.

We currently offer three persistent storage options for your applications: Object storage, a [SQL database](../storage-and-databases/sql-database), and [ReplDB (KV)](../storage-and-databases/replit-database).


# Autoscale Deployments
Source: https://docs.replit.com/cloud-services/deployments/autoscale-deployments

Autoscale can scale to as many instances as required. You're charged in proportion to traffic, and you can scale up horizontally to handle high load when needed.

It is our recommended choice for websites, web applications, APIs, or microservices.

## Autoscaling

### Why Autoscale?

Autoscaling helps with two scenarios:

* Scaling down to save you money when you don't have traffic
* Scaling up to multiple instances when you have high traffic and need more servers

If you only want to scale down as much as possible, set your max number of machines to 1 during Deployment configuration.

### How does scaling work?

Autoscale Deployments adds or removes instances under the following conditions:

* It will add instances as you exceed 80 concurrent requests per instance, up to your set maximum instances.
* It will remove instances as your traffic lowers, to fall beneath the 80 concurrent requests target.

Replit keeps one instance "warm" at all times. Subsequent scaling operations (scaling up beyond one instance) may occur on "cold" instances which will have a slower startup time.

* In order to keep an instance "warm", your application may be started up periodically to ensure it is ready to handle requests. Applications may be restarted at any moment.
* It's recommended that you keep application startup quick for best performance. Avoid doing expensive or long operations on startup. Use lazy loading to only initialize objects when they're needed.
* Minimize loading global variables and making global function calls to reduce the latency of scaling operations.
* Even when idle, there may be charges associated with restarts, specially if your application's startup is slow or consumes a lot of resources.

## Tips for effective Autoscale services

Because Autoscale is based on request handling to be cost effective and to support horizontal scaling, there are some requirements and tips to work well.

### Autoscale Requirements

Your application must meet the following requirements:

* It must listen for requests using HTTP, HTTP/2, WebSockets, or gRPCs.
* It can not perform background activities outside of request handling.
* It must be stateless, it cannot rely on persistent local state. Note that you may use *external* state, such as databases like a [SQL Database](/cloud-services/storage-and-databases/sql-database/).

### Autoscale Tips

If you are new to horizontally scaled applications, there are some tips you can follow to improve performance. The key constraints to remember are:

* Your application will start new copies frequently
* Your application will have multiple copies running at once
* State stored locally is an in-memory filesystem

Here are some tips to help you manage those constraints:

**Report errors instead of crashing**

Handle exceptions and do not let your application crash. Crashes will cause a new server to start, which slows your request processing. Instead, report errors using logging.

**Use dependencies wisely**

Dynamic languages with dependent libraries (eg NodeJS modules) add to startup latency, and will slow requests when a new instance is starting. Minimize your dependencies or utilize lazy loading if your language supports it.

**Lazily load global variables**

Global variables are initialized at startup, which will slow requests when a new instance is starting. Lazily initializing these variables will speed up initialization.

**Avoid expensive global functions**

Some languages allow functions to evaluated globally, which will occur during initialization. This will slow requests and may be expensive if those functions connect to external services such as a database. Keep in mind that due to warming, your application may startup in the background even when it doesn't receive requests.

**Use remote storage**

Since there are multiple copies of your application running, use an external data store that can handle multiple concurrent writers such as a [SQL Database](cloud-services/storage-and-databases/sql-database) or MongoDB.

**Delete temporary files**

Files your application writes locally will live in an in-memory filesystem. To free up memory for your application, use this sparingly and delete files after they are no longer needed.

## Billing

### What am I charged for?

Autoscale Deployments are billed based on your actual usage. You are billed for:

* CPU and RAM consumed during request processing (see below).
* Requests processed.
* Outbound transfer for bytes sent from your server.

Learn more about our pricing for these resources under [usage-based billing](/billing/about-usage-based-billing)

### How does CPU billing work?

CPU and RAM are charged together in an "execution unit", based on the sizing you choose. You are only charged for execution for the time when a request is being processed. Execution time is rounded to the nearest 100 milliseconds.

This means you are *not* charged for time your application is running, so long as no requests are actively being processed.

An open WebSocket is considered an active HTTP request. So execution time will be billed for any time where a WebSocket connection is open.

<Note>
  CPU is aggressively throttled outside of request processing. If your application is based on running background activities, instead consider a [Reserved VM Deployment](/cloud-services/deployments/reserved-vm-deployments).
</Note>

## How to use Autoscale Deployments

### Setting up your Replit App

Before using an Autoscale Deployment, you should verify that your Replit App is working. You can do so using the "Run" button at the top of the workspace.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/deployments/static/01-testing-app-runs.png" alt="running your Replit App" width="400" height="400" />
</Frame>

### Creating a Deployment

First, open up the Deployments tab. You can do this by clicking the "Deploy" button at the top right of the workspace or opening a new pane and typing "Deployments".

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/deployments/static/04-opening-deployments-tab.png" alt="opening the Deployments tab" width="400" height="400" />
</Frame>

In the Deployments tool, select the "Autoscale" Deployment type, then proceed using the "Set up your deployment" button.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/deployments/autoscale/03-autoscale-deployments-tab.png" alt="Deployments tab" width="400" height="400" />
</Frame>

### Configuring your Deployment

In the configuration menu, you can configure how your Autoscale Deployment behaves. You can configure the following:

* **Machine Power:** How much vCPU and RAM the machines in your Deployment will use (each)
* **Max instances:** The maximum number of machines that your Deployment will scale up to in high traffic

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/deployments/autoscale/04-autoscale-configuration.png" alt="autoscale configuration" width="400" height="400" />
</Frame>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/deployments/autoscale/05-machine-power-config.png" alt="configure machine power" width="400" height="400" />
</Frame>

### Host Configuration

HTTP requests will be sent to external port 80 of your Deployment. Your server must listen for traffic on 0.0.0.0, listening on localhost or 127.0.0.1 won't work. There are two ways to expose the port:

* Port Auto-Detection: If no ports have been configured in .replit, one will be detected automatically. The first opened port will be used; if your program uses multiple ports, consider using the approach below.
* Configure a port [in the .replit config](replit-app/configuration#replit-file): If ports have been configured in .replit, one must be configured with `externalPort = 80`.

### Starting your Deployment

After configuring your Deployment, click "Deploy" to start the Deployment process. Once the Deployment is complete, you can access details like the URL, build logs, and more. Learn more about managing your Deployment [here](/cloud-services/deployments/monitoring-a-deployment).


# Custom Domains with Deployments
Source: https://docs.replit.com/cloud-services/deployments/custom-domains

Learn how to add and configure custom domain names for your Replit deployments, including DNS setup, verification, and troubleshooting steps.

While every deployment comes with a unique URL at `https://<deployment-name>.replit.app`, you can also connect a custom domain to your deployment.
This allows you to use your own domain name instead of the default Replit domain. If you'd like to know more, you can watch the following video or follow along below.

<Frame>
  <iframe src="https://www.youtube.com/embed/rGYdyb58wJY" title="Custom Domains with Deployments" width="100%" height="400" />
</Frame>

## Connecting Your Domain To Your Deployment

First, open the Deployment you want to connect to your custom domain.

In the **Deployments** pane, under **Settings**, find the "Domains" section.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/deployments/custom-domains/01.png" alt="domains tab" />
</Frame>

Click the "Link a domain" button, and enter your domain name in the provided field (e.g., mydomain.com). Click "Next" to proceed.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/deployments/custom-domains/02.png" alt="domain linking panel" />
</Frame>

Replit will automatically generate the necessary DNS records for your domain:

* An A record pointing to your Replit App
* A TXT record to verify that you own the domain

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/deployments/custom-domains/03.png" alt="copy domain information" />
</Frame>

Here, we're adding a top-level domain, `hat-tip.cc`—a fork of [this Replit App](https://replit.com/@matt/hat-tip?v=1#README) that allows you to add hats to images with OpenCV.

## Adding DNS Records to your Domain Registrar

After copying these records, you will need to log in to your domain registrar (e.g., GoDaddy, Namecheap) and navigate to the DNS management section for your domain.

Add the DNS records (A record and TXT record) provided by Replit and save the changes in your domain registrar.

Please note that for top-level domains, the "hostname" field is commonly `@` as in the example below. If you wanted to add a subdomain, such as `my-subdomain.hat-tip.cc`, you would enter `my-subdomain` as the hostname.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/deployments/custom-domains/04.png" alt="adding a record" />
</Frame>

Enter @ for hostname and the IP address from your deployments settings panel.

<Note>
  If you would like to add both `www` and `@` records, you must add *two* A and TXT records, as well as link both domains to your deployment.
</Note>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/deployments/custom-domains/two-records-replit.webp" alt="Adding two records on Replit" />
</Frame>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/deployments/custom-domains/two-records-cloudflare.png" alt="Adding two records on Cloudflare" />
</Frame>

Once you complete these details, you'll need to wait for the DNS records to propagate.

## Waiting for DNS Propagation

The time to fully propagate DNS changes can range from a few minutes to about 24-48 hours. *Most* times it's just a few minutes. You can relax, sit back, and grab some coffee—your domain should be all set when you get back.

If things are taking a bit longer, we recommend using a tool such as [https://whatsmydns.net/](https://whatsmydns.net/) to keep track of the DNS propagation. All you need to do is input your custom domain and select the DNS record type you want to check.

In the screenshot below, you can see how quickly the A record propagated.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/deployments/custom-domains/new-a-propagation.webp" alt="TXT propagation" />
</Frame>

## We Have Liftoff!

Once your DNS records have been fully propagated, you can check back on the Domains tab for your Deployment, which should show that your domain has been verified:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/deployments/custom-domains/domain-verified.png" alt="custom domain is verified" />
</Frame>

If you don't see this, please check out [Troubleshooting](#troubleshooting).

## Troubleshooting

There are many reasons a domain may fail to link since the process involve multiple parties. Here are some known issues:

* Having multiple A records for the same domain name. Note that you can still add A records for subdomains such as `www`.
* Having AAAA records alongside the prescribed A record on a domain. Our system only supports A records.
* Using proxied records from Cloudflare since this makes it hard for us to automatically renew certificates.

If you're still having trouble please send a support ticket via [https://replit.com/support](https://replit.com/support) and **make sure to include a screenshot of your DNS records, the custom domain you want to link, and the link to your Replit App.**


# Deploying a GitHub repository
Source: https://docs.replit.com/cloud-services/deployments/deploying-a-github-repository

If you have a project hosted on GitHub that you want to deploy using Replit, the process is incredibly simple. Just follow these easy steps to import your repository, ensure its smooth operation, and deploy it to a public URL for hosting.

## Import a Replit App from GitHub

<Steps>
  <Step title="Create a new Replit App">
    Navigate to [https://replit.com/new](https://replit.com/new) or click the **+** button at the top right of the screen to create a new Replit App.

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/deployments/deploying-from-github/1-new-repl-button.png" alt="new Replit App button" width="80%" />
    </Frame>
  </Step>

  <Step title="Import from GitHub">
    Click the **Import from GitHub** button at the top right of the modal.

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/deployments/deploying-from-github/2-import-from-github-button.png" alt="import from github button" width="80%" />
    </Frame>
  </Step>

  <Step title="Enter repository details">
    Enter the URL or the name of the GitHub repository you want to import. You do not need to be the repository owner.

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/deployments/deploying-from-github/3-import-from-github-modal.png" alt="import from github modal" />
    </Frame>
  </Step>
</Steps>

## Configure the Replit App

<Steps>
  <Step title="Configure run command">
    After importing, configure the run command for the Replit App. This is usually auto-filled, but you can modify it to suit your project's requirements.

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/deployments/deploying-from-github/4-github-run-command.png" alt="github run command" />
    </Frame>
  </Step>

  <Step title="Run the Replit App">
    Click the **Run** button at the top right of the screen to ensure the Replit App can run.

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/deployments/deploying-from-github/5-run-button.png" alt="run button" />
    </Frame>
  </Step>

  <Step title="Wait for installation">
    The Replit App will install packages and execute the run command.

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/deployments/deploying-from-github/6-install-packages.png" alt="install packages" />
    </Frame>
  </Step>
</Steps>

### Modify the Run command

If you need to change the run command:

<Steps>
  <Step title="Access hidden files">
    Click the **Show hidden files** button at the top right of the file tree and open the `.replit` file.

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/deployments/deploying-from-github/8-show-hidden-files.png" alt="show hidden files" />
    </Frame>

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/deployments/deploying-from-github/9-dot-replit-file.png" alt="dot replit file" />
    </Frame>
  </Step>

  <Step title="Update run command">
    In the `.replit` file, change the `run` line to:

    ```bash
    run = "npm run <your run command>"
    ```

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/deployments/deploying-from-github/10-new-run-command.png" alt="new run command" />
    </Frame>
  </Step>

  <Step title="Test the changes">
    Rerun the Replit App to ensure it works as expected. Once confirmed, proceed to deploy the Replit App.

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/deployments/deploying-from-github/11-successful-run.png" alt="successful run" />
    </Frame>
  </Step>
</Steps>

## Deploying the Replit App

<Steps>
  <Step title="Initiate deployment">
    Click the **Release** button at the top right of the screen.

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/deployments/deploying-from-github/12-release-button.png" alt="release button" />
    </Frame>
  </Step>

  <Step title="Select deployment option">
    Select the **Deploy** option, allowing you to deploy the Replit App to a public `<app-name>.replit.app` URL (or a custom domain) for public hosting.
  </Step>

  <Step title="Choose deployment tier">
    Choose the Deployment tier you want to use. You can use the dropdown to select the perfect power for your Deployment machine. Learn more about the different Deployment tiers [here](https://replit.com/pricing).

    <Callout type="info">
      Dedicated machines provide full, unshared CPU power for consistent performance. In contrast, shared machines allocate CPU resources among multiple virtual machines, potentially leading to variable performance based on other users' activities.
    </Callout>
  </Step>

  <Step title="Review purchase summary">
    Next, you will see a summary of the purchase. This includes the cost of the tier and if auto-refill is enabled. Click the **Deploy your project** button to continue.

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/deployments/deploying-from-github/13.5-deployment-purchase.png" alt="deployment purchase" />
    </Frame>
  </Step>

  <Step title="Configure deployment settings">
    Enter the build command, run command, and any environment variables needed for production.

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/deployments/deploying-from-github/14-deployment-modal.png" alt="deployment modal" />
    </Frame>

    <Callout type="info">
      If "Health check before promoting" is selected, the system verifies that your Deployment opens a port before promoting it. You can deselect this option to bypass the health check for projects that don't require opening a port (e.g., Discord or Slack bots).
    </Callout>
  </Step>

  <Step title="Deploy your project">
    Once you have entered the required information, click the **Deploy** button to initiate the Deployment process.

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/deployments/deploying-from-github/15-deployment-building.png" alt="deployment building" />
    </Frame>

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/deployments/deploying-from-github/17-deployment-done.png" alt="deployment done" />
    </Frame>
  </Step>
</Steps>

## Monitoring a Deployment

We offer a few ways of interacting and monitoring your Deployments. You can view and change details such as custom domains, build logs, and build history. Find information on editing Deployment details [here](/cloud-services/deployments/monitoring-a-deployment).

## Troubleshooting

If you're having trouble with your Deployment or the Deployment fails, refer to [this page](../deployments/troubleshooting) for steps to mitigate issues with Deployments.


# Monitor Deployment
Source: https://docs.replit.com/cloud-services/deployments/monitoring-a-deployment

During the Deployment of your replit app, you have the ability to actively observe and assess various facets of the Deployment process. This comprehensive guide has been created to lead you through the essential features for effectively monitoring your Replit Deployment.

## Overview tab

The **Overview** tab offers crucial information that allows you to keep track of your Deployment's status and configuration. It provides the following details:

* **Status:** The current status of your Deployment, providing insights into the various stages of the Deployment process.
* **Domain:** The application link where your replit app is hosted, making it easy to access your deployed application.
* **Deployment Type:** A classification of your Deployment as either Static, reserved-vm, or autoscale, depending on your chosen Deployment method.

### Redeploy

Utilize the **Redeploy** option to initiate a new build of your project. You can continue to monitor the status of this build in the Overview tab.

### Edit Commands and Secrets

This option allows you to make adjustments to the public directory, build command, and add Deployment secrets for accessing APIs and services.

## Analytics tab

The **Analytics** tab offers valuable statistics regarding visits to your web Deployment. You can customize the timeline for the analytics you wish to view at the top of this tab. Here are the available graphs:

* **Page Views:** Displays the number of HTTP requests your Replit App receives per hour.
* **Top URLs:** Highlights the most frequently visited URL paths on your website.
* **Top Referrers:** Shows the sources from which your users access your website.
* **HTTP Statuses:** Provides information about the status of HTTP requests within a specified timeframe.
* **Request Durations:** Measures the time it takes for your pages to load server-side.
* **Top Browsers:** Identifies the most commonly used web browsers among your users.
* **Top Devices:** Offers insights into the distribution of operating systems and devices used by your audience.
* **Top Countries:** Presents a heatmap depicting the geographic distribution of your users.

## Settings tab

In the **Settings** tab, you can manage various configuration options for your Deployment:

* **Domains:** The default domain for your Deployment is set as `https://<project name>-<username>.replit.app`. You can also link a custom domain using the **Link a Domain** button.
* **Manage Deployment:** You have the flexibility to switch between different Deployment types. For example, if you initially chose Static Deployment, you can change it to reserved VM Deployments.
* **Shut Down:** Use the **Shut down** button to cancel your Deployment's billing cycle.

### Deploy on the Go

This feature streamlines the Deployment process for mobile users:

* **Install the Replit App:** You can deploy your Replit App directly from your mobile device by scanning the QR code using the **Install the Replit Mobile App** button.

With these monitoring and configuration options, you can effectively manage your Deployment on Replit to ensure a seamless and optimized experience.


# Private Deployments
Source: https://docs.replit.com/cloud-services/deployments/private-deployments

Replit's **Private Deployments** feature allows you to control who can access your deployment without any code configuration. By making a deployment private, you ensure that only users with correct permission levels can view or interact with your deployed application. This is particularly useful for projects requiring restricted access, such as internal tools, beta applications, or sensitive projects.

<Note>
  Private deployments are only available to Teams subscribers
</Note>

When you make a deployment private, visitors to your site will encounter a Replit login prompt. Only Replit users who are members of your Organization and logged in with their team credentials will be able to access the deployed site.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/deployments/private-deployments/private-deployments-login.png" alt="A Private Deployment's login page" width="400" />
</Frame>

## Enabling Private Deployments

When deploying your Replit App, you can choose between a **Public** or **Private** deployment. To make your deployment private, follow these steps:

1. **Navigate to the Deployment Settings**: When you're ready to deploy your Replit App, click on the **Deploy** button.
2. **Select Private Deployment**: In the deployment settings, you will see a toggle to choose the deployment visibility. Select **Private**. Note that Scheduled Jobs are not able to be private because they do not allow incoming traffic.
3. **Deploy Your Replit App**: Once you've set the desired permissions, proceed with the deployment. Only the users you specified will have access to view or interact with the deployed Replit App.

## Updating Private Deployments

To enable or disable Private Deployments for an existing deployment, click "Edit commands and secrets", toggle the setting on or off and redeploy.

## Managing Access

### Adding/Removing Users

After deploying your Replit App privately, you can manage access at any time. Users with Editor permissions (or greater) will be allowed to access the deployed application.

See [Teams Identity and Access Management](/teams/identity-and-access-management/) for more information on managing user permissions.

## Considerations

* **Website-Focused**: Private deployments are primarily intended for websites and web applications. While APIs can be deployed privately, the login requirement makes them less practical for typical API use cases.
* **Collaboration**: Users with access to the private deployment must be logged into their Replit accounts to view or interact with the Replit App.
* **Security**: Always review and manage your access list to ensure only authorized users have access to your deployment.


# Reserved VM Deployments
Source: https://docs.replit.com/cloud-services/deployments/reserved-vm-deployments

Reserved VM Deployments enable you to release a snapshot of your Replit App, ensuring that changes made within the editor don't disrupt the production build. Customize run and build commands, and connect the Deployment to a `<app-name>.replit.app` or a custom domain.

## Setting up a Deployment

Start by creating a Deployment. Click the "Deploy" button located in the top right corner of the workspace.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/deployments/deploying-your-repl/deploy_button.png" alt="release button" height="400" />
</Frame>

### Deploying a Replit App

After selecting **Deploy**, click on Reserved VM and you will be prompted to configure all of your settings. Here, you will select your machine size, your replit.app URL, secrets, and build/run commands.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/deployments/deploying-your-repl/config.png" alt="deployment info" height="400" />
</Frame>

Once you have entered the necessary information, click the "Deploy" button to start the Deployment process.

After the Deployment is complete, you can access details like the URL, build logs, and more. Learn more about editing Deployment information [here](/cloud-services/deployments/monitoring-a-deployment)

<Note>
  Viewing Deployment logs is very effective for debugging a failed Deployment or an issue with your project. You can learn more about logs [here](../deployments/troubleshooting#are-there-any-errors-in-your-application).
</Note>

### Web server or background worker?

You will also have the option to select between web server or background worker.

* Web server: your program starts a server and listens to network traffic on a port. Your app will be accessible from the internet.
* Background worker: your program does not listen on a port or start a server. It performs tasks in the background.

For web server VM Deployments, HTTP requests will be sent to external port 80 of your Deployment. Your server must listen for traffic on 0.0.0.0, listening on localhost or 127.0.0.1 won't work. There are two ways to expose the port:

* Port Auto-Detection: If no ports have been configured in .replit, one will be detected automatically. The first opened port will be used; if your program uses multiple ports, consider using the approach below.
* Configure a port [in the .replit config](/replit-app/configuration#replit-file): If ports have been configured in .replit, one must be configured with `externalPort = 80`.


# Scheduled Deployments
Source: https://docs.replit.com/cloud-services/deployments/scheduled-deployments

With Replit's scheduled Deployments, you can effortlessly configure and manage recurring tasks without the hassle of dealing with machine configurations. You'll have access to a user-friendly interface that simplifies setting up scheduled jobs, allowing you to focus on your tasks. This guide helps you understand scheduled Deployments and walks you through the steps to schedule your application Deployment.

export const ScheduledOutboundCost = '$0.10';

export const SchedulerMonthlyCost = '$0.10';

export const ScheduledDefaultCost = '$0.000028';

export const CoreCredits = '$25';

To access Scheduled Deployments in your Replit App workspace, select **+** in any window and search for **Deployments** or select the **Deploy** button in the header. You'll see **Scheduled** Deployments along with other Deployments.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/deployments/scheduled/scheduled-deployments.png" alt="Scheduled Deployments" />
</Frame>

## Specifications

* You can enter the **Schedule**, select the timezone from the dropdown, and see that the cron expression is automatically updated.
* If you enter the cron expression and select the timezone from the dropdown, the schedule will update automatically.
* Each Deployment includes a view of logs per job execution, allowing you to track the status and details of each execution.
* You are provided {CoreCredits} in monthly credits included in your Replit Core membership for scheduled job executions.
* Scheduled Deployments utilize a single machine type with a fixed timeout duration, simplifying the Deployment process.
* You can shut off or cancel scheduled jobs as needed.
* Currently, we have a default timeout set at 11 hours for scheduled Deployment executions, after which they will exit.
* Regarding concurrency, scheduled Deployment executions can run simultaneously without upper bounds or limits.
* Scheduled Deployments have a minimum granularity of 1 minute for execution. This means you cannot schedule a job to run more than 1 time per minute.

## Set up your Deployment

This section walks you through the steps to configure your scheduled job.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/deployments/scheduled/scheduled-job-configuration.png" alt="Scheduled job configuration" />
</Frame>

* **Examples:**
  * "Every Monday at 10 AM"
  * "March 24th, 2024 at 3 PM"
  * "Every day at 2 PM"
  * "Every weekday at 8 AM"
  * "Every Friday at 6 PM"
  * "Every 15th of the month at 7 AM"

### Cron expression

Cron expressions are strings that define a job's schedule, specifying times, dates, or patterns. They consist of five mandatory fields and one optional field, representing different time units.

* **Fields:**

  * Minute, Hour, Day, Month, Day of Week

* **Example Cron expressions:**
  * "At 9:30 a.m. on the 15th day of every month" - `30 9 15 * *`
  * "Once every 5 minutes" - `*/5 * * * *`
  * "Every day at midnight" - `0 0 * * *`
  * "At 8 PM every Sunday" - `0 20 * * 0`
  * "Every hour on weekdays" - `0 * * * 1-5`

### Timezone selection

Select your timezone from the dropdown menu to ensure that your scheduled Deployment runs at the right time for you.

### Build command

Include a build command to compile your app before running it. For example, you might use `npm run build` to compile your JavaScript project.

* **Examples:**
  * For a Node.js project: `npm install`
  * For a Python project: `pip install -r requirements.txt`
  * For a React app: `npm run build`

### Run command

Your project already has the default build command, but you can change it if necessary. The following are some examples of the run commands.

* **Examples:**
  * For a Node.js project: `node index.js`
  * For a Python project: `python app.py`
  * For a React app: `npm start`

### Deployment secrets

Deployment secrets allow you to add sensitive information your app needs for security. These secrets are encrypted and securely stored, ensuring your data remains protected. You can add secrets by providing a name and value for each secret. Your app can then access these secrets during Deployment, allowing you to securely store API keys, database passwords, or any other sensitive information your app requires. For more information, refer to the [Secrets](/replit-workspace/workspace-features/secrets) guide.

## Pricing details

Scheduled Deployments have three cost levers:

* **Per-second machine cost:** The primary cost involves the per-second utilization of the machine. The default machine costs {ScheduledDefaultCost}/sec. You are only billed when the job is actively running.
* **Scheduler cost:** The cost of the scheduler is {SchedulerMonthlyCost} per month, per Scheduled Deployment.
* **Outbound data transfer cost:** The outbound data transfer across all Replit products costs {ScheduledOutboundCost}/GiB.

If you are a Replit Core member, your membership comes with {CoreCredits} per month in monthly credits that can be applied towards Scheduled Deployments.
To learn more, visit our [pricing page](https://replit.com/pricing) about each plan's features.

Once you've set up your schedule, commands, and secrets, select **Deploy** to start your scheduled Deployment. To monitor your Deployment, refer to the [Monitoring a Deployment](../deployments/monitoring-a-deployment) page.


# Static Deployments
Source: https://docs.replit.com/cloud-services/deployments/static-deployments

Learn how to deploy static websites and frontend applications on Replit using Static Deployments, a cost-effective solution for sites without backend requirements.

export const NewInvoiceThreshold = '$50';

export const OldInvoiceThreshold = '$10';

export const StaticDeploymentOutboundPerGiB = '$0.10';

export const OrganizationBudgetIncrement = '$500';

export const CycleValue = '$0.01';

export const ScheduledOutboundCost = '$0.10';

export const SchedulerMonthlyCost = '$0.10';

export const ScheduledDefaultCost = '$0.000028';

export const DedicatedLargeVm = '$160.00';

export const DedicatedLargeVmOld = '$204.80';

export const DedicatedMediumVm = '$80.00';

export const DedicatedMediumVmOld = '$102.40';

export const DedicatedSmallVm = '$40.00';

export const DedicatedSmallVmOld = '$51.20';

export const SharedLargeVm = 'Deprecated';

export const SharedLargeVmOld = '$25.60';

export const SharedMediumVm = '$20.00';

export const SharedMediumVmOld = '$12.80';

export const SharedSmallVm = '$10.00';

export const SharedSmallVmOld = '$6.40';

export const ScheduledDeployment = '$1.00';

export const SchedulerPrice = '$0.00';

export const SchedulerPriceOld = '$0.10';

export const ScheduledComputeUnit = '$0.00000320';

export const ScheduledComputeUnitOld = '$0.00000125';

export const AutoscaleDeployment = '$1.00';

export const AutoscaleRequests = '$0.00000120';

export const AutoscaleRequestsOld = '$0.00000040';

export const AutoscaleComputeUnit = '$0.00000320';

export const AutoscaleComputeUnitOld = '$0.00000125';

export const AutoscaleBaseFee = '$1';

export const AssistantCheckpointCost = '$0.05';

export const AgentCheckpointCost = '$0.25';

export const TeamsCredits = '$40';

export const CoreCredits = '$25';

export const OldCoreCredits = '$10';

export const NewUserFreeAdvancedAssistantRequests = '20';

export const NewUserFreeAgentCheckpoints = '10';

export const AssistantEditRequestPrice = '$0.05';

Static Deployments allow you to deploy static websites and frontend applications on Replit. If you don't need a backend server or can statically build your website using your frontend framework, Static Deployments allow you to deploy your website in a cost-effective manner versus deploying a [Reserved VM](/cloud-services/deployments/reserved-vm-deployments) or an [Autoscale Deployment](/cloud-services/deployments/autoscale-deployments).

## Setting up your Replit App

Before using a Static Deployment, you should verify that your Replit App is working. You can do so using the "Run" button at the top of the workspace.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/deployments/static/01-testing-app-runs.png" alt="running your Replit App" />
</Frame>

Next, ensure that your Replit App can build your website into static files and take note of the directory. For example, if you are using **Vite**, you can run `npm run build` or `npx vite build` in the workspace's shell tool to initiate the build process. Once that is complete, you should see a `dist` directory in your Replit App's file tree (or whichever output directory your framework uses).

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/deployments/static/02-npm-run-build.png" alt="npm run build" height="400" />
</Frame>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/deployments/static/03-dist-directory.png" alt="dist directory" height="400" />
</Frame>

## Creating a Deployment

First, open up the Deployments tab. You can do this by clicking the "Deploy" button at the top right of the workspace or opening a new pane and typing "Deployments".

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/deployments/static/04-opening-deployments-tab.png" alt="opening the Deployments tab" height="400" />
</Frame>

In the Deployments tool, select the "Static" Deployment type, then proceed using the "Set up your deployment" button.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/deployments/static/05-deployments-tab.png" alt="Deployments tab" height="400" />
</Frame>

## Configuring your Deployment

Configure the build command and public directory that you noted earlier. The build command is run when your Deployment is created, and the public directory is the directory to which your static files are built.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/deployments/static/06-preparing-the-deploynent.png" alt="configuring your Deployment" height="400" />
</Frame>

<Note>
  If you want to host all files within your Replit App, use `./` as the public directory.
</Note>

### Index and 'Not Found' pages

Your Static Deployment's home page will be read from the `index.html` file in the public directory. You can also provide a custom 'Not Found' page by adding a `404.html` file in the public directory. This will set the page that's served when a route that doesn't exist is requested.

### Custom response headers

You can make additions to the response headers that Replit returns to clients of your Static Deployment by adding a configuration to your Replit App's `.replit` file.

To specify a custom response header, add a section like the following:

```
[[deployment.responseHeaders]]
path = "/*"
name = "Access-Control-Allow-Origin"
value = "*"
```

* `path`: A pattern for matching a URL path.
  The given response header will only be added to requests matching this pattern.
* `name`: The name of the header
* `value`: The value of the header

To add multiple response headers, you can add the above section multiple times:

```
[[deployment.responseHeaders]]
...

[[deployment.responseHeaders]]
...
```

#### Path matching

* Matches must be exact unless a `*` is present
* `*` will match with the remainder of the path
* `*` may only be placed at the end of the path

#### Reserved headers

Several headers are reserved for use by Replit and may not be configured: `Accept-Ranges`, `Age`, `Allow`, `Alt-Svc`, `Connection`, `Content-Encoding`, `Content-Length`, `Content-Range`, `Date`, `Location`, `Server`, `Set-Cookie`, `Trailer`, `Transfer-Encoding`, `Upgrade`.

### Rewrites

You can customize the file served on a path by adding rewrites to your Replit App's `.replit` file. This means that the URL a client sees will remain the same, but the request will be internally redirected.

To specify a rewrite, add a section like the following:

```
[[deployment.rewrites]]
from = "/*"
to = "index.html"
```

* `from`: A pattern for matching a URL path.
  The rewrite will only be added to requests matching this pattern.
* `to`: The rewritten path. This should correspond to a file in your static Deployment.

To add multiple response headers, you can add the above section multiple times:

```
[[deployment.rewrites]]
...

[[deployment.rewrites]]
...
```

Rewrites will be resolved in the order in which they are specified. However, they are only resolved once.

#### Path matching

* Matches must be exact unless a `*` is present
* `*` will match with the remainder of the path
* `*` may only be placed at the end of the path

If a `*` is used in the `from` parameter, it may also be used in the `to` parameter. In this case, the section of the path that matches the `*` will be applied to the rewritten path. For example, if a client visits the path `/v1/about-us.html` and your Deployment is configured with this rewrite:

```
[[deployment.rewrites]]
from = "/v1/*"
to = "/v2/*"
```

Then the path will evaluate to `/v2/about-us.html`.

#### Shadowing

If a URL path matches a rule and the exact path of a file in your Deployment, the rule is shadowing the exact file match. In that scenario, the matched file will always be returned. For example, consider the following:

* Your Static Deployment contains two files, `index.html` and `styles.css`

* Your Deployment is configured with this rewrite:

```
[[deployment.rewrites]]
from = "/*"
to = "/index.html"
```

* A client makes a request to `/styles.css`

`styles.css` will be returned because it is an exact match.

#### Limitations

Rewrites may only be used to redirect requests within your Static Deployment

## Starting your Deployment

After configuring your Deployment, select **Deploy** to start the Deployment process. Once the Deployment is complete, you can access details like the custom URL, build logs, and more. Learn more about managing your Deployment [here](/cloud-services/deployments/monitoring-a-deployment).

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/deployments/static/07-deployment-process.png" alt="initiate the Deployment process" height="400" />
</Frame>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/deployments/static/08-successful-deployment.png" alt="Deployment complete" height="400" />
</Frame>

## Billing

Static Deployments are charged based on deployments outbound data transfer usage ({StaticDeploymentOutboundPerGiB}/GiB). Users with Replit Core subscription have an entitlement of 100 GiB of deployments outbound data transfer. Please [contact us](https://support.replit.com) if you need more.

Free users will need to add a credit card before creating a Static Deployment.

You will be billed for outbound storage transfer once you exceed your monthly allowance.


# Troubleshooting Common Deployment Issues
Source: https://docs.replit.com/cloud-services/deployments/troubleshooting

If you encounter any difficulties with your Deployments, consider the following ten steps to address and resolve common problems.

If you still need help, even after trying all these steps, please check our [Community Hub](https://replit.com/community) for additional resources.

### Webview issues in `Replit.app` and `Replit.dev`

If you are having trouble accessing Replit (Example: replit.app or replit.dev) due to web filters or restrictions, you can try using public DNS resolvers like Google DNS (8.8.8.8) or Cloudflare DNS (1.1.1.1) to bypass these issues.

#### Change DNS settings

#### On Windows

1. Open the Control Panel.
2. Go to "Network and Sharing Center."
3. Select "Change adapter settings" on the left.
4. Right-select on your active network connection and select "Properties."
5. Select "Internet Protocol Version 4 (TCP/IPv4)" and select "Properties."
6. Choose "Use the following DNS server addresses."
7. Enter a public DNS server's IP address (e.g., 8.8.8.8 for Google DNS or 1.1.1.1 for CloudFlare DNS) in both "Preferred DNS server" and "Alternate DNS server" fields.
8. Select "OK" to save the changes.

If you are using Windows and need more detailed instructions for changing DNS settings, you can refer to [this link from Microsoft](https://support.microsoft.com/en-us/windows/change-tcp-ip-settings-bd0a07af-15f5-cd6a-363f-ca2b6f391ace) for comprehensive guidance on DNS configuration specific to Windows.

#### On MacOS

1. Go to "System Preferences."
2. Select "Network."
3. Select your active network connection on the left.
4. Select "Advanced" in the lower-right corner.
5. Go to the "DNS" tab.
6. Select the "+" button to add a DNS server.
7. Enter a public DNS server's IP address (e.g., 8.8.8.8 for Google DNS or 1.1.1.1 for CloudFlare DNS).
8. Select "OK" and then "Apply."

If you are using a Mac and need more detailed instructions for changing DNS settings, you can refer to [this Apple support link](https://support.apple.com/guide/mac-help/change-dns-settings-on-mac-mh14127/mac) for comprehensive guidance on DNS configuration specific to macOS.

#### On Linux

1. Depending on your Linux distribution, edit the `/etc/resolv.conf` file to add public DNS servers.
2. Add lines like these:

```
nameserver 8.8.8.8
nameserver 1.1.1.1
```

You can also refer to the [Debian Wiki](https://wiki.debian.org/NetworkConfiguration#Defining_the_.28DNS.29_Nameservers) for additional information on how to update name servers for various network managers used in different Linux distributions. The Debian Wiki provides comprehensive guidance on DNS configuration that can be helpful for a wider range of Linux users.

#### Clear DNS Cache

After changing DNS settings, clear the DNS cache to ensure the new settings are applied. Open a command prompt or terminal and run the following command:

* On Windows: `ipconfig /flushdns`
* On macOS and Linux: `sudo systemctl restart NetworkManager` (may vary depending on your Linux distribution)

<Note>
  As part of our efforts to enhance regional performance and stability, we may occasionally need to change the `replit.dev` URLs for your projects when moving them between clusters. However, once the migration process is complete, these new URLs are expected to remain stable for approximately one year, unless you explicitly request to change your project's location between North America and Asia. We appreciate your understanding as we work to provide you with an improved experience.
</Note>

#### Does your Replit App work within the Replit Workspace?

Press the big button at the top of the screen that says “Run”. If it doesn’t show you a webview with a web address ending in the repl.co domain, your code doesn’t work. Once that’s fixed up, you can try deploying again.

#### Is your program running continuously?

Deployments expect that your program never runs to completion, and will try to restart it if it does. If your program just runs a function and exits, this will not work.

#### If you’re running a website (as opposed to a bot), is the server listening on 0.0.0.0?

Deployments can automatically detect which port your server is running on, but only if it’s listening on the 0.0.0.0 address. If it’s listening on localhost or 127.0.0.1, it won’t work.

#### Are there any errors in your application?

Look in the “Logs” tab at the top of the Deployments pane to see the output of your application. Are there any stack traces or exceptions that you can see? This indicates an error in your code due to various issues such as uninitialized variables or trying to use packages that aren’t installed.

#### Are your run and build commands correct?

Common mistakes here include typos, using incorrect flags, or specifying the wrong file or directory. Double-check your commands and make any necessary adjustments.

#### Did you specify all your production secrets and environment variables in the Deployments pane?

Putting them in the Secrets pane is not enough – they won’t copy over automatically. This may cause your application to fail in the initialization step with errors about undefined values.

#### Is your Replit App too big?

Reserved and Autoscale Deployments only work on Replit App that are 8 GB or less in size, and Static Deployments can only be up to 1 GB. Try deleting some files or using an external datastore, such as our integrated [SQL Database](/cloud-services/storage-and-databases/sql-database/).

#### Does your homepage take a long time to load?

Before marking your Deployment as successful, we run a health check where we try to reach it via an HTTP request. If your main page takes more than 5 seconds to load, the health check will time out and the Deployment will fail in the last step.

#### Do you have any [ports specified in the .replit config](/replit-app/configuration#replit-file)?

If you have any ports specified, we turn off port auto-detection and rely on the config you have provided. You must specify a port in the config with an externalPort equal to 80 in order for the promotion step to pass. Make sure your server is listening on the specified localPort.

### Does the deployment fail due to a missing index.html file?

This can happen if the user specified an incorrect public directory. It can also happen if the application does not work as a static deployment.
A static deployment is a deployment that serves static files, such as HTML, CSS, and JavaScript.

First, check whether the application works as a static deployment. If there's any dynamic behavior in form of a server, then the application is not a good candidate for a static deployment.
In this case, it's suggested that you change the deployment type to Autoscale through the Deployments pane.

#### Are you relying on SQLite or the file system for data storage?

The file system available in Deployments is not persistent, and gets reset every time you deploy your Replit App. For data persistence, we recommend using a database such as our integrated [SQL Database](/cloud-services/storage-and-databases/sql-database).

### Deploying Streamlit Applications

Streamlit applications work seamlessly with Replit Deployments. To deploy a Streamlit application most easily, use [this template](https://replit.com/@replit/Streamlit?v=1).

Or, set the run command for Deployments to this:

```
streamlit run --server.address 0.0.0.0 --server.headless true --server.enableCORS=false --server.enableWebsocketCompression=false main.py
```

If your application is in a different file other than `main.py`, replace `main.py` with the name of your file instead.


# Overview
Source: https://docs.replit.com/cloud-services/storage-and-databases/object-storage/overview

Object Storage is a data storage architecture that manages data as Objects. In Object Storage, data is stored in containers called Buckets, which can hold any number of Objects. Each Object consists of data, metadata, and a unique identifier.

Object Storage is commonly used for storing large amounts of unstructured data, such as images, videos, documents, backups, and log files. It provides scalable and highly available storage, making it suitable for Cloud-based applications and services.

## Introduction

Object Storage on Replit provides a seamless way to store files persistently, allowing you to access your data across different environments, including development (the Replit Workspace) and production (Deployments). The table below helps you understand the problem and how the Object Storage solution resolves it.

| **Problem**                                                  | **Object Storage Solution**                                                             |
| ------------------------------------------------------------ | --------------------------------------------------------------------------------------- |
| Your data gets wiped out with every redeployment             | Your data persists across deployments, providing reliability and continuity             |
| Storing simple data without using complex databases          | A straightforward solution for storing JSON or text files without the database overhead |
| Need to store and serve images in your web applications      | Easily store and retrieve images, seamlessly integrating them into your applications    |
| Sharing data between development and production environments | Centralized storage for effortless data sharing across different environments           |

## Architecture

This section focuses on understanding the architecture of Object Storage and its components: Objects, Buckets, Replit Apps, and Deployments.

### Model

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/programming-ide/workspace-features/object-storage/object-storage-architecture.png" alt="Object storage model" />
</Frame>

The following are the components of Object Storage:

* **Objects**

Objects are files stored in the Replit system. They can be text files, images, configuration files, or any other data you want to save. When you perform actions like reading from or writing to files, you're working with Objects.

* **Buckets**

Buckets are containers that hold multiple Objects. Imagine them as folders where you organize related files. When using Replit libraries, the default Bucket is automatically selected unless otherwise specified, and no configuration is needed. You'll see the default configuration in the `.replit` file as shown below:

```
[objectStorage]
defaultBucketID = "replit-objstore-2671be20-ff2f-4b45-b882-bc823dc5b905"
```

* **Replit Apps and Deployments**

Replit App and Deployments are environments provided by Replit for executing code and hosting web applications. When working with Objects, Replit App, and Deployments, the first step is to access a Bucket, and then you can manage the Objects stored within it.

## Getting started

Login to your [Replit Workspace](https://replit.com/~) and create a Replit App. Refer to [Introduction to workspace](https:/.replit.com/replit-workspace/introduction-to-the-workspace) for the detailed steps.

Navigate to the **Tools** pane to find **Object Storage**. Alternatively, in any window, use the **+** sign to open a new tab and search for **Object Storage**.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/programming-ide/workspace-features/object-storage/object-storage-tool.png" alt="Object storage tool" />
</Frame>

Select the **Create a Bucket** button to create your Bucket.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/programming-ide/workspace-features/object-storage/create-a-bucket.png" alt="create a bucket" />
</Frame>

Once you create a Bucket, a Bucket ID is generated. To view the Bucket ID, navigate to the **Settings** tab.

<Note>
  You can also delete the Bucket anytime, but remember that this action cannot be undone.
</Note>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/programming-ide/workspace-features/object-storage/view-bucket-id.png" alt="create a bucket" />
</Frame>

### Manage Objects

Depending on your preferences and requirements, you can manage Objects by uploading, downloading, and deleting Objects within your Bucket using the Replit Object Storage Library or GCS APIs.

The Replit Object Storage libraries provide:

* A simplified interface for interacting with your Bucket
* Making it easier to perform common tasks like uploading, downloading, and deleting Objects

On the other hand, using GCS APIs directly gives you more control and flexibility over your Object management operations. This approach allows you to access advanced features and functionality provided by GCS, such as preconditions and lifecycle management. Using the GCS APIs is recommended if you are using a language other than [Python](/cloud-services/storage-and-databases/object-storage/python-api-reference) or [Typescript](/cloud-services/storage-and-databases/object-storage/typescript-api-reference) and cannot use a Replit library, or if you require more advanced functionality. You can read more about the GCS APIs [here](https://cloud.google.com/storage/reference/libraries). Using GCS APIs directly enables access from environments where it isn't possible to use a Replit library, such as other programming languages (i.e., Go or Java) or shell scripts.

In your Replit Workspace, you can start uploading files by dragging and dropping them into the Object Storage window or selecting **Upload files** or **Upload folder**. You can view all the files once you upload your folder/files. You can also organize all your files using the **Create folder** button. If you wish to delete a specific file, use the *trashcan* option against the specific file on the right side.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/programming-ide/workspace-features/object-storage/uploaded-files.png" alt="create a bucket" />
</Frame>

## Using Replit Object Storage Library

The Replit Object Storage Library is available in Python and TypeScript. It helps you perform basic file operations. Use the [Python library](./python-api-reference) to create a client instance, get the default Bucket associated with the Replit App, write data to an Object named `file.txt`, and then read data from the same Object.

In your Replit App Workspace, navigate to the **Commands** tab to install the **Replit Object Storage Package**. The `replit-object-storage` package simplifies working with Object Storage by providing a Python client library. Learn more about the package by referring to the [Replit Object Storage package overview](/cloud-services/storage-and-databases/object-storage/python-api-reference).

The following example helps you understand how your files interact with Replit Object Storage using Python.

```python

# Import the Replit Object Storage Library
from replit.object_storage import Client

# Create a client instance
client = Client()

# Write data to an Object with the name "file.txt"
client.upload_from_text("file.txt", file_contents)

# Read data from the Object named "file.txt"
obj = client.download_from_text("file.txt")
print("Content of 'file.txt':", obj)

```

Similarly, you can also use the [Replit Object Storage Client library in Typescript](/cloud-services/storage-and-databases/object-storage/python-api-reference) and other languages.

If you don't find a client library for the language of your choice, use one of the [GCS Client Libraries](https://cloud.google.com/storage/reference/libraries) or the [GCS JSON API](https://cloud.google.com/storage/json_api).


# Object Storage Python SDK
Source: https://docs.replit.com/cloud-services/storage-and-databases/object-storage/python-api-reference

Learn how to use the replit-object-storage Python package to manage files in Replit's Object Storage service with simple code examples.

## Overview

The `replit-object-storage` package simplifies working with Object Storage by providing a Python client library, offering a fast and efficient way to get started with a Python application using Object Storage. While it's possible to use Object Storage via the [Google Python Client for Cloud Storage](https://cloud.google.com/python/docs/reference/storage/latest) or the [Google Cloud Storage JSON API](https://cloud.google.com/storage/docs/json_api), the Replit client library simplifies building applications with Object Storage by eliminating the need for custom authentication logic and Bucket configuration. This documentation helps you get started with using the Object Storage Python SDK effectively.

## Installation

The Object Storage Python SDK is available via the `replit-object-storage` package in [PyPI](https://pypi.org/project/replit-object-storage/). To install the Object Storage Python SDK, you can use the following methods:

### One-click Setup

In your Workspace, navigate to the **\*Object Storage** pane -> **Commands** tab to use a one-click setup to install the package directly.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/hosting/object-storage/install-python.png" alt="Install replit-object-storage package" width="571" height="179" />
</Frame>

### Using upm

Use the following command to install the package:

```
upm --lang python add replit-object-storage
```

### Using pip

Use the following command to install the package:

```
pip install replit-object-storage
```

## Quick Start

### Setup a Client

To get started, create a new client instance with no parameters:

```python
from replit.object_storage import Client
client = Client()
```

### Add an Object

Upload an Object to Object Storage using the `upload_from_text` method:

```python
client.upload_from_text("file.txt", "Hello World!")
```

### Get an Object

Retrieve the contents of an Object using the `download_as_text` method:

```python
contents = client.download_as_text("file.txt")
print(contents)
# > "Hello World!"
```

### List the Objects in the Bucket

List all Objects in the Bucket using the `list` method:

```python
objects = client.list()
print(objects)
# > [Object(name='file.txt')]
```

### Delete an Object

Delete an object from Object Storage using the `delete` method:

```python
client.delete("file.txt")
```


# Client
Source: https://docs.replit.com/cloud-services/storage-and-databases/object-storage/python-api-reference/client

The Replit Object Storage Client is a Python interface that manages interactions with Replit Object Storage. It is a convenient tool for developers to handle tasks such as copying, deleting, uploading, and downloading objects within Replit Object Storage Buckets.

To import the client class from the `replit.object_storage` package, use the following command:

```python
from replit.object_storage import Client
```

## Class Client

The `Client` class manages interactions with Replit Object Storage. It provides methods for performing common operations on objects within a specified Bucket. The following command allows you create a `Client` instance to interact with Replit Object Storage.

```python
client = Client()
```

<Note>
  * This `Client` is a thin wrapper over the GCS(Google Cloud Storage) Python library. As a result, many docstrings are borrowed from the underlying library.
  * If an application uses multiple Buckets, it's recommended to use one `Client` instance per Bucket.
</Note>

* When interacting with Replit Object Storage using the `Client`, any method might return one of the following errors:

  * `BucketNotFoundError`: The method could not find the specified Bucket configured for the client.

  * `DefaultBucketError`: Occurs when no Bucket was explicitly configured, and an error occurs while resolving the default Bucket.

  * `ForbiddenError`: Signifies that access to the requested resource is not allowed due to permission restrictions.

  * `TooManyRequestsError`: Indicates that the operation is rate-limited due to excessive requests.

  * `UnauthorizedError`: Occurs when the requested operation is not allowed due to lack of proper authorization.

#### \_\_init\_\_

The `init` method initializes a new instance of the Client class.

```python
def __init__(bucket_id: Optional[str] = None)
```

**Argument**:

* `bucket_id` (Optional\[str]): The ID of the Bucket the client should interface with. If no ID is provided, the method will use the default Bucket associated with the Replit App or Deployment.

#### copy

The `copy` method copies an Object within the same Bucket. If an Object exists in the same location, it will be overwritten.

```python
def copy(object_name: str, dest_object_name: str) -> None
```

**Arguments**:

* `object_name` (str) - The full path of the Object to be copied.
* `dest_object_name` (str) - The full path to copy the Object to.

**Raises**:

* `ObjectNotFoundError` - If the source Object could not be found.

#### delete

The `delete` method deletes an Object from Object Storage.

```python
def delete(object_name: str, ignore_not_found: bool = False) -> None
```

**Arguments**:

* `object_name` (str) - The name of the Object to be deleted.
* `ignore_not_found` (bool) - Whether to raise an error if the Object does not exist.

**Raises**:

* `ObjectNotFoundError` - If the Object could not be found.

#### download\_as\_bytes

The `download_as_bytes` method downloads the contents of an Object as a bytes Object.

```python
def download_as_bytes(object_name: str) -> bytes
```

**Argument**:

* `object_name` (str) - The name of the Object to be downloaded.

**Returns**:

* `bytes`- The raw byte representation of the Object's contents.

**Raises**:

* `ObjectNotFoundError` - If the Object could not be found.

#### download\_as\_text

The `download_as_text` method downloads the contents of an Object as a string.

```python
def download_as_text(object_name: str) -> str
```

**Argument**:

* `object_name` (str) - The name of the Object to be downloaded.

**Returns**:

* str: The Object's contents as a UTF-8 encoded string.

**Raises**:

* `ObjectNotFoundError` - If the Object could not be found.

#### download\_to\_filename

Downloads the contents of an Object into a file on the local disk.

```python
def download_to_filename(object_name: str, dest_filename: str) -> None
```

**Arguments**:

* `object_name` (str) - The name of the Object to be downloaded.
* `dest_filename` (str) - The filename of the file on the local disk to be written.

**Raises**:

* `ObjectNotFoundError` - If the Object could not be found.

#### exists

The `exists` method checks if an Object exists.

```python
def exists(object_name: str) -> bool
```

**Argument**:

* `object_name` (str) - The name of the Object to be checked.

**Returns**:

* `bool`: True if the Object exists, False otherwise.

#### list

The `list` method lists Objects in the Bucket.

```python
def list(end_offset: Optional[str] = None,
         match_glob: Optional[str] = None,
         max_results: Optional[int] = None,
         prefix: Optional[str] = None,
         start_offset: Optional[str] = None) -> List[Object]
```

**Arguments**:

* `end_offset`(Optional\[str]) - Filter results to Objects whose names are lexicographically
  before end\_offset. If start\_offset is also set, the Objects listed
  have names between start\_offset (inclusive) and end\_offset
  (exclusive).
* `match_glob` (Optional\[str]) - Glob pattern used to filter results, for example foo\*bar.
* `max_results` (Optional\[int]) - The maximum number of results that can be returned in the
  response.
* `prefix` (Optional\[str]) - Filter results to Objects whose names have the specified prefix.
* `start_offset` (Optional\[str]) - Filter results to Objects whose names are lexicographically equal to or after `start_offset`. If `endOffset` is also `set`, the Objects listed have names between `start_offset` (inclusive) and `end_offset` (exclusive).

**Returns**:

* `List`(Object): A list of Objects matching the given query parameters.

#### upload\_from\_filename

The `upload_from_filename` method uploads an Object from a file on the local disk.

```python
def upload_from_filename(dest_object_name: str, src_filename: str) -> None
```

**Arguments**:

* `dest_object_name`(str) - The name of the Object to be uploaded.
* `src_filename`(str) - The filename of a file on the local disk

#### upload\_from\_bytes

The `upload_from_bytes` method uploads an Object from bytes.

```python
def upload_from_bytes(dest_object_name: str, src_data: bytes) -> None
```

**Arguments**:

* `dest_object_name`(str) - The name of the Object to be uploaded.
* `src_data`(str) - The bytes to be uploaded.

#### upload\_from\_text

The `upload_from_text` method uploads an Object from a string.

```python
def upload_from_text(dest_object_name: str, src_data: Union[bytes, str]) -> None
```

**Arguments**:

* `dest_object_name`(str) - The name of the Object to be uploaded.
* `src_data`(str)- The text to be uploaded.


# Error Handling Guide
Source: https://docs.replit.com/cloud-services/storage-and-databases/object-storage/python-api-reference/errors

This guide helps you understand the classes representing common errors that may occur when using Replit Object Storage or handling storage-related operations.

```python
import replit.object_storage.errors
```

## Class BucketNotFoundError

`BucketNotFoundError` may occur if the specified Bucket cannot be found.

```python
class BucketNotFoundError(Exception)
```

## Class DefaultBucketError

`DefaultBucketError` may occur if the default Bucket cannot be resolved.

```python
class DefaultBucketError(Exception)
```

## Class ForbiddenError

`ForbiddenError` may occur if access to the requested resource is not allowed.

```python
class ForbiddenError(Exception)
```

## Class ObjectNotFoundError

`ObjectNotFoundError` may occur if the requested Object cannot be found.

```python
class ObjectNotFoundError(Exception)
```

## Class TooManyRequestsError

`TooManyRequestsError` may occur if the rate of requests exceeds the rate limit.

```python
class TooManyRequestsError(Exception)
```

## Class UnauthorizedError

`UnauthorizedError` may occur if the requested operation is not allowed.

```python
class UnauthorizedError(Exception)
```


# Object Representation
Source: https://docs.replit.com/cloud-services/storage-and-databases/object-storage/python-api-reference/object

Learn about the Object class in Replit's object storage Python API, which provides a Pythonic representation of stored objects and their metadata.

The `replit.object_storage.object` module provides a Pythonic representation of an Object in Object Storage. This module contains the `Object` class, which encapsulates metadata about an Object stored in an Object Storage Bucket.

```python
import replit.object_storage.object
```

## Class Object

The `Object` class is a Python data class representing an Object in Object Storage. It contains metadata attributes such as the Object's name.

```python
@dataclass
class Object()
```

**Attribute**:

* `name`(str) - The name of the Object.


# Object Storage TypeScript SDK
Source: https://docs.replit.com/cloud-services/storage-and-databases/object-storage/typescript-api-reference

Learn how to use the @replit/object-storage TypeScript client library to manage objects in Replit's Object Storage service.

## Overview

The `@replit/object-storage` package offers a TypeScript client library to interact with Object Storage. It provides a quick and efficient way to integrate Object Storage into Node.js applications. While it's feasible to utilize Object Storage via the [Google Node.js Client for Cloud Storage](https://cloud.google.com/nodejs/docs/reference/storage/latest) or the [Google Cloud Storage JSON API](https://cloud.google.com/storage/docs/json_api), the Replit client library streamlines application development with Object Storage by eliminating the need for custom authentication logic and Bucket configuration.

<Note>
  This package is intended for server-side applications only. It leverages Node.js features and native filesystem functionalities, making it incompatible with browser environments.
</Note>

## Installation

The Object Storage TypeScript SDK is available via the `@replit/object-storage` package in [NPM](https://www.npmjs.com/package/@replit/object-storage).

You can install the Object Storage package by using one of the following methods:

### One-click Setup

Navigate to your Workspace, select **+** to add a new tab, and search for **Object Storage**. In the Object Storage pane, use the one-click setup **Install @replit/object-storage package** button to install the package.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/hosting/object-storage/install-javascript.png" alt="Install @replit/object-storage package" />
</Frame>

### Using npm

You can install the package via the shell using npm:

```
npm install @replit/object-storage
```

### Using yarn

```
yarn add @replit/object-storage
```

The library is compatible with [Bun](https://replit.com/@replit/Bun?v=1), [Deno](https://replit.com/@replit/Deno?v=1), and [NodeJS](https://replit.com/@replit/Nodejs?v=1) (Node version 14+).

## Quick Start

Follow this guide to set up the Object Storage TypeScript SDK and perform basic operations like adding, retrieving, listing, and deleting Objects in your Bucket.

### Setup a Client

Create a new client instance without any parameters:

```typescript
import { Client } from '@replit/object-storage';
const client = new Client();
```

### Add an Object

Upload an Object by providing its name and contents:

```typescript
const { ok, error } = await client.uploadFromText('file.txt', "Hello World!")
if (!ok) {
    // ... handle the error ...
}
```

### Get an Object

Retrieve an Object's contents as text:

```typescript
const { ok, value, error } = await client.downloadAsText('file.txt');
if (!ok) {
    // ... handle the error ...
}
console.log(value);
// > "Hello World!"
```

### List the Objects in the Bucket

List all Objects within the Bucket:

```typescript
const { ok, value, error } = await client.list();
if (!ok) {
    // ... handle the error ...
}
console.log(value);
// > [{ name: 'file.txt' }]
```

### Delete an Object

Delete an Object from the Bucket:

```typescript
const { ok, error } = await client.delete("file.txt");
if (!ok) {
    // ... handle the error ...
}
```


# Classes
Source: https://docs.replit.com/cloud-services/storage-and-databases/object-storage/typescript-api-reference/classes



<Tabs>
  <Tab title="Client">
    <Client components={props.components} />
  </Tab>

  <Tab title="StreamRequestError">
    <StreamRequestError components={props.components} />
  </Tab>
</Tabs>

## Class: Client

The `Client` class represents a client that can be used to communicate with Object Storage from Replit. It provides methods for interacting with Objects stored in Object Storage Buckets.

## Constructors

### constructor

Creates a new client instance with optional configurations.

* **new Client**(`options?`): [`Client`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/classes#class-client)

#### Parameters

| Name       | Type                                                                                                        | Description                         |
| ---------- | ----------------------------------------------------------------------------------------------------------- | ----------------------------------- |
| `options?` | [`ClientOptions`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces) | configurations to setup the client. |

#### Returns

Returns a new instance of the Client class.

[`Client`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/classes#class-client)

#### Defined in

[client.ts:120](https://github.com/replit/replit-storage-typescript/blob/85f2df0/src/client.ts#L120)

### Methods

The `Client` class provides the following methods for interacting with Objects stored in Object Storage Buckets. Each method offers functionality for performing specific operations such as copying, deleting, and downloading Objects.

### copy

Copies the specified Object within the same Bucket. If an Object exists in the same location, it will be overwritten.

▸ **copy**(`objectName`, `destObjectName`): `Promise`\<[`Result`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/modules#result)\<`null`, [`RequestError`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces)>>

#### Parameters

| Name             | Type     | Description                          |
| ---------------- | -------- | ------------------------------------ |
| `objectName`     | `string` | The full path of the Object to copy. |
| `destObjectName` | `string` | The full path to copy the Object to. |

#### Returns

A promise that resolves when the operation is successful or rejects with an error.

`Promise`\<[`Result`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/modules#result)\<`null`, [`RequestError`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces)>>

#### Defined in

[client.ts:184](https://github.com/replit/replit-storage-typescript/blob/85f2df0/src/client.ts#L184)

***

### deleteDir

Deletes the specified Object from Object Storage.

▸ **delete**(`objectName`, `options?`): `Promise`\<[`Result`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/modules#result)\<`null`, [`RequestError`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces)>>

#### Parameters

| Name         | Type                                                                                                        | Description                              |
| ------------ | ----------------------------------------------------------------------------------------------------------- | ---------------------------------------- |
| `objectName` | `string`                                                                                                    | The full path of the Object to delete.   |
| `options?`   | [`DeleteOptions`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces) | Configurations for the delete operation. |

#### Returns

A promise that resolves when the operation is successful or rejects with an error.

`Promise`\<[`Result`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/modules#result)\<`null`, [`RequestError`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces)>>

#### Defined in

[client.ts:202](https://github.com/replit/replit-storage-typescript/blob/85f2df0/src/client.ts#L202)

***

### downloadAsBytes

Downloads an Object as a buffer containing the Object's raw contents.

▸ **downloadAsBytes**(`objectName`, `options?`): `Promise`\<[`Result`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/modules#result)\<\[`Buffer`], [`RequestError`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces)>>

#### Parameters

| Name         | Type                                                                                                          | Description                                |
| ------------ | ------------------------------------------------------------------------------------------------------------- | ------------------------------------------ |
| `objectName` | `string`                                                                                                      | The full path of the Object to download.   |
| `options?`   | [`DownloadOptions`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces) | Configurations for the download operation. |

#### Returns

A promise that resolves with a buffer containing the Object's contents or rejects with an error.

`Promise`\<[`Result`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/modules#result)\<\[`Buffer`], [`RequestError`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces)>>

#### Defined in

[client.ts:220](https://github.com/replit/replit-storage-typescript/blob/85f2df0/src/client.ts#L220)

***

### downloadAsStream

Opens a new stream and streams the Object's contents. If an error is encountered, it will be emitted through the stream.

▸ **downloadAsStream**(`objectName`, `options?`): `Readable`

#### Parameters

| Name         | Type                                                                                                          | Description                                |
| ------------ | ------------------------------------------------------------------------------------------------------------- | ------------------------------------------ |
| `objectName` | `string`                                                                                                      | The full path of the Object to download.   |
| `options?`   | [`DownloadOptions`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces) | Configurations for the download operation. |

#### Returns

A readable stream containing the Object's contents.

`Readable`

#### Defined in

[client.ts:283](https://github.com/replit/replit-storage-typescript/blob/85f2df0/src/client.ts#L283)

***

### downloadAsText

Downloads a Object to a string and returns the string.

▸ **downloadAsText**(`objectName`, `options?`): `Promise`\<[`Result`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/modules#result)\<`string`, [`RequestError`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces)>>

#### Parameters

| Name         | Type                                                                                                          | Description                                |
| ------------ | ------------------------------------------------------------------------------------------------------------- | ------------------------------------------ |
| `objectName` | `string`                                                                                                      | The full path of the Object to download.   |
| `options?`   | [`DownloadOptions`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces) | Configurations for the download operation. |

#### Returns

A promise that resolves with a string containing the Object's contents or rejects with an error.

`Promise`\<[`Result`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/modules#result)\<`string`, [`RequestError`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces)>>

#### Defined in

[client.ts:238](https://github.com/replit/replit-storage-typescript/blob/85f2df0/src/client.ts#L238)

***

### downloadToFilename

Downloads an Object to the local filesystem.

▸ **downloadToFilename**(`objectName`, `destFilename`, `options?`): `Promise`\<[`Result`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/modules#result)\<`null`, [`RequestError`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces)>>

#### Parameters

| Name           | Type                                                                                                          | Description                                                         |
| -------------- | ------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------- |
| `objectName`   | `string`                                                                                                      | The full path of the Object to download.                            |
| `destFilename` | `string`                                                                                                      | The path on the local filesystem to write the downloaded Object to. |
| `options?`     | [`DownloadOptions`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces) | Configurations for the download operation.                          |

#### Returns

A promise that resolves when the operation is successful or rejects with an error.

`Promise`\<[`Result`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/modules#result)\<`null`, [`RequestError`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces)>>

#### Defined in

[client.ts:258](https://github.com/replit/replit-storage-typescript/blob/85f2df0/src/client.ts#L258)

***

### exists

Checks whether the given Object exists.

▸ **exists**(`objectName`): `Promise`\<[`Result`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/modules#result)\<`boolean`, [`RequestError`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces)>>

#### Parameters

| Name         | Type     | Description                           |
| ------------ | -------- | ------------------------------------- |
| `objectName` | `string` | The full path of the Object to check. |

#### Returns

A promise that resolves with a boolean indicating whether the Object exists in the specified Bucket. If the Object exists, the promise resolves to true; otherwise, it resolves to false. If an error occurs during the operation, the promise rejects with a RequestError containing details about the error.

`Promise`\<[`Result`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/modules#result)\<`boolean`, [`RequestError`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces)>>

#### Defined in

[client.ts:309](https://github.com/replit/replit-storage-typescript/blob/85f2df0/src/client.ts#L309)

***

### list

Lists Objects in the Bucket.

▸ **list**(`options?`): `Promise`\<[`Result`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/modules#result)\<[`StorageObject`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces)\[], [`RequestError`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces)>>

#### Parameters

| Name       | Type                                                                                                      | Description                            |
| ---------- | --------------------------------------------------------------------------------------------------------- | -------------------------------------- |
| `options?` | [`ListOptions`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces) | Configurations for the list operation. |

#### Returns

A promise that resolves with an array of `StorageObject` instances representing the Objects in the Bucket. Each `StorageObject` contains metadata about a specific Object stored in the Bucket.

`Promise`\<[`Result`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/modules#result)\<[`StorageObject`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces)\[], [`RequestError`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces)>>

#### Defined in

[client.ts:323](https://github.com/replit/replit-storage-typescript/blob/85f2df0/src/client.ts#L323)

***

### uploadFromBytes

▸ **uploadFromBytes**(`objectName`, `contents`, `options?`): `Promise`\<[`Result`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/modules#result)\<`null`, [`RequestError`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces)>>

Uploads an Object from its in-memory byte representation. If an Object already exists with the specified name it will be overwritten.

#### Parameters

| Name         | Type                                                                                                        | Description                                  |
| ------------ | ----------------------------------------------------------------------------------------------------------- | -------------------------------------------- |
| `objectName` | `string`                                                                                                    | The full destination path of the Object.     |
| `contents`   | `Buffer`                                                                                                    | The raw contents of the Object in byte form. |
| `options?`   | [`UploadOptions`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces) | Configurations for the upload operation.     |

#### Returns

`Promise`\<[`Result`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/modules#result)\<`null`, [`RequestError`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces)>>

#### Defined in

[client.ts:347](https://github.com/replit/replit-storage-typescript/blob/85f2df0/src/client.ts#L347)

***

### uploadFromFilename

▸ **uploadFromFilename**(`objectName`, `srcFilename`, `options?`): `Promise`\<[`Result`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/modules#result)\<`null`, [`RequestError`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces)>>

Uploads an Object from a file on the local filesystem. If an Object already exists with the specified name it will be overwritten.

#### Parameters

| Name          | Type                                                                                                        | Description                                             |
| ------------- | ----------------------------------------------------------------------------------------------------------- | ------------------------------------------------------- |
| `objectName`  | `string`                                                                                                    | The full destination path of the Object.                |
| `srcFilename` | `string`                                                                                                    | The path of the file on the local filesystem to upload. |
| `options?`    | [`UploadOptions`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces) | Configurations for the upload operation.                |

#### Returns

`Promise`\<[`Result`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/modules#result)\<`null`, [`RequestError`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces)>>

#### Defined in

[client.ts:391](https://github.com/replit/replit-storage-typescript/blob/85f2df0/src/client.ts#L391)

***

### uploadFromStream

▸ **uploadFromStream**(`objectName`, `stream`, `options?`): `Promise`\<`void`>

Uploads an Object by streaming its contents from the provided stream. If an error is encountered, it will be emitted through the stream. If an Object already exists with the specified name it will be overwritten.

#### Parameters

| Name         | Type                                                                                                        | Description                                         |
| ------------ | ----------------------------------------------------------------------------------------------------------- | --------------------------------------------------- |
| `objectName` | `string`                                                                                                    | The full destination path of the Object.            |
| `stream`     | `Readable`                                                                                                  | A writeable stream the Object will be written from. |
| `options?`   | [`UploadOptions`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces) | Configurations for the upload operation.            |

#### Returns

`Promise`\<`void`>

#### Defined in

[client.ts:416](https://github.com/replit/replit-storage-typescript/blob/85f2df0/src/client.ts#L416)

***

### uploadFromText

▸ **uploadFromText**(`objectName`, `contents`, `options?`): `Promise`\<[`Result`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/modules#result)\<`null`, [`RequestError`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces)>>

Uploads an Object from its in-memory text representation. If an Object already exists with the specified name it will be overwritten.

#### Parameters

| Name         | Type                                                                                                        | Description                              |
| ------------ | ----------------------------------------------------------------------------------------------------------- | ---------------------------------------- |
| `objectName` | `string`                                                                                                    | The full destination path of the Object. |
| `contents`   | `string`                                                                                                    | The contents of the Object in text form. |
| `options?`   | [`UploadOptions`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces) | Configurations for the upload operation. |

#### Returns

`Promise`\<[`Result`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/modules#result)\<`null`, [`RequestError`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces)>>

#### Defined in

[client.ts:369](https://github.com/replit/replit-storage-typescript/blob/85f2df0/src/client.ts#L369)


# Class- Client
Source: https://docs.replit.com/cloud-services/storage-and-databases/object-storage/typescript-api-reference/classes/client

The `Client` class represents a client that can be used to communicate with Object Storage from Replit. It provides methods for interacting with Objects stored in Object Storage Buckets.

## Constructors

### constructor

Creates a new client instance with optional configurations.

* **new Client**(`options?`): [`Client`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/classes#class-client)

#### Parameters

| Name       | Type                                                                                                        | Description                         |
| :--------- | :---------------------------------------------------------------------------------------------------------- | :---------------------------------- |
| `options?` | [`ClientOptions`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces) | configurations to setup the client. |

#### Returns

Returns a new instance of the Client class.

[`Client`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/classes#class-client)

#### Defined in

[client.ts:120](https://github.com/replit/replit-storage-typescript/blob/85f2df0/src/client.ts#L120)

## Methods

The `Client` class provides the following methods for interacting with Objects stored in Object Storage Buckets. Each method offers functionality for performing specific operations such as copying, deleting, and downloading Objects.

### copy

Copies the specified Object within the same Bucket. If an Object exists in the same location, it will be overwritten.

▸ **copy**(`objectName`, `destObjectName`): `Promise`{"<"}[`Result`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/modules#result){"<"}`null`, [`RequestError`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces)>>

#### Parameters

| Name             | Type     | Description                          |
| :--------------- | :------- | :----------------------------------- |
| `objectName`     | `string` | The full path of the Object to copy. |
| `destObjectName` | `string` | The full path to copy the Object to. |

#### Returns

A promise that resolves when the operation is successful or rejects with an error.

`Promise`{"<"}[`Result`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/modules#result){"<"}`null`, [`RequestError`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces)>>

#### Defined in

[client.ts:184](https://github.com/replit/replit-storage-typescript/blob/85f2df0/src/client.ts#L184)

***

### delete

Deletes the specified Object from Object Storage.

▸ **delete**(`objectName`, `options?`): `Promise`{"<"}[`Result`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/modules#result){"<"}`null`, [`RequestError`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces)>>

#### Parameters

| Name         | Type                                                                                                        | Description                              |
| :----------- | :---------------------------------------------------------------------------------------------------------- | :--------------------------------------- |
| `objectName` | `string`                                                                                                    | The full path of the Object to delete.   |
| `options?`   | [`DeleteOptions`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces) | Configurations for the delete operation. |

#### Returns

A promise that resolves when the operation is successful or rejects with an error.

`Promise`{"<"}[`Result`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/modules#result){"<"}`null`, [`RequestError`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces)>>

#### Defined in

[client.ts:202](https://github.com/replit/replit-storage-typescript/blob/85f2df0/src/client.ts#L202)

***

### downloadAsBytes

Downloads an Object as a buffer containing the Object's raw contents.

▸ **downloadAsBytes**(`objectName`, `options?`): `Promise`{"<"}[`Result`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/modules#result){"<"}\[`Buffer`], [`RequestError`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces)>>

#### Parameters

| Name         | Type                                                                                                          | Description                                |
| :----------- | :------------------------------------------------------------------------------------------------------------ | :----------------------------------------- |
| `objectName` | `string`                                                                                                      | The full path of the Object to download.   |
| `options?`   | [`DownloadOptions`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces) | Configurations for the download operation. |

#### Returns

A promise that resolves with a buffer containing the Object's contents or rejects with an error.

`Promise`{"<"}[`Result`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/modules#result){"<"}\[`Buffer`], [`RequestError`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces)>>

#### Defined in

[client.ts:220](https://github.com/replit/replit-storage-typescript/blob/85f2df0/src/client.ts#L220)

***

### downloadAsStream

Opens a new stream and streams the Object's contents. If an error is encountered, it will be emitted through the stream.

▸ **downloadAsStream**(`objectName`, `options?`): `Readable`

#### Parameters

| Name         | Type                                                                                                          | Description                                |
| :----------- | :------------------------------------------------------------------------------------------------------------ | :----------------------------------------- |
| `objectName` | `string`                                                                                                      | The full path of the Object to download.   |
| `options?`   | [`DownloadOptions`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces) | Configurations for the download operation. |

#### Returns

A readable stream containing the Object's contents.

`Readable`

#### Defined in

[client.ts:283](https://github.com/replit/replit-storage-typescript/blob/85f2df0/src/client.ts#L283)

***

### downloadAsText

Downloads a Object to a string and returns the string.

▸ **downloadAsText**(`objectName`, `options?`): `Promise`{"<"}[`Result`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/modules#result){"<"}`string`, [`RequestError`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces)>>

#### Parameters

| Name         | Type                                                                                                          | Description                                |
| :----------- | :------------------------------------------------------------------------------------------------------------ | :----------------------------------------- |
| `objectName` | `string`                                                                                                      | The full path of the Object to download.   |
| `options?`   | [`DownloadOptions`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces) | Configurations for the download operation. |

#### Returns

A promise that resolves with a string containing the Object's contents or rejects with an error.

`Promise`{"<"}[`Result`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/modules#result){"<"}`string`, [`RequestError`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces)>>

#### Defined in

[client.ts:238](https://github.com/replit/replit-storage-typescript/blob/85f2df0/src/client.ts#L238)

***

### downloadToFilename

Downloads an Object to the local filesystem.

▸ **downloadToFilename**(`objectName`, `destFilename`, `options?`): `Promise`{"<"}[`Result`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/modules#result){"<"}`null`, [`RequestError`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces)>>

#### Parameters

| Name           | Type                                                                                                          | Description                                                         |
| :------------- | :------------------------------------------------------------------------------------------------------------ | :------------------------------------------------------------------ |
| `objectName`   | `string`                                                                                                      | The full path of the Object to download.                            |
| `destFilename` | `string`                                                                                                      | The path on the local filesystem to write the downloaded Object to. |
| `options?`     | [`DownloadOptions`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces) | Configurations for the download operation.                          |

#### Returns

A promise that resolves when the operation is successful or rejects with an error.

`Promise`{"<"}[`Result`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/modules#result){"<"}`null`, [`RequestError`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces)>>

#### Defined in

[client.ts:258](https://github.com/replit/replit-storage-typescript/blob/85f2df0/src/client.ts#L258)

***

### exists

Checks whether the given Object exists.

▸ **exists**(`objectName`): `Promise`{"<"}[`Result`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/modules#result){"<"}`boolean`, [`RequestError`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces)>>

#### Parameters

| Name         | Type     | Description                           |
| :----------- | :------- | :------------------------------------ |
| `objectName` | `string` | The full path of the Object to check. |

#### Returns

A promise that resolves with a boolean indicating whether the Object exists in the specified Bucket. If the Object exists, the promise resolves to true; otherwise, it resolves to false. If an error occurs during the operation, the promise rejects with a RequestError containing details about the error.

`Promise`{"<"}[`Result`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/modules#result){"<"}`boolean`, [`RequestError`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces)>>

#### Defined in

[client.ts:309](https://github.com/replit/replit-storage-typescript/blob/85f2df0/src/client.ts#L309)

***

### list

Lists Objects in the Bucket.

▸ **list**(`options?`): `Promise`{"<"}[`Result`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/modules#result){"<"}[`StorageObject`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces)\[], [`RequestError`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces)>>

#### Parameters

| Name       | Type                                                                                                      | Description                            |
| :--------- | :-------------------------------------------------------------------------------------------------------- | :------------------------------------- |
| `options?` | [`ListOptions`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces) | Configurations for the list operation. |

#### Returns

A promise that resolves with an array of `StorageObject` instances representing the Objects in the Bucket. Each `StorageObject` contains metadata about a specific Object stored in the Bucket.

`Promise`{"<"}[`Result`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/modules#result){"<"}[`StorageObject`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces)\[], [`RequestError`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces)>>

#### Defined in

[client.ts:323](https://github.com/replit/replit-storage-typescript/blob/85f2df0/src/client.ts#L323)

***

### uploadFromBytes

▸ **uploadFromBytes**(`objectName`, `contents`, `options?`): `Promise`{"<"}[`Result`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/modules#result){"<"}`null`, [`RequestError`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces)>>

Uploads an Object from its in-memory byte representation.
If an Object already exists with the specified name it will be overwritten.

#### Parameters

| Name         | Type                                                                                                        | Description                                  |
| :----------- | :---------------------------------------------------------------------------------------------------------- | :------------------------------------------- |
| `objectName` | `string`                                                                                                    | The full destination path of the Object.     |
| `contents`   | `Buffer`                                                                                                    | The raw contents of the Object in byte form. |
| `options?`   | [`UploadOptions`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces) | Configurations for the upload operation.     |

#### Returns

`Promise`{"<"}[`Result`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/modules#result){"<"}`null`, [`RequestError`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces)>>

#### Defined in

[client.ts:347](https://github.com/replit/replit-storage-typescript/blob/85f2df0/src/client.ts#L347)

***

### uploadFromFilename

▸ **uploadFromFilename**(`objectName`, `srcFilename`, `options?`): `Promise`{"<"}[`Result`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/modules#result){"<"}`null`, [`RequestError`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces)>>

Uploads an Object from a file on the local filesystem.
If an Object already exists with the specified name it will be overwritten.

#### Parameters

| Name          | Type                                                                                                        | Description                                             |
| :------------ | :---------------------------------------------------------------------------------------------------------- | :------------------------------------------------------ |
| `objectName`  | `string`                                                                                                    | The full destination path of the Object.                |
| `srcFilename` | `string`                                                                                                    | The path of the file on the local filesystem to upload. |
| `options?`    | [`UploadOptions`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces) | Configurations for the upload operation.                |

#### Returns

`Promise`{"<"}[`Result`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/modules#result){"<"}`null`, [`RequestError`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces)>>

#### Defined in

[client.ts:391](https://github.com/replit/replit-storage-typescript/blob/85f2df0/src/client.ts#L391)

***

### uploadFromStream

▸ **uploadFromStream**(`objectName`, `stream`, `options?`): `Promise`{"<"}`void`>

Uploads an Object by streaming its contents from the provided stream.
If an error is encountered, it will be emitted through the stream. If an Object already exists with the specified name it will be overwritten.

#### Parameters

| Name         | Type                                                                                                        | Description                                         |
| :----------- | :---------------------------------------------------------------------------------------------------------- | :-------------------------------------------------- |
| `objectName` | `string`                                                                                                    | The full destination path of the Object.            |
| `stream`     | `Readable`                                                                                                  | A writeable stream the Object will be written from. |
| `options?`   | [`UploadOptions`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces) | Configurations for the upload operation.            |

#### Returns

`Promise`{"<"}`void`>

#### Defined in

[client.ts:416](https://github.com/replit/replit-storage-typescript/blob/85f2df0/src/client.ts#L416)

***

### uploadFromText

▸ **uploadFromText**(`objectName`, `contents`, `options?`): `Promise`{"<"}[`Result`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/modules#result){"<"}`null`, [`RequestError`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces)>>

Uploads an Object from its in-memory text representation.
If an Object already exists with the specified name it will be overwritten.

#### Parameters

| Name         | Type                                                                                                        | Description                              |
| :----------- | :---------------------------------------------------------------------------------------------------------- | :--------------------------------------- |
| `objectName` | `string`                                                                                                    | The full destination path of the Object. |
| `contents`   | `string`                                                                                                    | The contents of the Object in text form. |
| `options?`   | [`UploadOptions`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces) | Configurations for the upload operation. |

#### Returns

`Promise`{"<"}[`Result`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/modules#result){"<"}`null`, [`RequestError`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces)>>

#### Defined in

[client.ts:369](https://github.com/replit/replit-storage-typescript/blob/85f2df0/src/client.ts#L369)


# Class- StreamRequestError
Source: https://docs.replit.com/cloud-services/storage-and-databases/object-storage/typescript-api-reference/classes/stream-request-error

An error that may be surfaced when using a stream.

## Hierarchy

* `Error`

  ↳ **`StreamRequestError`**

## Constructors

### constructor

• **new StreamRequestError**(`err`): [`StreamRequestError`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/classes)

#### Parameters

| Name  | Type                                                                                                       |
| :---- | :--------------------------------------------------------------------------------------------------------- |
| `err` | [`RequestError`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces) |

#### Returns

[`StreamRequestError`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/classes)

#### Overrides

Error.constructor

#### Defined in

[index.ts:38](https://github.com/replit/replit-storage-typescript/blob/85f2df0/src/index.ts#L38)

## Methods

### getRequestError

▸ **getRequestError**(): [`RequestError`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces)

#### Returns

[`RequestError`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces)

#### Defined in

[index.ts:48](https://github.com/replit/replit-storage-typescript/blob/85f2df0/src/index.ts#L48)


# Interfaces
Source: https://docs.replit.com/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces

Reference documentation for TypeScript interfaces used in Replit's object storage API, including client options, storage objects, and operation settings.

<Tabs>
  <Tab title="ClientOptions">
    <ClientOptions components={props.components} />
  </Tab>

  <Tab title="DeleteOptions">
    <DeleteOptions components={props.components} />
  </Tab>

  <Tab title="DownloadOptions">
    <DownloadOptions components={props.components} />
  </Tab>

  <Tab title="ErrResult">
    <ErrResult components={props.components} />
  </Tab>

  <Tab title="ListOptions">
    <ListOptions components={props.components} />
  </Tab>

  <Tab title="OkResult">
    <OkResult components={props.components} />
  </Tab>

  <Tab title="RequestError">
    <RequestError components={props.components} />
  </Tab>

  <Tab title="StorageObject">
    <StorageObject components={props.components} />
  </Tab>

  <Tab title="UploadOptions">
    <UploadOptions components={props.components} />
  </Tab>
</Tabs>

## Interface: ClientOptions

Configuration options for creating a Client.

### Properties

### bucketId

• `Optional` **bucketId**: `string`

The ID of the Bucket the Client will interact with. If none is specified, the default Bucket will be used.

#### Defined in

[client.ts:24](https://github.com/replit/replit-storage-typescript/blob/85f2df0/src/client.ts#L24)

This interface defines the configuration options that can be provided when creating a Client instance for interacting with Object Storage. The bucketId property specifies the ID of the Bucket to be used. If no bucketId is provided, the Client will interact with the default Bucket.


# Interface- ClientOptions
Source: https://docs.replit.com/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces/client-options

Configuration options for creating a Client.

## Properties

### bucketId

• `Optional` **bucketId**: `string`

The ID of the Bucket the Client will interact with.
If none is specified, the default Bucket will be used.

#### Defined in

[client.ts:24](https://github.com/replit/replit-storage-typescript/blob/85f2df0/src/client.ts#L24)

This interface defines the configuration options that can be provided when creating a Client instance for interacting with Object Storage. The bucketId property specifies the ID of the Bucket to be used. If no bucketId is provided, the Client will interact with the default Bucket.


# Interface- DeleteOptions
Source: https://docs.replit.com/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces/delete-options

Configuration options for deleting objects from Replit Object Storage, including error handling settings for non-existent objects.

Configuration options for deleting an Object.

## Properties

### ignoreNotFound

• `Optional` **ignoreNotFound**: `boolean`

Specifies whether to ignore errors if the specified Object does not exist. If set to `true`, no error will be raised if the Object is not found. By default, this property is set to `false`.

#### Defined in

[client.ts:36](https://github.com/replit/replit-storage-typescript/blob/85f2df0/src/client.ts#L36)

This interface defines the configuration options that can be provided when deleting an Object from Object Storage. The `ignoreNotFound` property specifies whether to ignore errors if the specified Object does not exist. By default, the value is `false`, meaning an error will be raised if the Object is not found.


# Interface- DownloadOptions
Source: https://docs.replit.com/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces/download-options

Configuration options for downloading an Object.

## Properties

### decompress

• `Optional` **decompress**: `boolean`

Specifies whether the Object should be decompressed if it was uploaded using the compress flag. By default, this property is set to true, indicating that the Object should be decompressed during download.

#### Defined in

[client.ts:48](https://github.com/replit/replit-storage-typescript/blob/85f2df0/src/client.ts#L48)

This interface defines the configuration options that can be provided when downloading an Object from Object Storage. The `decompress` property specifies whether the Object should be decompressed if it was uploaded with compression enabled. By default, the value is true, meaning that the Object will be decompressed during download.


# Interface- ErrResult{"<"}E, ErrorExtras>
Source: https://docs.replit.com/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces/err-result

Interface representing a failed operation result, containing error details and metadata for TypeScript error handling in Replit's object storage.

Represents a failure result.

## Type parameters

| Name          | Type      | Description                                                       |
| :------------ | :-------- | :---------------------------------------------------------------- |
| `E`           | `E`       | The type of the error.                                            |
| `ErrorExtras` | `unknown` | The type of any additional information on the error, if provided. |

## Properties

### error

• **error**: `E`

The error that occurred.

#### Defined in

[result.ts:48](https://github.com/replit/replit-storage-typescript/blob/85f2df0/src/result.ts#L48)

***

### errorExtras

• `Optional` **errorExtras**: `ErrorExtras`

Additional information on the error, if applicable.

#### Defined in

[result.ts:56](https://github.com/replit/replit-storage-typescript/blob/85f2df0/src/result.ts#L56)

***

### ok

• **ok**: `false`

Indicates that the request was unsuccessful.

#### Defined in

[result.ts:44](https://github.com/replit/replit-storage-typescript/blob/85f2df0/src/result.ts#L44)

***

### value

• `Optional` **value**: `undefined`

Always undefined when the request was successful.

#### Defined in

[result.ts:52](https://github.com/replit/replit-storage-typescript/blob/85f2df0/src/result.ts#L52)

This interface represents a result Object indicating a failed operation. It contains information about the error that occurred (`error`), any additional details related to the error (`errorExtras`), and a flag indicating that the request was unsuccessful (`ok`). The `value` property is always `undefined` in case of a failure.


# Interface- ListOptions
Source: https://docs.replit.com/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces/list-options

Configuration options for listing Objects in a Bucket.

## Properties

### endOffset

• `Optional` **endOffset**: `string`

Filter results to Objects whose names are lexicographically before `endOffset`. If `startOffset` is also set, the objects listed have names between `startOffset` (inclusive) and `endOffset` (exclusive).

#### Defined in

[client.ts:61](https://github.com/replit/replit-storage-typescript/blob/85f2df0/src/client.ts#L61)

***

### matchGlob

• `Optional` **matchGlob**: `string`

Glob pattern used to filter results, for example `foo*bar`.

#### Defined in

[client.ts:65](https://github.com/replit/replit-storage-typescript/blob/85f2df0/src/client.ts#L65)

***

### maxResults

• `Optional` **maxResults**: `number`

The maximum number of results that can be returned in the response.

#### Defined in

[client.ts:69](https://github.com/replit/replit-storage-typescript/blob/85f2df0/src/client.ts#L69)

***

### prefix

• `Optional` **prefix**: `string`

Filter results to objects who names have the specified `prefix`.

#### Defined in

[client.ts:73](https://github.com/replit/replit-storage-typescript/blob/85f2df0/src/client.ts#L73)

***

### startOffset

• `Optional` **startOffset**: `string`

Filter results to objects whose names are lexicographically equal to or after startOffset. If endOffset is also set, the objects listed have names between `startOffset` (inclusive) and `endOffset` (exclusive).

#### Defined in

[client.ts:79](https://github.com/replit/replit-storage-typescript/blob/85f2df0/src/client.ts#L79)

This interface defines configuration options for listing objects in a Bucket. It includes properties such as `endOffset`, `matchGlob`, `maxResults`, `prefix`, and `startOffset`, each with its description and defined location in the source code.


# Interface- OkResult{"<"}T\>
Source: https://docs.replit.com/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces/ok-result

Represents a successful result.

## Type parameters

| Name | Description                     |
| :--- | :------------------------------ |
| `T`  | The type of the result's value. |

## Properties

### error

• `Optional` **error**: `undefined`

Always undefined when the request was successful.

#### Defined in

[result.ts:31](https://github.com/replit/replit-storage-typescript/blob/85f2df0/src/result.ts#L31)

***

### ok

• **ok**: `true`

Indicates that the request was successful.

#### Defined in

[result.ts:23](https://github.com/replit/replit-storage-typescript/blob/85f2df0/src/result.ts#L23)

***

### value

• **value**: `T`

The value returned by the request.

#### Defined in

[result.ts:27](https://github.com/replit/replit-storage-typescript/blob/85f2df0/src/result.ts#L27)

This interface represents a successful result, containing information about the success status (`ok`), the returned value (`value`), and an optional error property, which is always `undefined` in case of success.


# Interface- RequestError
Source: https://docs.replit.com/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces/request-error

An Object that represents an error with a request.

## Properties

### message

• **message**: `string`

Represents the error message associated with the request error.

#### Defined in

[index.ts:27](https://github.com/replit/replit-storage-typescript/blob/85f2df0/src/index.ts#L27)

***

### statusCode

• `Optional` **statusCode**: `number`

Represents the status code associated with the request error.

#### Defined in

[index.ts:28](https://github.com/replit/replit-storage-typescript/blob/85f2df0/src/index.ts#L28)


# Interface- StorageObject
Source: https://docs.replit.com/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces/storage-object

Metadata for an Object.

## Properties

### name

• **name**: `string`

The name of the Object, including its full path.

#### Defined in

[index.ts:19](https://github.com/replit/replit-storage-typescript/blob/85f2df0/src/index.ts#L19)

This interface represents metadata for an Object, providing information about the Object's name, including its full path.


# Interface- UploadOptions
Source: https://docs.replit.com/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces/upload-options

Configuration options for uploading objects to Replit Object Storage, including compression settings to reduce storage costs while maintaining data integrity.

Configuration options for uploading an Object.

## Properties

### compress

• `Optional` **compress**: `boolean`

Specifies whether the Object should be compressed upon receipt of data. Enabling compression reduces at-rest storage cost but does not impact data transfer. By default, this property is set to `true`.

#### Defined in

[client.ts:92](https://github.com/replit/replit-storage-typescript/blob/85f2df0/src/client.ts#L92)

This interface defines configuration options for uploading an Object to Object Storage. The `compress` property specifies whether the Object should be compressed upon receipt of data. Enabling compression reduces at-rest storage cost, with the default behavior set to compress the Object (`true`).


# Storage Modules
Source: https://docs.replit.com/cloud-services/storage-and-databases/object-storage/typescript-api-reference/modules

Reference documentation for the Object Storage TypeScript API, including classes, interfaces, and type aliases for managing objects in Replit's storage service.

## Classes

* [Client](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/classes#class-client)

  This class represents a client for interacting with Object Storage. It provides methods for uploading, downloading, listing, and deleting objects in the storage bucket.
* [StreamRequestError](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/classes)

  Represents an error that occurs during a streaming request.

## Interfaces

* [ClientOptions](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces)

  Interface defining options for configuring the Object Storage client.
* [DeleteOptions](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces)

  Interface defining options for deleting an Object from Object Storage.
* [DownloadOptions](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces)

  Interface defining options for downloading an Object from Object Storage.
* [ErrResult](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces)

  Interface representing the result of an operation that encountered an error. It includes information about the error and any additional error details.
* [ListOptions](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces)

  Interface defining options for listing Objects in Object Storage.
* [OkResult](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces)

  Interface representing the result of a successful operation. It includes the value returned by the operation.
* [RequestError](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces)

  Interface defining the structure of a request error, including the error message and status code.
* [StorageObject](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces)

  Interface representing an Object stored in Object Storage. It includes metadata about the Object, such as its name and content type.
* [UploadOptions](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces)

  Interface defining options for uploading an Object to Object Storage.

## Type Aliases

### Result

A result type can be used to represent a successful value or an error. It forces the consumer to check whether the returned type is an error or not, `result.ok` acts as a discriminant between success and failure.

Ƭ **Result**{"<"}`T`, `E`, `ErrorExtras`>: [`OkResult`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces){"<"}`T`> | [`ErrResult`](/cloud-services/storage-and-databases/object-storage/typescript-api-reference/interfaces){"<"}`E`, `ErrorExtras`>

#### Type parameters

| Name          | Type                | Description                                                  |
| :------------ | :------------------ | :----------------------------------------------------------- |
| `T`           | `T`                 | The type of the result's value.                              |
| `E`           | `Error` \| `string` | The type of the result's error.                              |
| `ErrorExtras` | `unknown`           | The type of additional error info, if any, will be returned. |

#### Defined in

[result.ts:10](https://github.com/replit/replit-storage-typescript/blob/85f2df0/src/result.ts#L10)

This indicates the file and line number where the `Result` type is defined within the source code of the `@replit/object-storage` package.


# Key-Value Store
Source: https://docs.replit.com/cloud-services/storage-and-databases/replit-database

Learn how to use Replit's built-in key-value database to store and manage data in your Replit Apps. No configuration required - just import and start coding.

## What is the Relpit Key-Value Store?

Replit Key-Value Store is a simple, user-friendly key-value store inside of every Replit App. No configuration is required; you can get started right away!

Here's a short video on how to use the Replit database, or read the text explanation below.

<Frame>
  <iframe width="100%" height="400px" src="https://www.youtube.com/embed/Vx5Ci77K-ss" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen />
</Frame>

## Using Replit Key-Value Store

Every Replit App can access and interact with its own unique Replit Key-Value Store. This database can be accessed from the library, and requires no configuration beyond import. Interacting with the Replit Key-Value Store follows much of the same syntax and logic as creating and interacting with the key-value pairs of a Python dictionary.

### Importing the database

To access the Replit database we use `import db`:

```python
from replit import db
```

<Note>
  If you run into errors during deployment, make sure you're using `replit` version 3.3.0 or above. For a Python Replit App, you can see what version you're using by running `pip show replit`. To upgrade, run `upm add 'replit>=3.3.0'`.
</Note>

### Creating data

The Replit Key-Value Store works a lot like a Python dictionary, so we can add data to our database by assigning values to keys using square bracket indexing:

```python
from replit import db

# Add a key and associated value to the database
db["key1"] = "value1"
```

Replit Key-Value Store is able to handle different types of values like lists, dictionaries, integers, floats, NoneType, and strings:

```python
from replit import db

db["key1"] = "value1"
db["integer_1"] = 100
db["float_1"] = 9.99
db["my_list"] = [1,2,3]
db["my_dictionary"] = {"key_a": "value_a", "key_b": "value_b"}
db["none_key"] = None
```

Make use of 2D lists as a value to create table-like structures within your database:

```python
from replit import db

db["2D_key"] = [["id","name"],[1,"James"],[2,"Angel"]]

for column in db["2D_key"]:
    print(column)
```

**Output:**

```
ObservedList(value=["id","name"])
ObservedList(value=[1,"James"])
ObservedList(value=[2,"Angel"])
```

The `ObservedList` object you see in the output is a Replit Key-Value Store object that acts like a Python list and can be indexed as such.

### Reading data

Read from your database by referencing the key of the value:

```python
from replit import db

# Create data in the database
db["key1"] = "value1"
db["my_list"] = [1,2,3]
db["my_dictionary"] = {"key_a": "value_a", "key_b": "value_b"}

# Access and print data from the database
print(db["key1"])
print(db["my_list"][0])
print(db["my_dictionary"]["key_a"])
```

**Output:**

```
value1
1
value_a
```

We can use the built-in Python dictionary method `.get()` to retrieve the value at the key passed in as an argument:

```python
from replit import db

# Create data for the database
db["float_1"] = 9.99

# Access the value of the data created by its key
print(db.get("float_1"))
```

We can loop through the keys stored in the database to get access to the values of those keys:

```python
from replit import db

# Create data for the database
db["key1"] = "value1"
db["my_list"] = [1,2,3]
db["my_dictionary"] = {"key_a": "value_a", "key_b": "value_b"}

# Access the keys from the database and print the values associated for key in db
  print(db.get(key))
```

The `.keys()` method returns a list of the keys in our database:

```python
from replit import db

# Create data for the database
db["key1"] = "value1"
db["my_list"] = [1,2,3]
db["my_dictionary"] = {"key_a": "value_a", "key_b": "value_b"}

# Print all the keys from the database
print(db.keys())
```

**Output:**

```
{'key1', 'my_list', 'my_dictionary', '2D_keys'}
```

The `.prefix()` method allows us to get the values of keys with only part of that key. This allows us to return multiple values for keys that share the same prefix:

```python
from replit import db

# Create data for the database
db["key1"] = "value1"
db["my_list"] = [1,2,3]
db["my_dictionary"] = {"key_a": "value_a", "key_b": "value_b"}

# Print all the keys from the database that have a prefix of "my"
print(db.prefix("my"))
```

**Output:**

```
('my_dictionary', 'my_list')
```

### Updating data

We can update values that are stored in our database by assigning new values to their associated key:

```python
from replit import db

# Create data with "float_1" as key and print
db["float_1"] = 9.99
print(db[“float_1”])

# Update data at "float_1" key and print
db[“float_1”] = 3.33
print(db[“float_1”])
```

**Output:**

```
9.99
3.33
```

We can also mutate numbers that are stored in our database:

```python
from replit import db

# Create data with "float_1" as key and print
db["float_1"] = 9.99

# Perform an operation on the data
db["float_1"] += 0.01

# Print result of operation
print(db["float_1"])
```

**Output:**

```
10.0
```

### Deleting data

We make use of the `del` keyword and square bracket indexing to delete key-value pairings from our database:

```python
from replit import db

# Create data for the database
db["float_1"] = 9.99

# Delete the data we added at the key "float_1"
del db["float_1"]
if "float_1" not in db:
	print("Value deleted successfully.")
```

**Output:**

```
Value deleted successfully.
```

### Summary

Overall, the Replit Key-Value Store is a simple and useful database that allows us to easily and dynamically update our data. The features resembling the Python dictionary mean we can use the built-in Python dictionary functions to interact with our database.

## FAQs

### Where can I find my store?

When viewing your Replit App, you'll find the Replit Key-Value Store icon toward the bottom of the sidebar – it's the second last icon. That’s Replit’s key-value database, built right into your Replit App!

### How can I access my store?

To access the Replit Key-Value Store, you can use a library or simple curl commands.

Replit provides official clients. Use one of these clients if your Replit App is in one of these languages:

* [Python](https://pypi.org/project/replit/)
* [Node.js](https://www.npmjs.com/package/@replit/database)
* [Go](https://github.com/replit/database-go)

### How do I use my store?

When you click on the Replit Key-Value Store icon in the sidebar, you'll see some instructions. If your Replit App is in a language that has an official Replit Key-Value Store client, you can quickly import it and start using Replit Key-Value Store by clicking on the "Insert" buttons.

If your language does not have a client, we provide some usage examples below. They are found below, and are a useful reference if you wish to write your own Replit Key-Value Store client.

**Set**

```
curl $REPLIT_DB_URL -d '<key>=<value>'
```

If your key and value don't use any unsafe characters, you can use
an alternative version:

```
curl -XPOST $REPLIT_DB_URL/<key>=<value>
```

**Get**

```
curl $REPLIT_DB_URL/<key>
```

**Delete**

```
curl -XDELETE $REPLIT_DB_URL/<key>
```

`Delete` returns status code 204 if the key was deleted or 404 if the key did not exist.

**List**

```
curl $REPLIT_DB_URL --get -d 'prefix=<key>'
```

or

```
curl "$REPLIT_DB_URL?prefix=<key>"
```

The returned keys will be separated by newlines.

Listing also takes a query parameter: `encode=true`. If set, the returned keys will be URL encoded. This lets you safely handle keys that contain newlines.

### What is REPLIT\_DB\_URL?

This is the environment variable we have created with your Replit App. It is the key that will allow you to access your database.

The clients listed above take care of using `REPLIT_DB_URL` for you, but you will need it if you want to write your own client or use a database from a language that doesn't yet have a client. Here are two examples:

Python:

```
import os
print(os.getenv("REPLIT_DB_URL"))
```

Node.js:

```
console.log(process.env.REPLIT_DB_URL)
```

`REPLIT_DB_URL` provides full access to your database. Therefore, you should take care not to expose it to the world or share it with people you don't trust.

The value of `REPLIT_DB_URL` changes from time to time, so we recommend that you don't copy it elsewhere. Subsequent reads by the same process will see the same value. We will restart your Replit App if we need to change it after it has been read.

Note: `REPLIT_DB_URL` is not available in Deployments. Instead, the value of the URL is stored in `/tmp/replitdb`. If you are writing a client for Replit Key-Value Store, read the value from `/tmp/replitdb` first, and fall back to the environment variable if that file does not exist.

### What limits does Replit Key-Value Store have?

The limits are currently:

* 50 MiB per store (sum of keys and values)
* 5,000 keys per store
* 1000 bytes per key
* 5 MiB per value

There are rate limits that apply to all operations. You will receive an HTTP 429 if you exceed them. We recommend implementing an exponential backoff and retry to handle this case.

### How can I tell how much storage I'm using?

The Replit Key-Value Store pane tool in the sidebar shows you the number of keys in your store along with
the total storage occupied by your keys and values.

### Is my store private?

Yes, each store is private and isolated. Every Replit App has its own database, and they are not shared among Replit App.

### How do I share a store across Replit App?

The easiest way to do this is to use one Replit App as the primary store and have other Replit App connect to it via web hosting. [Here’s an example Replit App in Python](https://replit.com/@util/Replit-Database-proxy).

Any requests sent to the above Replit App will operate on its store, so sending
requests to it from other Replit App means that they all share the same information.


# Database
Source: https://docs.replit.com/cloud-services/storage-and-databases/sql-database

Database is a Replit workspace tool that lets you set up a database for your apps to store and query your data.

Replit Database uses a fully-managed, serverless SQL database that lets you add persistent data storage to your Replit App
from the workspace. This serverless database implementation lets you pay only for what you use, making it ideal for projects
of any size.

<Info>
  Replit Database uses PostgresSQL 15 hosted on <a href="https://neon.tech" target="_blank">Neon</a>.
</Info>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/databases/database-editor.jpg" alt="screenshot of the database editor" />
</Frame>

## Features

The Replit Database tool provides the following features:

* **Instant setup**: Add a production-ready SQL database with a single click
* **Database tools**: Run queries, manage database schema, and visualize data with the built-in SQL tools
* **Point-in-time restore**: Restore your database to a specific point in time within your specified retention period
* **Usage-based billing**: Pay only for the storage and data transfer you use
* **Environment variables**: Use environment variables in your Replit App to securely access the database

## Usage

You can access the Database tool directly in your Replit App workspace.
The following sections guide you through setting up and managing your database.

<Accordion title="How to access the Database tool">
  From the left **Tool dock**:

  1. Select <img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/shared/workspace-all-tools-button.svg" alt="All tools icon" /> **All tools** to see a list of workspace tools.
  2. Select <img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/databases/postgres.svg" alt="PostgresSQL database icon" /> **Database**.

  From the **Search bar**:

  1. Select the <img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/shared/workspace-search-icon.svg" alt="magnifying glass icon" /> magnifying glass at the top to open the search tool
  2. Type "Database" to locate the tool and select it from the results.
</Accordion>

### Add a database

Use one of the following methods to add a Replit database integration to your Replit App:

* Ask **Agent** to add a PostgresSQL database to your Replit App, including details on what
  data your Replit App should store. Agent adds the integration, creates the database schema,
  and updates the app to communicate with the database.

* From the **Database** tool, select **Create a database**. When using this method, you
  must create the tables and update your app to connect to the database.

  <Frame>
    <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/databases/create-database.png" alt="screenshot of the create database screen" />
  </Frame>

### Run database commands

The SQL runner is a workspace tool that lets you run SQL commands on your database and view the results.

<Accordion title="How to access SQL runner">
  From the **Database** tool:

  1. Select the **My Data** tab
  2. Select <img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/databases/sql-runner-icon.svg" alt="SQL runner icon" /> **SQL runner**
</Accordion>

To run a query, enter the SQL statement in the text area and select the
adjacent <img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/databases/sql-play.svg" alt="sql run icon" /> run button
as shown below:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/databases/sql-runner-run.png" alt="screenshot of the SQL runner and run button" />
</Frame>

### Browse and modify data visually

The Replit Database tool includes <a href="https://orm.drizzle.team/drizzle-studio/overview" target="_blank">Drizzle Studio</a>,
a tool that lets you browse and modify data visually.

These visual tools help you avoid syntax errors and offer the following functionality:

* Filter and sort data to focus on specific information
* Export data to a files for external use
* Insert or modify row data
* Create and manage schema, tables, views, and enums

You can access these tools in the **My Data** tab in the **Database** tool.

The following image shows a view from the Drizzle Studio user interface:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/databases/table-structure-editor.png" alt="image of the table structure editor" />
</Frame>

<Tip>
  You can connect to your database using any PostgresSQL-compatible SQL client using the connection string
  found in your [environment variables](#environment-variables).
</Tip>

### View database connection credentials

When you add a database, the Database tool automatically saves your connection credentials
as environment variables in your Replit App. Your app uses the credentials to securely
connect to the database and run commands.

<Accordion title="How to access your database connection credentials">
  1. Navigate to the <img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/databases/postgres.svg" alt="PostgresSQL database icon" /> **Database** tool in your workspace
  2. Select the <img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/databases/angled-brackets.svg" alt="angled brackets icon" /> **Commands** tab and scroll to the **Environment variables** section
</Accordion>

The list includes the following environment variables, which you can reference from your Replit App's code:

* `DATABASE_URL`: Database connection string which contains all details for a secure connection
* `PGHOST`: Database hostname
* `PGUSER`: Database username
* `PGPASSWORD`: Database password

To learn how to use these credentials in your code, see [Connect your app to a SQL database](/getting-started/quickstarts/database-connection/).

### Restore tool

The Restore tool lets you revert your database to a specific point in time.
To activate this tool, you must select a retention period in the **History Retention** option.
You can then restore from any point within that period.

Common uses for the Restore tool include the following:

* Recovering from accidental data deletion or corruption
* Reverting to a previous state for testing or debugging
* Reviewing historical data from a specific point in time

<Accordion title="How to access the Restore tool and History Retention setting">
  1. Navigate to the <img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/databases/postgres.svg" alt="PostgresSQL database icon" /> **Database** tool in your workspace
  2. Select the <img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/shared/settings-icon.svg" alt="gear icon" /> **Settings** tab and scroll to the **Restore** and **History Retention** sections
</Accordion>

To restore your database to a specific time, follow the steps below:

1. Enter the target date and time in the **Timestamp** field
2. Select **Restore**. Select **Continue** to proceed in the confirmation dialog.

### Remove tool

<Warning>
  The remove action is irreversible. Make sure to back up any important data before proceeding.
</Warning>

If you no longer need a database for your Replit App, you can remove it and all its data.

<Accordion title="How to remove a database">
  From the **Database** tool:

  1. Select the<img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/shared/settings-icon.svg" alt="gear icon" /> **Settings** tab
  2. Select **Remove database** and confirm by selecting **Yes, Remove Database**
</Accordion>

### Billing and resource usage

Replit optimizes your cost savings for database usage by using Neon, a serverless database provider.

Neon's serverless capabilities include the following:

* Zero infrastructure setup or maintenance
* Automatic scaling to handle your usage needs
* Compute time billing only when the database is active

The database enters an idle state after five minutes of inactivity, pausing compute time billing.
It instantly reactivates when it receives a query.

<Tip>
  To learn more about this serverless database technology, see the
  <a href="https://neon.tech/docs/introduction/compute-lifecycle" target="_blank">Neon Compute lifecycle</a> documentation.
</Tip>

Replit provides real-time tracking of your database usage.
You can view the breakdown of compute time and storage usage for the current Replit App
or for each Replit App on your account.

<Accordion title="How to access database usage">
  To view your database compute time and storage usage for the current billing period, follow the steps below:

  From the **Database** tool:

  1. Navigate to the <img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/databases/postgres.svg" alt="PostgresSQL database icon" /> **Database** tool in your workspace
  2. Select the<img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/shared/settings-icon.svg" alt="gear icon" /> **Settings** tab
  3. Scroll to the **Account resource usage** section to view a usage summary

  To view for every Replit App on your account from the **Account resource usage** section, follow the steps below:

  1. Select **View account resource limits** to open the **Usage** page
  2. Scroll to **Resource usage** section
  3. Expand the **PostgresSQL Storage** and **PostgresSQL Compute** rows for details on each Replit App
</Accordion>

To learn how Replit charges for database usage, see [Deployments and Database Billing](/billing/about-usage-based-billing#databases).

### Security features

When you add a database integration using **Agent**, it adds an Object-Relational Mapper (ORM)
that handles all  database communications with built-in security.

This ORM layer, combined with Agent's security best practice implementation, protects your app from
exploits through the following features:

* **Schema validation**: Verifies data conforms to expected formats
* **Data sanitization**: Automatically cleans up user input to prevent SQL injection attacks


# Development
Source: https://docs.replit.com/development

Preview changes locally to update your docs

<Info>
  **Prerequisite**: Please install Node.js (version 19 or higher) before proceeding.
</Info>

Follow these steps to install and run Mintlify on your operating system:

**Step 1**: Install Mintlify:

<CodeGroup>
  ```bash npm
  npm i -g mintlify
  ```

  ```bash yarn
  yarn global add mintlify
  ```
</CodeGroup>

**Step 2**: Navigate to the docs directory (where the `mint.json` file is located) and execute the following command:

```bash
mintlify dev
```

A local preview of your documentation will be available at `http://localhost:3000`.

### Custom Ports

By default, Mintlify uses port 3000. You can customize the port Mintlify runs on by using the `--port` flag. To run Mintlify on port 3333, for instance, use this command:

```bash
mintlify dev --port 3333
```

If you attempt to run Mintlify on a port that's already in use, it will use the next available port:

```md
Port 3000 is already in use. Trying 3001 instead.
```

## Mintlify Versions

Please note that each CLI release is associated with a specific version of Mintlify. If your local website doesn't align with the production version, please update the CLI:

<CodeGroup>
  ```bash npm
  npm i -g mintlify@latest
  ```

  ```bash yarn
  yarn global upgrade mintlify
  ```
</CodeGroup>

## Validating Links

The CLI can assist with validating reference links made in your documentation. To identify any broken links, use the following command:

```bash
mintlify broken-links
```

## Deployment

<Tip>
  Unlimited editors available under the [Pro
  Plan](https://mintlify.com/pricing) and above.
</Tip>

If the deployment is successful, you should see the following:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/checks-passed.png" style={{ borderRadius: '0.5rem' }} />
</Frame>

## Code Formatting

We suggest using extensions on your IDE to recognize and format MDX. If you're a VSCode user, consider the [MDX VSCode extension](https://marketplace.visualstudio.com/items?itemName=unifiedjs.vscode-mdx) for syntax highlighting, and [Prettier](https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode) for code formatting.

## Troubleshooting

<AccordionGroup>
  <Accordion title="Error: Could not load the &#x22;sharp&#x22; module using the darwin-arm64 runtime">
    This may be due to an outdated version of node. Try the following:

    1.  Remove the currently-installed version of mintlify: `npm remove -g mintlify`
    2.  Upgrade to Node v19 or higher.
    3.  Reinstall mintlify: `npm install -g mintlify`
  </Accordion>

  <Accordion title="Issue: Encountering an unknown error">
    Solution: Go to the root of your device and delete the \~/.mintlify folder. Afterwards, run `mintlify dev` again.
  </Accordion>
</AccordionGroup>

Curious about what changed in the CLI version? [Check out the CLI changelog.](https://www.npmjs.com/package/mintlify?activeTab=versions)


# Code Blocks
Source: https://docs.replit.com/essentials/code

Display inline code and code blocks

## Basic

### Inline Code

To denote a `word` or `phrase` as code, enclose it in backticks (\`).

```
To denote a `word` or `phrase` as code, enclose it in backticks (`).
```

### Code Block

Use [fenced code blocks](https://www.markdownguide.org/extended-syntax/#fenced-code-blocks) by enclosing code in three backticks and follow the leading ticks with the programming language of your snippet to get syntax highlighting. Optionally, you can also write the name of your code after the programming language.

```java HelloWorld.java
class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}
```

````md
```java HelloWorld.java
class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}
```
````


# Images and Embeds
Source: https://docs.replit.com/essentials/images

Add image, video, and other HTML elements

<img style={{ borderRadius: '0.5rem' }} src="https://mintlify-assets.b-cdn.net/bigbend.jpg" />

## Image

### Using Markdown

The [markdown syntax](https://www.markdownguide.org/basic-syntax/#images) lets you add images using the following code

```md
![title](/path/image.jpg)
```

Note that the image file size must be less than 5MB. Otherwise, we recommend hosting on a service like [Cloudinary](https://cloudinary.com/) or [S3](https://aws.amazon.com/s3/). You can then use that URL and embed.

### Using Embeds

To get more customizability with images, you can also use [embeds](/writing-content/embed) to add images

```html
<img height="200" src="/path/image.jpg" />
```

## Embeds and HTML elements

<iframe width="560" height="315" src="https://www.youtube.com/embed/4KzFe50RQkQ" title="YouTube video player" frameBorder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowFullScreen style={{ width: '100%', borderRadius: '0.5rem' }} />

<br />

<Tip>
  Mintlify supports [HTML tags in Markdown](https://www.markdownguide.org/basic-syntax/#html). This is helpful if you prefer HTML tags to Markdown syntax, and lets you create documentation with infinite flexibility.
</Tip>

### iFrames

Loads another HTML page within the document. Most commonly used for embedding videos.

```html
<iframe src="https://www.youtube.com/embed/4KzFe50RQkQ"> </iframe>
```


# Markdown Syntax
Source: https://docs.replit.com/essentials/markdown

Text, title, and styling in standard markdown

## Titles

Best used for section headers.

```md
## Titles
```

### Subtitles

Best use to subsection headers.

```md
### Subtitles
```

<Tip>
  Each **title** and **subtitle** creates an anchor and also shows up on the table of contents on the right.
</Tip>

## Text Formatting

We support most markdown formatting. Simply add `**`, `_`, or `~` around text to format it.

| Style         | How to write it   | Result            |
| ------------- | ----------------- | ----------------- |
| Bold          | `**bold**`        | **bold**          |
| Italic        | `_italic_`        | *italic*          |
| Strikethrough | `~strikethrough~` | ~~strikethrough~~ |

You can combine these. For example, write `**_bold and italic_**` to get ***bold and italic*** text.

You need to use HTML to write superscript and subscript text. That is, add `<sup>` or `<sub>` around your text.

| Text Size   | How to write it          | Result                 |
| ----------- | ------------------------ | ---------------------- |
| Superscript | `<sup>superscript</sup>` | <sup>superscript</sup> |
| Subscript   | `<sub>subscript</sub>`   | <sub>subscript</sub>   |

## Linking to Pages

You can add a link by wrapping text in `[]()`. You would write `[link to google](https://google.com)` to [link to google](https://google.com).

Links to pages in your docs need to be root-relative. Basically, you should include the entire folder path. For example, `[link to text](/writing-content/text)` links to the page "Text" in our components section.

Relative links like `[link to text](../text)` will open slower because we cannot optimize them as easily.

## Blockquotes

### Singleline

To create a blockquote, add a `>` in front of a paragraph.

> Dorothy followed her through many of the beautiful rooms in her castle.

```md
> Dorothy followed her through many of the beautiful rooms in her castle.
```

### Multiline

> Dorothy followed her through many of the beautiful rooms in her castle.
>
> The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.

```md
> Dorothy followed her through many of the beautiful rooms in her castle.
>
> The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.
```

### LaTeX

Mintlify supports [LaTeX](https://www.latex-project.org) through the Latex component.

<Latex>8 x (vk x H1 - H2) = (0,1)</Latex>

```md
<Latex>8 x (vk x H1 - H2) = (0,1)</Latex>
```


# Navigation
Source: https://docs.replit.com/essentials/navigation

The navigation field in mint.json defines the pages that go in the navigation menu

The navigation menu is the list of links on every website.

You will likely update `mint.json` every time you add a new page. Pages do not show up automatically.

## Navigation syntax

Our navigation syntax is recursive which means you can make nested navigation groups. You don't need to include `.mdx` in page names.

<CodeGroup>
  ```json Regular Navigation
  "navigation": [
      {
          "group": "Getting Started",
          "pages": ["quickstart"]
      }
  ]
  ```

  ```json Nested Navigation
  "navigation": [
      {
          "group": "Getting Started",
          "pages": [
              "quickstart",
              {
                  "group": "Nested Reference Pages",
                  "pages": ["nested-reference-page"]
              }
          ]
      }
  ]
  ```
</CodeGroup>

## Folders

Simply put your MDX files in folders and update the paths in `mint.json`.

For example, to have a page at `https://yoursite.com/your-folder/your-page` you would make a folder called `your-folder` containing an MDX file called `your-page.mdx`.

<Warning>
  You cannot use `api` for the name of a folder unless you nest it inside another folder. Mintlify uses Next.js which reserves the top-level `api` folder for internal server calls. A folder name such as `api-reference` would be accepted.
</Warning>

```json Navigation With Folder
"navigation": [
    {
        "group": "Group Name",
        "pages": ["your-folder/your-page"]
    }
]
```

## Hidden Pages

MDX files not included in `mint.json` will not show up in the sidebar but are accessible through the search bar and by linking directly to them.


# Reusable Snippets
Source: https://docs.replit.com/essentials/reusable-snippets

Reusable, custom snippets to keep content in sync

One of the core principles of software development is DRY (Don't Repeat
Yourself). This is a principle that apply to documentation as
well. If you find yourself repeating the same content in multiple places, you
should consider creating a custom snippet to keep your content in sync.

## Creating a custom snippet

**Pre-condition**: You must create your snippet file in the `snippets` directory.

<Note>
  Any page in the `snippets` directory will be treated as a snippet and will not
  be rendered into a standalone page. If you want to create a standalone page
  from the snippet, import the snippet into another file and call it as a
  component.
</Note>

### Default export

1.  Add content to your snippet file that you want to re-use across multiple
    locations. Optionally, you can add variables that can be filled in via props
    when you import the snippet.

```mdx snippets/my-snippet.mdx
Hello world! This is my content I want to reuse across pages. My keyword of the
day is {word}.
```

<Warning>
  The content that you want to reuse must be inside the `snippets` directory in
  order for the import to work.
</Warning>

2.  Import the snippet into your destination file.

```mdx destination-file.mdx
---
title: My title
description: My Description
---

import MySnippet from '/snippets/path/to/my-snippet.mdx';

## Header

Lorem impsum dolor sit amet.

<MySnippet word="bananas" />
```

### Reusable variables

1.  Export a variable from your snippet file:

```mdx snippets/path/to/custom-variables.mdx
export const myName = 'my name';

export const myObject = { fruit: 'strawberries' };
```

2.  Import the snippet from your destination file and use the variable:

```mdx destination-file.mdx
---
title: My title
description: My Description
---

import { myName, myObject } from '/snippets/path/to/custom-variables.mdx';

Hello, my name is {myName} and I like {myObject.fruit}.
```

### Reusable components

1.  Inside your snippet file, create a component that takes in props by exporting
    your component in the form of an arrow function.

```mdx snippets/custom-component.mdx
export const MyComponent = ({ title }) => (
  <div>
    <h1>{title}</h1>
    <p>... snippet content ...</p>
  </div>
);
```

<Warning>
  MDX does not compile inside the body of an arrow function. Stick to HTML
  syntax when you can or use a default export if you need to use MDX.
</Warning>

2.  Import the snippet into your destination file and pass in the props

```mdx destination-file.mdx
---
title: My title
description: My Description
---

import { MyComponent } from '/snippets/custom-component.mdx';

Lorem ipsum dolor sit amet.

<MyComponent title={'Custom title'} />
```


# Global Settings
Source: https://docs.replit.com/essentials/settings

Mintlify gives you complete control over the look and feel of your documentation using the mint.json file

Every Mintlify site needs a `mint.json` file with the core configuration settings. Learn more about the [properties](#properties) below.

## Properties

<ResponseField name="name" type="string" required>
  Name of your project. Used for the global title.

  Example: `mintlify`
</ResponseField>

<ResponseField name="navigation" type="Navigation[]" required>
  An array of groups with all the pages within that group

  <Expandable title="Navigation">
    <ResponseField name="group" type="string">
      The name of the group.

      Example: `Settings`
    </ResponseField>

    <ResponseField name="pages" type="string[]">
      The relative paths to the markdown files that will serve as pages.

      Example: `["customization", "page"]`
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="logo" type="string or object">
  Path to logo image or object with path to "light" and "dark" mode logo images

  <Expandable title="Logo">
    <ResponseField name="light" type="string">
      Path to the logo in light mode
    </ResponseField>

    <ResponseField name="dark" type="string">
      Path to the logo in dark mode
    </ResponseField>

    <ResponseField name="href" type="string" default="/">
      Where clicking on the logo links you to
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="favicon" type="string">
  Path to the favicon image
</ResponseField>

<ResponseField name="colors" type="Colors">
  Hex color codes for your global theme

  <Expandable title="Colors">
    <ResponseField name="primary" type="string" required>
      The primary color. Used for most often for highlighted content, section
      headers, accents, in light mode
    </ResponseField>

    <ResponseField name="light" type="string">
      The primary color for dark mode. Used for most often for highlighted
      content, section headers, accents, in dark mode
    </ResponseField>

    <ResponseField name="dark" type="string">
      The primary color for important buttons
    </ResponseField>

    <ResponseField name="background" type="object">
      The color of the background in both light and dark mode

      <Expandable title="Object">
        <ResponseField name="light" type="string" required>
          The hex color code of the background in light mode
        </ResponseField>

        <ResponseField name="dark" type="string" required>
          The hex color code of the background in dark mode
        </ResponseField>
      </Expandable>
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="topbarLinks" type="TopbarLink[]">
  Array of `name`s and `url`s of links you want to include in the topbar

  <Expandable title="TopbarLink">
    <ResponseField name="name" type="string">
      The name of the button.

      Example: `Contact us`
    </ResponseField>

    <ResponseField name="url" type="string">
      The url once you click on the button. Example: `https://mintlify.com/docs`
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="topbarCtaButton" type="Call to Action">
  <Expandable title="Topbar Call to Action">
    <ResponseField name="type" type={'"link" or "github"'} default="link">
      Link shows a button. GitHub shows the repo information at the url provided including the number of GitHub stars.
    </ResponseField>

    <ResponseField name="url" type="string">
      If `link`: What the button links to.

      If `github`: Link to the repository to load GitHub information from.
    </ResponseField>

    <ResponseField name="name" type="string">
      Text inside the button. Only required if `type` is a `link`.
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="versions" type="string[]">
  Array of version names. Only use this if you want to show different versions
  of docs with a dropdown in the navigation bar.
</ResponseField>

<ResponseField name="anchors" type="Anchor[]">
  An array of the anchors, includes the `icon`, `color`, and `url`.

  <Expandable title="Anchor">
    <ResponseField name="icon" type="string">
      The [Font Awesome](https://fontawesome.com/search?q=heart) icon used to feature the anchor.

      Example: `comments`
    </ResponseField>

    <ResponseField name="name" type="string">
      The name of the anchor label.

      Example: `Community`
    </ResponseField>

    <ResponseField name="url" type="string">
      The start of the URL that marks what pages go in the anchor. Generally, this is the name of the folder you put your pages in.
    </ResponseField>

    <ResponseField name="color" type="string">
      The hex color of the anchor icon background. Can also be a gradient if you pass an object with the properties `from` and `to` that are each a hex color.
    </ResponseField>

    <ResponseField name="version" type="string">
      Used if you want to hide an anchor until the correct docs version is selected.
    </ResponseField>

    <ResponseField name="isDefaultHidden" type="boolean" default="false">
      Pass `true` if you want to hide the anchor until you directly link someone to docs inside it.
    </ResponseField>

    <ResponseField name="iconType" default="duotone" type="string">
      One of: "brands", "duotone", "light", "sharp-solid", "solid", or "thin"
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="topAnchor" type="Object">
  Override the default configurations for the top-most anchor.

  <Expandable title="Object">
    <ResponseField name="name" default="Documentation" type="string">
      The name of the top-most anchor
    </ResponseField>

    <ResponseField name="icon" default="book-open" type="string">
      Font Awesome icon.
    </ResponseField>

    <ResponseField name="iconType" default="duotone" type="string">
      One of: "brands", "duotone", "light", "sharp-solid", "solid", or "thin"
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="tabs" type="Tabs[]">
  An array of navigational tabs.

  <Expandable title="Tabs">
    <ResponseField name="name" type="string">
      The name of the tab label.
    </ResponseField>

    <ResponseField name="url" type="string">
      The start of the URL that marks what pages go in the tab. Generally, this
      is the name of the folder you put your pages in.
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="api" type="API">
  Configuration for API settings. Learn more about API pages at [API Components](/api-playground/demo).

  <Expandable title="API">
    <ResponseField name="baseUrl" type="string">
      The base url for all API endpoints. If `baseUrl` is an array, it will enable for multiple base url
      options that the user can toggle.
    </ResponseField>

    <ResponseField name="auth" type="Auth">
      <Expandable title="Auth">
        <ResponseField name="method" type="&#x22;bearer&#x22; | &#x22;basic&#x22; | &#x22;key&#x22;">
          The authentication strategy used for all API endpoints.
        </ResponseField>

        <ResponseField name="name" type="string">
          The name of the authentication parameter used in the API playground.

          If method is `basic`, the format should be `[usernameName]:[passwordName]`
        </ResponseField>

        <ResponseField name="inputPrefix" type="string">
          The default value that's designed to be a prefix for the authentication input field.

          E.g. If an `inputPrefix` of `AuthKey` would inherit the default input result of the authentication field as `AuthKey`.
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="playground" type="Playground">
      Configurations for the API playground

      <Expandable title="Playground">
        <ResponseField name="mode" default="show" type="&#x22;show&#x22; | &#x22;simple&#x22; | &#x22;hide&#x22;">
          Whether the playground is showing, hidden, or only displaying the endpoint with no added user interactivity `simple`

          Learn more at the [playground guides](/api-playground/demo)
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="maintainOrder" type="boolean">
      Enabling this flag ensures that key ordering in OpenAPI pages matches the key ordering defined in the OpenAPI file.

      <Warning>This behavior will soon be enabled by default, at which point this field will be deprecated.</Warning>
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="openapi" type="string | string[]">
  A string or an array of strings of URL(s) or relative path(s) pointing to your
  OpenAPI file.

  Examples:

  <CodeGroup>
    ```json Absolute
    "openapi": "https://example.com/openapi.json"
    ```

    ```json Relative
    "openapi": "/openapi.json"
    ```

    ```json Multiple
    "openapi": ["https://example.com/openapi1.json", "/openapi2.json", "/openapi3.json"]
    ```
  </CodeGroup>
</ResponseField>

<ResponseField name="footerSocials" type="FooterSocials">
  An object of social media accounts where the key:property pair represents the social media platform and the account url.

  Example:

  ```json
  {
    "x": "https://x.com/mintlify",
    "website": "https://mintlify.com"
  }
  ```

  <Expandable title="FooterSocials">
    <ResponseField name="[key]" type="string">
      One of the following values `website`, `facebook`, `x`, `discord`, `slack`, `github`, `linkedin`, `instagram`, `hacker-news`

      Example: `x`
    </ResponseField>

    <ResponseField name="property" type="string">
      The URL to the social platform.

      Example: `https://x.com/mintlify`
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="feedback" type="Feedback">
  Configurations to enable feedback buttons

  <Expandable title="Feedback">
    <ResponseField name="suggestEdit" type="boolean" default="false">
      Enables a button to allow users to suggest edits via pull requests
    </ResponseField>

    <ResponseField name="raiseIssue" type="boolean" default="false">
      Enables a button to allow users to raise an issue about the documentation
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="modeToggle" type="ModeToggle">
  Customize the dark mode toggle.

  <Expandable title="ModeToggle">
    <ResponseField name="default" type={'"light" or "dark"'}>
      Set if you always want to show light or dark mode for new users. When not
      set, we default to the same mode as the user's operating system.
    </ResponseField>

    <ResponseField name="isHidden" type="boolean" default="false">
      Set to true to hide the dark/light mode toggle. You can combine `isHidden` with `default` to force your docs to only use light or dark mode. For example:

      <CodeGroup>
        ```json Only Dark Mode
        "modeToggle": {
          "default": "dark",
          "isHidden": true
        }
        ```

        ```json Only Light Mode
        "modeToggle": {
          "default": "light",
          "isHidden": true
        }
        ```
      </CodeGroup>
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="backgroundImage" type="string">
  A background image to be displayed behind every page. See example with
  [Infisical](https://infisical.com/docs) and [FRPC](https://frpc.io).
</ResponseField>


# auth API
Source: https://docs.replit.com/extensions/api/auth

Learn how to authenticate users securely in your Replit extensions using the auth API module. Get and verify JWT tokens for user authentication.

# auth API <span className="deprecated-pill">experimental</span>

The `auth` api module allows you to securely authenticate a Replit user if they use your extension.

## Usage

```ts
import { experimental } from '@replit/extensions';
const { auth } = experimental;
```

## Methods

### `auth.getAuthToken`

Returns a unique JWT token that can be used to verify that an extension has been loaded on Replit by a particular user

```ts
getAuthToken(): Promise<string>
```

### `auth.verifyAuthToken`

Verifies a provided JWT token and returns the decoded token.

```ts
verifyAuthToken(token: string): Promise<{ payload: any, protectedHeader: any }>
```

### `auth.authenticate`

Performs authentication and returns the user and installation information

```ts
authenticate(): Promise<AuthenticateResult>
```

## Types

### AuthenticatedUser

| Property | Type     |
| -------- | -------- |
| id       | `number` |

### AuthenticateResult

| Property     | Type                                      |
| ------------ | ----------------------------------------- |
| installation | `AuthenticatedInstallation`               |
| user         | [`AuthenticatedUser`](#authenticateduser) |


# Background Script API
Source: https://docs.replit.com/extensions/api/background

Learn how to use background scripts to run persistent code in your Replit extension from startup until the workspace closes.

Background scripts are loaded when the Replit App opens. They remain permanently loaded until the extension is uninstalled or you close the workspace.

Background scripts are written in a "background page", which is an "invisible" iFrame context that renders no UI.

You can add a background page to your extension by adding the following field to your [Manifest](/extensions/api/manifest) file:

```json
{
  "background": {
    "page": "/path/to/background.html"
  }
}
```

The path points to a page in your extension bundle. We load it as an invisible iframe element; if you render any UI elements, they will not be visible to users. (To render UI, you want to create tools instead).

Here's an example extension that makes use of the background script:

<Card href="https://replit.com/@util/background-script-example#README.md" title="Background Script Example" description="A simple example of a background script." icon="paperclip" horizontal={true} />


# commands API
Source: https://docs.replit.com/extensions/api/commands

Register and manage custom commands for the Replit command bar and other extension points using the commands API module.

The `commands` api module allows you to register commands that can be run from the CLUI command bar and other contribution points.

## Usage

```ts
import { commands } from '@replit/extensions';
```

## Methods

### `commands.add`

Adds a command to the command system.

```ts
add(__namedParameters: AddCommandArgs): void
```

## Types

### ActionCommandArgs

```ts
undefined
```

### BaseCommandArgs

```ts
undefined
```

### CommandArgs

```ts
ActionCommandArgs | ContextCommandArgs
```

### CommandFnArgs

```ts
undefined
```

### CommandProxy

```ts
 |
```

### CommandsFn

```ts
(args: CommandFnArgs) => Promise
```

### ContextCommandArgs

```ts
undefined
```

### CreateCommand

```ts
(args: CommandFnArgs) => undefined
```

### Run

```ts
() => any
```

### SerializableValue

```ts
string | number | boolean |  | undefined |  |
```


# data API
Source: https://docs.replit.com/extensions/api/data

Access Replit's GraphQL API to retrieve user information, Replit App metadata, and other platform data through the Extensions API.

The data API allows you to get information and metadata exposed from Replit's GraphQL API.

## Usage

```ts
import { data } from '@replit/extensions';
```

## Methods

### `data.currentUser`

Fetches the current user via graphql

```ts
currentUser(args: CurrentUserDataInclusion): Promise<{ user: CurrentUser }>
```

### `data.userById`

Fetches a user by their id via graphql

```ts
userById(args: { id: number } & UserDataInclusion): Promise<{ user: User }>
```

### `data.userByUsername`

Fetches a user by their username via graphql

```ts
userByUsername(args: { username: string } & UserDataInclusion): Promise<{ userByUsername: User }>
```

### `data.currentRepl`

Fetches the current Replit App via graphql

```ts
currentRepl(args: ReplDataInclusion): Promise<{ repl: Repl }>
```

### `data.replById`

Fetches a Replit App by its ID via graphql

```ts
replById(args: { id: string } & ReplDataInclusion): Promise<{ repl: Repl }>
```

### `data.replByUrl`

Fetches a Replit App by its URL using GraphQL

```ts
replByUrl(args: { url: string } & ReplDataInclusion): Promise<{ repl: Repl }>
```

## Types

### CurrentUser

Extended values for the current user

| Property       | Type                          |
| -------------- | ----------------------------- |
| bio?           | `string`                      |
| displayName?   | `string`                      |
| firstName?     | `string`                      |
| followCount?   | `number`                      |
| followerCount? | `number`                      |
| fullName?      | `string`                      |
| id             | `number`                      |
| image          | `string`                      |
| isUserHacker?  | `boolean`                     |
| isUserPro?     | `boolean`                     |
| lastName?      | `string`                      |
| roles?         | [`UserRole[]`](#userrole)     |
| socials?       | [`UserSocial[]`](#usersocial) |
| url?           | `string`                      |
| username       | `string`                      |

### CurrentUserDataInclusion

Options for the currentUser query

| Property           | Type      |
| ------------------ | --------- |
| includePlan?       | `boolean` |
| includeRoles?      | `boolean` |
| includeSocialData? | `boolean` |

### EditorPreferences

Editor Preferences

| Property               | Type      |
| ---------------------- | --------- |
| \_\_typename           | `string`  |
| codeIntelligence       | `boolean` |
| codeSuggestion         | `boolean` |
| fontSize               | `number`  |
| indentIsSpaces         | `boolean` |
| indentSize             | `number`  |
| keyboardHandler        | `string`  |
| minimapDisplay         | `string`  |
| multiselectModifierKey | `string`  |
| wrapping               | `boolean` |

### Replit App

A Replit App

| Property         | Type                                              |
| ---------------- | ------------------------------------------------- |
| commentCount?    | `number`                                          |
| comments?        | [`ReplCommentConnection`](#replcommentconnection) |
| description      | `string`                                          |
| iconUrl?         | `string`                                          |
| id               | `string`                                          |
| imageUrl?        | `string`                                          |
| isPrivate        | `boolean`                                         |
| likeCount?       | `number`                                          |
| multiplayers?    | [`User[]`](#user)                                 |
| owner?           | [`ReplOwner`](#replowner)                         |
| publicForkCount? | `number`                                          |
| runCount?        | `number`                                          |
| slug             | `string`                                          |
| tags?            | [`Tag[]`](#tag)                                   |
| timeCreated      | `string`                                          |
| title            | `string`                                          |
| url              | `string`                                          |

### ReplComment

A Replit App Comment

| Property | Type            |
| -------- | --------------- |
| body     | `string`        |
| id       | `number`        |
| user     | [`User`](#user) |

### ReplCommentConnection

An array of ReplComments as items

| Property | Type                            |
| -------- | ------------------------------- |
| items    | [`ReplComment[]`](#replcomment) |

### ReplDataInclusion

Options for replit app queries

| Property             | Type      |
| -------------------- | --------- |
| includeComments?     | `boolean` |
| includeMultiplayers? | `boolean` |
| includeOwner?        | `boolean` |
| includeSocialData?   | `boolean` |

### ReplOwner

A Replit App Owner, can be either a User or a Team

| Property     | Type     |
| ------------ | -------- |
| \_\_typename | `string` |
| description? | `string` |
| id           | `number` |
| image        | `string` |
| username     | `string` |

### Tag

A Replit App tag

| Property   | Type      |
| ---------- | --------- |
| id         | `string`  |
| isOfficial | `boolean` |

### User

A Replit user

| Property       | Type                          |
| -------------- | ----------------------------- |
| bio?           | `string`                      |
| displayName?   | `string`                      |
| firstName?     | `string`                      |
| followCount?   | `number`                      |
| followerCount? | `number`                      |
| fullName?      | `string`                      |
| id             | `number`                      |
| image          | `string`                      |
| isUserHacker?  | `boolean`                     |
| isUserPro?     | `boolean`                     |
| lastName?      | `string`                      |
| roles?         | [`UserRole[]`](#userrole)     |
| socials?       | [`UserSocial[]`](#usersocial) |
| url?           | `string`                      |
| username       | `string`                      |

### UserDataInclusion

Options for user queries

| Property           | Type      |
| ------------------ | --------- |
| includePlan?       | `boolean` |
| includeRoles?      | `boolean` |
| includeSocialData? | `boolean` |

### UserRole

A user role

| Property | Type     |
| -------- | -------- |
| id       | `number` |
| key      | `string` |
| name     | `string` |
| tagline  | `string` |

### UserSocial

A user social media link

| Property | Type                                |
| -------- | ----------------------------------- |
| id       | `number`                            |
| type     | [`UserSocialType`](#usersocialtype) |
| url      | `string`                            |

### UserSocialType

An enumerated type of social media links

| Property | Type |
| -------- | ---- |

### UserSocialType

An enumerated type of social media links

```ts
discord = 'discord'
facebook = 'facebook'
github = 'github'
linkedin = 'linkedin'
twitch = 'twitch'
twitter = 'twitter'
website = 'website'
youtube = 'youtube'
```

### CurrentUserQueryOutput

A graphql response for the currentUser query

```ts
GraphResponse<{
  user: CurrentUser;
}>
```

### GraphResponse\<`T`>

A graphql response

```ts
Promise<T | never>
```

### ReplQueryOutput

A graphql response for the repl query

```ts
GraphResponse<{
  repl: Repl;
}>
```

### UserByUsernameQueryOutput

A graphql response for the userByUsername query

```ts
GraphResponse<{
  userByUsername: User;
}>
```

### UserQueryOutput

A graphql response for the user query

```ts
GraphResponse<{
  user: User;
}>
```


# debug API
Source: https://docs.replit.com/extensions/api/debug

Learn how to use the debug API module to log data, warnings, and errors to the Extension Devtools in Replit extensions.

The `debug` api module allows you to log data to the Extension Devtools

## Usage

```ts
import { debug } from '@replit/extensions';
```

## Methods

### `debug.info`

Logs information to the Extension Devtools

```ts
info(message: string, data: Data): Promise<void>
```

### `debug.warn`

Logs a warning to the extension devtools

```ts
warn(message: string, data: Data): Promise<void>
```

### `debug.error`

Logs an error message to the extension devtools

```ts
error(message: string, data: Data): Promise<void>
```

### `debug.log`

Logs information to the Extension Devtools

```ts
log(message: string, data: Data): Promise<void>
```


# editor API
Source: https://docs.replit.com/extensions/api/editor

Access and manage editor preferences in Replit Apps using the editor API module. Get settings like font size, indentation, and code intelligence.

The `editor` api module allows you to get the current user's editor preferences.

## Usage

```ts
import { experimental } from '@replit/extensions';
const { editor } = experimental;
```

## Methods

### `editor.getPreferences`

Returns the current user's editor preferences.

```ts
getPreferences(): Promise<EditorPreferences>
```

## Types

### EditorPreferences

Editor Preferences

| Property               | Type      |
| ---------------------- | --------- |
| \_\_typename           | `string`  |
| codeIntelligence       | `boolean` |
| codeSuggestion         | `boolean` |
| fontSize               | `number`  |
| indentIsSpaces         | `boolean` |
| indentSize             | `number`  |
| keyboardHandler        | `string`  |
| minimapDisplay         | `string`  |
| multiselectModifierKey | `string`  |
| wrapping               | `boolean` |


# exec API
Source: https://docs.replit.com/extensions/api/exec

Learn how to run shell commands in Replit Apps using the exec API module. Includes methods for spawning processes and executing commands.

The `exec` api module allows you to execute arbitrary shell commands.

## Usage

```ts
import { exec } from '@replit/extensions';
```

## Methods

### `exec.spawn`

Spawns a command, with given arguments and environment variables. Takes in callbacks,
and returns an object containing a promise that resolves when the command exits, and
a dispose function to kill the process.

```ts
spawn(options: SpawnOptions): SpawnOutput
```

### `exec.exec`

Executes a command in the shell, with given arguments and environment variables

```ts
exec(command: string, options: { env: Record<string, string> }): Promise<ExecResult>
```

## Types

### BaseSpawnOptions

| Property     | Type                     |
| ------------ | ------------------------ |
| args         | `string[]`               |
| env?         | `Record<string, string>` |
| splitStderr? | `boolean`                |

### CombinedStderrSpawnOptions

| Property     | Type                     |
| ------------ | ------------------------ |
| args         | `string[]`               |
| env?         | `Record<string, string>` |
| onOutput?    | `Function`               |
| splitStderr? | `false`                  |

### ExecResult

| Property | Type     |
| -------- | -------- |
| exitCode | `number` |
| output   | `string` |

### SpawnOutput

| Property      | Type                   |
| ------------- | ---------------------- |
| dispose       | `Function`             |
| resultPromise | `Promise<SpawnResult>` |

### SpawnResult

| Property | Type            |
| -------- | --------------- |
| error    | `null │ string` |
| exitCode | `number`        |

### SplitStderrSpawnOptions

| Property    | Type                                      |
| ----------- | ----------------------------------------- |
| args        | `string[]`                                |
| env?        | `Record<string, string>`                  |
| onStdErr?   | [`OutputStrCallback`](#outputstrcallback) |
| onStdOut?   | [`OutputStrCallback`](#outputstrcallback) |
| splitStderr | `true`                                    |

### OutputStrCallback

```ts
(output: string) => void
```

### SpawnOptions

```ts
SplitStderrSpawnOptions | CombinedStderrSpawnOptions
```


# fs API
Source: https://docs.replit.com/extensions/api/fs

Create, read, modify, and watch files and directories in your Replit App using the filesystem API methods and types.

The fs or filesystem API allows you to create, read, and modify files on the replit app's filesystem.

## Usage

```ts
import { fs } from '@replit/extensions';
```

## Methods

### `fs.readFile`

Reads the file specified at `path` and returns an object containing the contents, or an object containing an error if there was one. Required [permissions](./manifest#scopetype): `read`.

```ts
readFile(path: string, encoding: null | "utf8" | "binary"): Promise<{ content: string } | { error: string }>
```

### `fs.writeFile`

Writes the file specified at `path` with the contents `content`. Required [permissions](./manifest#scopetype): `read`, `write-exec`.

```ts
writeFile(path: string, content: string | Blob): Promise<{ success: boolean } | { error: string }>
```

### `fs.readDir`

Reads the directory specified at `path` and returns an object containing the contents, or an object containing an error if there was one. Required [permissions](./manifest#scopetype): `read`.

```ts
readDir(path: string): Promise<{ children: DirectoryChildNode[], error: string }>
```

### `fs.createDir`

Creates a directory at the specified path. Required [permissions](./manifest#scopetype): `read`, `write-exec`.

```ts
createDir(path: string): Promise<{ error: null | string, success: boolean }>
```

### `fs.deleteFile`

Deletes the file at the specified path. Required [permissions](./manifest#scopetype): `read`, `write-exec`.

```ts
deleteFile(path: string): Promise<{} | { error: string }>
```

### `fs.deleteDir`

Deletes the directory at the specified path. Required [permissions](./manifest#scopetype): `read`, `write-exec`.

```ts
deleteDir(path: string): Promise<{} | { error: string }>
```

### `fs.move`

Moves the file or directory at `from` to `to`. Required [permissions](./manifest#scopetype): `read`, `write-exec`.

```ts
move(path: string, to: string): Promise<{ error: null | string, success: boolean }>
```

### `fs.copyFile`

Copies the file at `from` to `to`. Required [permissions](./manifest#scopetype): `read`, `write-exec`.

```ts
copyFile(path: string, to: string): Promise<{ error: null | string, success: boolean }>
```

### `fs.watchFile`

Watches the file at `path` for changes with the provided `listeners`. Returns a dispose method which cleans up the listeners. Required [permissions](./manifest#scopetype): `read`.

```ts
watchFile(path: string, listeners: WatchFileListeners<string>, encoding: "utf8" | "binary"): Promise<DisposerFunction>
```

### `fs.watchDir`

Watches file events (move, create, delete) in the specified directory at the given `path`. Returns a dispose method which cleans up the listeners. Required [permissions](./manifest#scopetype): `read`.

```ts
watchDir(path: string, listeners: WatchDirListeners): Promise<DisposerFunction>
```

### `fs.watchTextFile`

Watches a text file at `path` for changes with the provided `listeners`. Returns a dispose method which cleans up the listeners.

Use this for watching text files, and receive changes as versioned operational transform (OT) operations annotated with their source.

Required [permissions](./manifest#scopetype): `read`.

```ts
watchTextFile(path: string, listeners: WatchTextFileListeners): Function
```

## Types

### ChangeEventType

A file change event type

| Property | Type |
| -------- | ---- |

### DeleteEvent

Fired when a file is deleted

| Property  | Type                |
| --------- | ------------------- |
| eventType | `Delete`            |
| node      | [`FsNode`](#fsnode) |

### DirectoryChildNode

A directory child node - a file or a folder.

| Property | Type                        |
| -------- | --------------------------- |
| filename | `string`                    |
| type     | [`FsNodeType`](#fsnodetype) |

### FsNode

A base interface for nodes, just includes
the type of the node and the path, This interface
does not expose the node's content/children

| Property | Type                        |
| -------- | --------------------------- |
| path     | `string`                    |
| type     | [`FsNodeType`](#fsnodetype) |

### FsNodeType

A Filesystem node type

| Property | Type |
| -------- | ---- |

### MoveEvent

Fired when a file is moved

| Property  | Type                |
| --------- | ------------------- |
| eventType | `Move`              |
| node      | [`FsNode`](#fsnode) |
| to        | `string`            |

### TextChange

A written text change for the WriteChange function exposed by WatchTextFileListeners.onReady

| Property | Type     |
| -------- | -------- |
| from     | `number` |
| insert?  | `string` |
| to?      | `number` |

### TextFileOnChangeEvent

Signifies a change when a text file's text content is updated

| Property      | Type                          |
| ------------- | ----------------------------- |
| changes       | [`TextChange[]`](#textchange) |
| latestContent | `string`                      |

### TextFileReadyEvent

A set of listeners and values exposed by WatchTextFileListeners.onReady

| Property         | Type                                    |
| ---------------- | --------------------------------------- |
| getLatestContent | [`GetLatestContent`](#getlatestcontent) |
| initialContent   | `string`                                |
| writeChange      | [`WriteChange`](#writechange)           |

### WatchDirListeners

A set of listeners for watching a directory

| Property        | Type                                                                |
| --------------- | ------------------------------------------------------------------- |
| onChange        | [`WatchDirOnChangeListener`](#watchdironchangelistener)             |
| onError         | [`WatchDirOnErrorListener`](#watchdironerrorlistener)               |
| onMoveOrDelete? | [`WatchDirOnMoveOrDeleteListener`](#watchdironmoveordeletelistener) |

### WatchFileListeners

A set of listeners for watching a non-text file\<`T extends string | Blob = string`>

| Property        | Type                                                                  |
| --------------- | --------------------------------------------------------------------- |
| onChange        | [`WatchFileOnChangeListener<T>`](#watchfileonchangelistener)          |
| onError?        | [`WatchFileOnErrorListener`](#watchfileonerrorlistener)               |
| onMoveOrDelete? | [`WatchFileOnMoveOrDeleteListener`](#watchfileonmoveordeletelistener) |

### WatchTextFileListeners

A set of listeners for watching a text file

| Property        | Type                                                                          |
| --------------- | ----------------------------------------------------------------------------- |
| onChange?       | [`WatchTextFileOnChangeListener`](#watchtextfileonchangelistener)             |
| onError?        | [`WatchTextFileOnErrorListener`](#watchtextfileonerrorlistener)               |
| onMoveOrDelete? | [`WatchTextFileOnMoveOrDeleteListener`](#watchtextfileonmoveordeletelistener) |
| onReady         | [`WatchTextFileOnReadyListener`](#watchtextfileonreadylistener)               |

### ChangeEventType

A file change event type

```ts
Create = 'CREATE'
Delete = 'DELETE'
Modify = 'MODIFY'
Move = 'MOVE'
```

### FsNodeType

A Filesystem node type

```ts
Directory = 'DIRECTORY'
File = 'FILE'
```

### DisposerFunction

A cleanup/disposer function (void)

```ts
() => void
```

### FsNodeArray

```ts
Array<FsNode>
```

### GetLatestContent

Returns the latest content of a watched file as a string

```ts
() => string
```

### WatchDirOnChangeListener

Fires when a directory's child nodes change

```ts
(children: FsNodeArray) => void
```

### WatchDirOnErrorListener

Fires when watching a directory fails

```ts
(err: Error, extraInfo: Record) => void
```

### WatchDirOnMoveOrDeleteListener

Fires when a watched directory is moved or deleted

```ts
(event: DeleteEvent | MoveEvent) => void
```

### WatchFileOnChangeListener

Fires when a non-text file is changed

```ts
(newContent: T) => void
```

### WatchFileOnErrorListener

Fires when watching a non-text file fails

```ts
(error: string) => void
```

### WatchFileOnMoveOrDeleteListener

Fires when a non-text file is moved or deleted

```ts
(moveOrDeleteEvent: MoveEvent | DeleteEvent) => void
```

### WatchTextFileOnChangeListener

Fires when a watched text file's text content is updated

```ts
(changeEvent: TextFileOnChangeEvent) => void
```

### WatchTextFileOnErrorListener

Fires when watching a text file fails

```ts
(error: string) => void
```

### WatchTextFileOnMoveOrDeleteListener

Fires when a watched text file is moved or deleted

```ts
(moveOrDeleteEvent: MoveEvent | DeleteEvent) => void
```

### WatchTextFileOnReadyListener

Fires when a text file watcher is ready

```ts
(readyEvent: TextFileReadyEvent) => void
```

### WriteChange

Writes a change to a watched file using the TextChange interface

```ts
(changes: TextChange | Array<TextChange>) => void
```


# init API
Source: https://docs.replit.com/extensions/api/init

Learn how to initialize a Replit extension, establish a handshake with the Replit App, and manage event listeners using the init() method.

The `init()` method initializes the Extension, establishes a handshake with the Replit App, and adds an event listener to the window object. It takes as an argument an object containing optional parameters for the initialization process. It returns a function that removes the event listener added to the window object.

## Usage

```ts
import { init } from '@replit/extensions';
```

## Signature

```ts
init(args: ReplitInitArgs): Promise<ReplitInitOutput>
```

## Types

### HandshakeStatus

An enumerated set of values for the Handshake between the workspace and an extension

| Property | Type |
| -------- | ---- |

### ReplitInitArgs

The Replit init() function arguments

| Property | Type     |
| -------- | -------- |
| timeout? | `number` |

### ReplitInitOutput

The output of the Replit init() function

| Property | Type                                  |
| -------- | ------------------------------------- |
| dispose  | `Function`                            |
| status   | [`HandshakeStatus`](#handshakestatus) |

### HandshakeStatus

An enumerated set of values for the Handshake between the workspace and an extension

```ts
Error = 'error'
Loading = 'loading'
Ready = 'ready'
```


# Extension manifest reference
Source: https://docs.replit.com/extensions/api/manifest

Learn how to configure your Replit Extension with the extension.json manifest file. View required fields, optional properties, and supported types.

The `extension.json` file contains the manifest for an Extension and needs to be placed in a public directory such that it is served at the root (`/extension.json`). You are required to provide a manifest file to publish an Extension to the Extensions Store.

## Properties

| Property         | Type                                | Description                                                                                                                                      |
| ---------------- | ----------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------ |
| name             | `string`                            | Required. The Extension's name. Length can be 1-60 characters.                                                                                   |
| description      | `string`                            | Required. The Extension's description. Length can be 1-255 characters.                                                                           |
| longDescription? | `string`                            | Optional. The Extension's longer description. Markdown is supported and recommended.                                                             |
| icon?            | `string`                            | Optional. The Extension's icon. This is a reference to a file on the replit app. Any web based image format is accepted, but SVGs are preferred. |
| tags?            | `string[]`                          | Optional. A list of tags that describe the extension.                                                                                            |
| coverImages?     | [`CoverImage[]`](#coverimage)       | Optional. A Cover Image belonging to an Extension. Max 4 coverImages per extension.                                                              |
| website?         | `string`                            | Optional. The Extension's website                                                                                                                |
| authorEmail?     | `string`                            | Optional. The email address of the extension author. This is made public                                                                         |
| fileHandlers?    | [`FileHandler[]`](#filehandler)     | Optional. An array of [file handlers](/extensions#file-handler-file-editors-and-icons) registered by the extension.                              |
| tools?           | [`Tool[]`](#tool)                   | Optional. An array of [tools](/extensions#tool-extension-ui) registered by the extension.                                                        |
| scopes?          | [`Scope[]`](#scope)                 | Optional. An array of scopes required by the extension.                                                                                          |
| background?      | [`BackgroundPage`](#backgroundpage) | Optional. A path to a background script                                                                                                          |

## Types

### CoverImage

A Cover Image belonging to your extension. Currently, only the first image will be used in the extension store. The `path` should reference an image file on the Replit App's file system.

| Property | Type     | Description                                                           |
| -------- | -------- | --------------------------------------------------------------------- |
| path     | `string` | The path to the image. This is relative to the statically served root |
| label    | `string` | The label of the image. This is used as the alt text for the image    |

### FileHandler

A [file handler](/extensions#file-handler-file-editors-and-icons) is a custom user experience around a particular file in the Workspace, in the form of a Pane.

| Property | Type     | Description                                                                                             |
| -------- | -------- | ------------------------------------------------------------------------------------------------------- |
| glob     | `string` | A glob pattern that matches the files that this handler should be used for                              |
| handler  | `string` | The path to the handler. This is relative to the statically served root.                                |
| name?    | `string` | Optional. Required if more than one file handler is registered. Fallback value is the extension's name. |
| icon?    | `string` | Optional. Required if more than one file handler is registered. Fallback value is the extension's icon. |

### Tool

A [tool](/extensions/basics/key-concepts) is a custom user experience in the Workspace, in the form of a Pane.

| Property | Type     | Description                                                                                     |
| -------- | -------- | ----------------------------------------------------------------------------------------------- |
| handler  | `string` | The path to the handler. This is relative to the statically served root.                        |
| name?    | `string` | Optional. Required if more than one tool is registered. Fallback value is the extension's name. |
| icon?    | `string` | Optional. Required if more than one tool is registered. Fallback value is the extension's icon. |

### Scope

Scopes/Permissions required by the extension.

\| Property | Type                      |
\| -------- | ------------------------- | --------------------------------------------- |
\| name     | [`ScopeType`](#scopetype) | The name of the scope                         |
\| reason   | `string`                  | The reason why the extension needs this scope |

### ScopeType

* `read` - Read any file in a Replit App
* `write-exec` - Write to any file, and execute any code or shell command in a Replit App
* `repldb:read` - Read all data in the key-value [ReplDB](https:/.replit.com/cloud-services/storage-and-databases/replit-database) in a Replit App
* `repldb:write` - Write or delete any key in the key-value [ReplDB](https:/.replit.com/cloud-services/storage-and-databases/replit-database) in a Replit App
* `experimental-api` - Use experimental APIs that may be unstable, may change in behavior or be removed entirely

```ts
"read" | "write-exec" | "repldb:read" | "repldb:write" | "experimental-api"
```

### BackgroundPage

The path to a specified route that will run a background script.

```javascript
{
  page: string;
}
```


# me API
Source: https://docs.replit.com/extensions/api/me

Access information about the current extension context, including file paths for file handlers and extension-specific data.

The `me` api module exposes information specific to the current extension.

## Usage

```ts
import { me } from '@replit/extensions';
```

## Methods

### `me.filePath`

Returns the path to the current file the extension is opened with, if it is a [File Handler](/extensions#file-handler-file-editors-and-icons).

```ts
filePath(): Promise<string>
```


# messages API
Source: https://docs.replit.com/extensions/api/messages

Display custom toast notifications in the Replit workspace using the messages API to show confirmations, errors, warnings, and notices.

The messages API allows you to send custom notices in the Replit workspace.

## Usage

```ts
import { messages } from '@replit/extensions';
```

## Methods

### `messages.showConfirm`

Shows a confirmation toast message within the Replit workspace for `length` milliseconds. Returns the ID of the message as a UUID

```ts
showConfirm(str: string, length: number): Promise<string>
```

### `messages.showError`

Shows an error toast message within the Replit workspace for `length` milliseconds. Returns the ID of the message as a UUID

```ts
showError(str: string, length: number): Promise<string>
```

### `messages.showNotice`

Shows a notice toast message within the Replit workspace for `length` milliseconds. Returns the ID of the message as a UUID

```ts
showNotice(str: string, length: number): Promise<string>
```

### `messages.showWarning`

Shows a warning toast message within the Replit workspace for `length` milliseconds. Returns the ID of the message as a UUID

```ts
showWarning(str: string, length: number): Promise<string>
```

### `messages.hideMessage`

Hides a message by its IDs

```ts
hideMessage(id: string): Promise<void>
```

### `messages.hideAllMessages`

Hides all toast messages visible on the screens

```ts
hideAllMessages(): Promise<void>
```


# replDb API
Source: https://docs.replit.com/extensions/api/replDb

Learn how to use ReplDB, a key-value store for Replit Apps, to persist data in your extensions through simple read and write operations.

ReplDB is a simple key-value store available on all replit apps by default. Extensions can use ReplDB to store replit apps specific data.

## Usage

```ts
import { replDb } from '@replit/extensions';
```

## Methods

### `replDb.set`

Sets the value for a given key. Required [permissions](./manifest#scopetype): `repldb:read`, `repldb:write`.

```ts
set(args: { key: string, value: any }): Promise<void>
```

### `replDb.get`

Returns a value associated with the given key. Required [permissions](./manifest#scopetype): `repldb:read`.

```ts
get(args: { key: string }): Promise<string | { error: null | string }>
```

### `replDb.list`

Lists keys in the replDb. Accepts an optional `prefix`, which filters for keys beginning with the given prefix. Required [permissions](./manifest#scopetype): `repldb:read`.

```ts
list(args: { prefix: string }): Promise<{ keys: string[] } | { error: string }>
```

### `replDb.del`

Deletes a key in the replDb. Required [permissions](./manifest#scopetype): `repldb:read`, `repldb:write`.

```ts
del(args: { key: string }): Promise<void>
```


# session API
Source: https://docs.replit.com/extensions/api/session

Access and manage the current user's coding session in the Replit workspace, including active file tracking and change listeners.

The session api provides you with information on the current user's coding session in the workspace.

## Usage

```ts
import { session } from '@replit/extensions';
```

## Methods

### `session.onActiveFileChange`

Sets up a listener to handle when the active file is changed

```ts
onActiveFileChange(listener: OnActiveFileChangeListener): DisposerFunction
```

### `session.getActiveFile`

Returns the current file the user is focusing

```ts
getActiveFile(): Promise<null | string>
```

## Types

### DisposerFunction

A cleanup/disposer function (void)

```ts
() => void
```

### OnActiveFileChangeListener

Fires when the current user switches to a different file/tool in the workspace.  Returns null if the current file/tool cannot be found in the filesystem.

```ts
(file: string | ) => void
```


# themes API
Source: https://docs.replit.com/extensions/api/themes

Access and utilize theme data and color tokens in your Replit extensions. Get current theme values and listen for theme changes.

The themes api allows you to access the current user's theme and utilize the color tokens accordingly.

## Usage

```ts
import { themes } from '@replit/extensions';
```

## Methods

### `themes.getCurrentTheme`

Returns all metadata on the current theme including syntax highlighting, description, HSL, token values, and more.

```ts
getCurrentTheme(): Promise<ThemeVersion>
```

### `themes.getCurrentThemeValues`

Returns the current theme's global token values.

```ts
getCurrentThemeValues(): Promise<ThemeValuesGlobal>
```

### `themes.onThemeChange`

Fires the `callback` parameter function with the updated theme when the user's theme changes.

```ts
onThemeChange(callback: OnThemeChangeListener): Promise<DisposerFunction>
```

### `themes.onThemeChangeValues`

Fires the `callback` parameter function with the updated theme values when the user's theme changes.

```ts
onThemeChangeValues(callback: OnThemeChangeValuesListener): Promise<DisposerFunction>
```

## Types

### ColorScheme

Enumerated Color Scheme

| Property | Type |
| -------- | ---- |

### CustomTheme

Custom Theme GraphQL type

| Property                 | Type                            |
| ------------------------ | ------------------------------- |
| author                   | `User`                          |
| colorScheme              | [`ColorScheme`](#colorscheme)   |
| hasUnpublishedChanges    | `boolean`                       |
| id                       | `number`                        |
| isCurrentUserThemeAuthor | `boolean`                       |
| isInstalledByCurrentUser | `boolean`                       |
| latestThemeVersion       | [`ThemeVersion`](#themeversion) |
| numInstalls?             | `number`                        |
| slug?                    | `string`                        |
| status?                  | `"private" │ "public"`          |
| title?                   | `string`                        |

### ThemeEditorSyntaxHighlighting

Theme Editor Syntax Highlighting

| Property     | Type                                                                  |
| ------------ | --------------------------------------------------------------------- |
| \_\_typename | `string`                                                              |
| tags         | [`ThemeSyntaxHighlightingTag[]`](#themesyntaxhighlightingtag)         |
| values       | [`ThemeSyntaxHighlightingModifier`](#themesyntaxhighlightingmodifier) |

### ThemeSyntaxHighlightingModifier

Theme Syntax Highlighting Modifier

| Property        | Type     |
| --------------- | -------- |
| color?          | `string` |
| fontSize?       | `string` |
| fontStyle?      | `string` |
| fontWeight?     | `string` |
| textDecoration? | `string` |

### ThemeSyntaxHighlightingTag

Theme Syntax Highlighting Tag

| Property     | Type              |
| ------------ | ----------------- |
| \_\_typename | `string`          |
| modifiers    | `null │ string[]` |
| name         | `string`          |

### ThemeValues

Both global and editor theme values

| Property      | Type                                      |
| ------------- | ----------------------------------------- |
| \_\_typename? | `string`                                  |
| editor        | [`ThemeValuesEditor`](#themevalueseditor) |
| global        | [`ThemeValuesGlobal`](#themevaluesglobal) |

### ThemeValuesEditor

Editor Theme Values, an array of ThemeEditorSyntaxHighlighting

| Property           | Type                                                                |
| ------------------ | ------------------------------------------------------------------- |
| syntaxHighlighting | [`ThemeEditorSyntaxHighlighting[]`](#themeeditorsyntaxhighlighting) |

### ThemeValuesGlobal

Global theme values interface

| Property                | Type     |
| ----------------------- | -------- |
| \_\_typename?           | `string` |
| accentNegativeDefault   | `string` |
| accentNegativeDimmer    | `string` |
| accentNegativeDimmest   | `string` |
| accentNegativeStronger  | `string` |
| accentNegativeStrongest | `string` |
| accentPositiveDefault   | `string` |
| accentPositiveDimmer    | `string` |
| accentPositiveDimmest   | `string` |
| accentPositiveStronger  | `string` |
| accentPositiveStrongest | `string` |
| accentPrimaryDefault    | `string` |
| accentPrimaryDimmer     | `string` |
| accentPrimaryDimmest    | `string` |
| accentPrimaryStronger   | `string` |
| accentPrimaryStrongest  | `string` |
| backgroundDefault       | `string` |
| backgroundHigher        | `string` |
| backgroundHighest       | `string` |
| backgroundOverlay       | `string` |
| backgroundRoot          | `string` |
| black                   | `string` |
| blueDefault             | `string` |
| blueDimmer              | `string` |
| blueDimmest             | `string` |
| blueStronger            | `string` |
| blueStrongest           | `string` |
| blurpleDefault          | `string` |
| blurpleDimmer           | `string` |
| blurpleDimmest          | `string` |
| blurpleStronger         | `string` |
| blurpleStrongest        | `string` |
| brownDefault            | `string` |
| brownDimmer             | `string` |
| brownDimmest            | `string` |
| brownStronger           | `string` |
| brownStrongest          | `string` |
| foregroundDefault       | `string` |
| foregroundDimmer        | `string` |
| foregroundDimmest       | `string` |
| greenDefault            | `string` |
| greenDimmer             | `string` |
| greenDimmest            | `string` |
| greenStronger           | `string` |
| greenStrongest          | `string` |
| greyDefault             | `string` |
| greyDimmer              | `string` |
| greyDimmest             | `string` |
| greyStronger            | `string` |
| greyStrongest           | `string` |
| limeDefault             | `string` |
| limeDimmer              | `string` |
| limeDimmest             | `string` |
| limeStronger            | `string` |
| limeStrongest           | `string` |
| magentaDefault          | `string` |
| magentaDimmer           | `string` |
| magentaDimmest          | `string` |
| magentaStronger         | `string` |
| magentaStrongest        | `string` |
| orangeDefault           | `string` |
| orangeDimmer            | `string` |
| orangeDimmest           | `string` |
| orangeStronger          | `string` |
| orangeStrongest         | `string` |
| outlineDefault          | `string` |
| outlineDimmer           | `string` |
| outlineDimmest          | `string` |
| outlineStronger         | `string` |
| outlineStrongest        | `string` |
| pinkDefault             | `string` |
| pinkDimmer              | `string` |
| pinkDimmest             | `string` |
| pinkStronger            | `string` |
| pinkStrongest           | `string` |
| purpleDefault           | `string` |
| purpleDimmer            | `string` |
| purpleDimmest           | `string` |
| purpleStronger          | `string` |
| purpleStrongest         | `string` |
| redDefault              | `string` |
| redDimmer               | `string` |
| redDimmest              | `string` |
| redStronger             | `string` |
| redStrongest            | `string` |
| tealDefault             | `string` |
| tealDimmer              | `string` |
| tealDimmest             | `string` |
| tealStronger            | `string` |
| tealStrongest           | `string` |
| white                   | `string` |
| yellowDefault           | `string` |
| yellowDimmer            | `string` |
| yellowDimmest           | `string` |
| yellowStronger          | `string` |
| yellowStrongest         | `string` |

### ThemeVersion

Theme Version GraphQL type

| Property      | Type                          |
| ------------- | ----------------------------- |
| \_\_typename? | `string`                      |
| customTheme?  | [`CustomTheme`](#customtheme) |
| description?  | `string`                      |
| hue           | `number`                      |
| id            | `number`                      |
| lightness     | `number`                      |
| saturation    | `number`                      |
| timeUpdated?  | `string`                      |
| values?       | [`ThemeValues`](#themevalues) |

### ColorScheme

Enumerated Color Scheme

```ts
Dark = 'dark'
Light = 'light'
```

### DisposerFunction

A cleanup/disposer function (void)

```ts
() => void
```

### OnThemeChangeListener

Fires with the new theme data when the current theme changes

```ts
(theme: ThemeVersion) => void
```


# Create your first Replit Extension
Source: https://docs.replit.com/extensions/basics/create-extension

Learn how to build a basic Replit extension by creating, previewing, and adding features to a sample project using Extension Devtools and the Extensions API.

#### Learn the basics of extension development by building and previewing a simple extension.

In this guide, you'll build a sample "Hello, world!" React.js extension with a custom Tool UI.

## Before you begin

* Make sure you have a Replit account — you'll need to be logged in to create an extension.
* You'll also need to make sure you've verified your email address, as this is required to publish an extension.
* You'll need to be familiar with JavaScript, and ideally React.js, which is our preferred framework for building UI Extensions.

## Create an Extension Replit App

To start building a Replit extension, you need to create an Extension Replit App. This is a special Replit App that contains all the configuration necessary to build, preview, and release your extension.

<Frame>
  <video controls width="100%" height="400" loop src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/extensions/videos/create.mp4" type="video/mp4" />
</Frame>

1. Fork an [Extension Template](/extensions/basics/templates/). Give it a name and click "Create Extension Replit App"

<CardGroup cols={2}>
  <Card title="React Extension" icon="react" iconType="solid" href="https://replit.com/new/extension?template=656d6107-3a39-4802-b8d9-59479cc5e358" horizontal={true}>
    A starter template for Replit Extensions using the React JavaScript framework.
  </Card>

  <Card title="JavaScript Extension" icon="js" iconType="solid" href="https://replit.com/new/extension?template=44dadedd-8045-46a9-ad28-2b86699a8616" horizontal={true}>
    A starter template for a Replit Extension with Vanilla JavaScript
  </Card>
</CardGroup>

2. After creating the Replit App, your Workspace should open. On the left side you'll find a code editor, and on the right side, you'll find the Extension Devtools tab. [Learn more about devtools](/extensions/development/devtools)

### Preview your extension

Building an extension is a lot easier when you can see what you're building. We've made it easy to preview your extension in a Replit App, similar to the Webview you're familiar with in other Replit Apps.

<Note>
  Extension Replit Apps do not support the regular webview. Read more in the [FAQ](/extensions/faq)
</Note>

1. **Open Extension Devtools**
2. **Click "Load Locally"** This will run your Replit App's development server, if it's not already running, and load your extension in the preview window.
3. **Open a development preview tab** Click the "Preview" button next to any Tool or File Handler in the Extension Devtools to open a preview tab. This will open a new tab in your Workspace, where you can see your extension in action.

### Add features

Next, it's time to start adding features using the Replit Extensions API.

There are two ways to use the APIs, depending on which template you chose:

* **React Extensions** In React Extensions, some APIs have [hooks](/extensions/category/hooks), while others are available on the `replit` object returned by [`useReplit()`](/extensions/development/react/hooks/useReplit).
* **JavaScript Extensions** In JavaScript Extensions, all APIs are available on the global `replit` object created by the [`init` API](/extensions/api/init)

Features are added through the Devtools UI, which is available in the [Extension Devtools](/extensions/development/devtools) tab. Features are divided into three categories:

1. **Tools (*UI Extensions*)** An custom user interface presented as a Tab in the workspace. Examples include a ReplDB editor or a Chat Extension. Learn how to [build your first tool](/extensions/examples/snippet-manager).
2. **File Handlers (*File Editors and Icons*)** File handlers allow you to build Tools and add icons for specific file types. Examples include a JSON file editor or a CSV file editor. Learn how to [build your first file handler](/extensions/examples/json-editor). Under the hood, file handlers are just tools with a filetype association.

### Using devtools to scaffold features

Extension developer tools make it easy to scaffold out new functionality without manually editing the Manifest file. (*Behind the scenes, all the edits you make here are reflected in the Manifest file.*)


# Key Concepts
Source: https://docs.replit.com/extensions/basics/key-concepts

On this page, you'll learn the key concepts of Replit Extensions. If you're new to Extensions, we recommend you start with the [Get Started guide](/extensions/).

## Platform

### Extension

Extensions allow you to add custom functionality, tools, and third-party integrations to the Workspace. Extensions can be installed by any user via the Store.

### Store

The Extensions Store is a marketplace for Extensions. Anyone can create and release an extension on the store. You can also share private links to unlisted Extensions, which is great for testing, internal tools, and more.

***

## Development

### Extension Replit App

Extension Replit Apps contain the frontend code for your Extension. You can use HTML / CSS / JavaScript, and any web framework of your choice. We provide templates that use React and Vanilla JavaScript.

### Devtools

Extension Devtools are a set of tools that help you build and test your Extension. In the Extension Replit App workspace, you can access the Devtools by clicking the "Devtools" button in the header.

## Extension Features

### Tool (*Extension UI*)

A custom user interface presented as a Tab in the workspace. Examples include a ReplDB editor or a Chat Extension. Learn how to [build your first tool](/extensions/examples/snippet-manager).

### File Handler (*File Editors and Icons*)

File handlers allow you to build Tools and add icons for specific file types. Examples include a JSON file editor or a CSV file editor. Learn how to [build your first file handler](/extensions/examples/json-editor). Under the hood, file handlers are just tools with a filetype association.

### Command

Commands allow you to add custom commands to the CLUI command bar. Commands are a great way to build a CLI-like experience for your extension, and enable quick actions for your users.

### Background Script

Background scripts are loaded when the Replit App opens. They remain permanently loaded until the extension is uninstalled or you close the workspace.


# Extension Templates
Source: https://docs.replit.com/extensions/basics/templates

Replit provides a few templates to help you get started with your extension. You can find them in the "Create Replit App" menu, or fork one by clicking a link below.

<CardGroup>
  <Card title="React Extension" icon="react" href="https://replit.com/new/extension?template=656d6107-3a39-4802-b8d9-59479cc5e358">
    <Icon icon="code-fork" /> a starter template for Replit Extensions using the React JavaScript framework.
  </Card>

  <Card title="JavaScript Extension" icon="js" href="https://replit.com/new/extension?template=44dadedd-8045-46a9-ad28-2b86699a861">
    <Icon icon="code-fork" /> a starter template for a Replit Extension with Vanilla JavaScript
  </Card>
</CardGroup>


# API Reference
Source: https://docs.replit.com/extensions/category/api-reference

Complete reference documentation for all Replit extension APIs, including authentication, commands, filesystem access, and workspace integration.

<CardGroup cols={3}>
  <Card title="Manifest" icon="file-code" iconType="solid" href="/extensions/api/manifest" horizontal>
    The extension.json file contains the manifest for an Extension and is required for publishing to the Extensions Store.
  </Card>

  <Card title="Authentication API" icon="lock" iconType="solid" href="/extensions/api/auth" horizontal>
    Allows secure authentication of Replit users when they use your extension.
  </Card>

  <Card title="Background Script API" icon="code" iconType="solid" href="/extensions/api/background" horizontal>
    Scripts loaded when the Replit App opens, remaining active until uninstalled or workspace closure.
  </Card>

  <Card title="Commands API" icon="terminal" iconType="solid" href="/extensions/api/commands" horizontal>
    Register commands that can be run from the CLUI command bar and other contribution points.
  </Card>

  <Card title="Data API" icon="database" iconType="solid" href="/extensions/api/data" horizontal>
    Get information and metadata exposed from Replit's GraphQL API.
  </Card>

  <Card title="Debug API" icon="bug" iconType="solid" href="/extensions/api/debug" horizontal>
    Log data to the Extension Devtools.
  </Card>

  <Card title="Editor API" icon="pen-to-square" iconType="solid" href="/extensions/api/editor" horizontal>
    Get the current user's editor preferences.
  </Card>

  <Card title="Exec API" icon="terminal" iconType="solid" href="/extensions/api/exec" horizontal>
    Execute arbitrary shell commands.
  </Card>

  <Card title="Filesystem API" icon="folder" iconType="solid" href="/extensions/api/fs" horizontal>
    Create, read, and modify files on the replit app's filesystem.
  </Card>

  <Card title="Initialization API" icon="play" iconType="solid" href="/extensions/api/init" horizontal>
    Initialize the Extension and establish a handshake with the Replit App, and adds an event listener to the window object. It takes as an argument an object containing optional parameters for the initialization process. It returns a function that removes the event listener added to the window object.
  </Card>

  <Card title="Me API" icon="user" iconType="solid" href="/extensions/api/me" horizontal>
    Exposes information specific to the current extension.
  </Card>

  <Card title="Messages API" icon="comment" iconType="solid" href="/extensions/api/messages" horizontal>
    Allows you to send custom notices in the Replit workspace.
  </Card>

  <Card title="ReplDB API" icon="database" iconType="solid" href="/extensions/api/replDb" horizontal>
    Simple key-value store for storing replit app specific data.
  </Card>

  <Card title="Session API" icon="clock" iconType="solid" href="/extensions/api/session" horizontal>
    Provides information on the current user's coding session in the workspace.
  </Card>

  <Card title="Themes API" icon="palette" iconType="solid" href="/extensions/api/themes" horizontal>
    Allows access to the current user's theme and color tokens.
  </Card>
</CardGroup>


# Development
Source: https://docs.replit.com/extensions/category/development

Learn how to build Replit extensions using React, Extension Devtools, and API integrations. Get started with templates or manual installation.

<CardGroup cols={2}>
  <Card title="Extension Devtools" icon="wrench" iconType="solid" href="/extensions/development/devtools" horizontal>
    In every extension Replit App, you will see a button labeled Extension Devtools in the top-right corner of the workspace.
  </Card>

  <Card title="React Development" icon="react" iconType="solid" href="/extensions/development/react/introduction" horizontal>
    Learn how to build an extension using React.
  </Card>

  <Card title="Full-Stack" icon="server" iconType="solid" href="/extensions/development/full-stack" horizontal>
    While full-stack extensions are not supported within a single Replit App (aka a monorepo) at this time, you can always call out from your Extension client Replit App to any outside API endpoints.
  </Card>

  <Card title="Manual Installation" icon="download" iconType="solid" href="/extensions/development/installation" horizontal>
    While we recommend using our Templates to get started, you can also install the API client manually.
  </Card>
</CardGroup>


# Examples
Source: https://docs.replit.com/extensions/category/examples

Learn how to build Replit Extensions with step-by-step examples including a JSON editor, snippet manager, and JavaScript command tools.

<CardGroup cols={3}>
  <Card title="JSON Editor" icon="code" iconType="solid" href="/extensions/examples/json-editor" horizontal>
    Create a JSON editor Extension with React and react-json-view package. Display and edit JSON file content, with automatic updates.
  </Card>

  <Card title="Snippet Manager" icon="clipboard" iconType="solid" href="/extensions/examples/snippet-manager" horizontal>
    Build a snippet manager extension with React for storing and organizing commonly used code or text pieces.
  </Card>

  <Card title="JavaScript Commands" icon="js" iconType="solid" href="/extensions/examples/javascript-commands" horizontal>
    Create an extension that adds JavaScript related commands to the Replit workspace, including npm package management and script running.
  </Card>
</CardGroup>


# Hooks
Source: https://docs.replit.com/extensions/category/hooks

Reference guide for React hooks that help you build Replit extensions. Includes hooks for file operations, theme management, and workspace integration.

<CardGroup cols={3}>
  <Card title="useReplit" icon="code" iconType="solid" href="/extensions/development/react/hooks/useReplit" horizontal>
    Establishes the handshake between the Replit and the extension and passes the API wrapper for usage inside a React component.
  </Card>

  <Card title="useReplitEffect" icon="file" iconType="solid" href="/extensions/development/react/hooks/useReplitEffect" horizontal>
    Fires a callback with the replit API wrapper upon the first component render and when its dependency array changes.
  </Card>

  <Card title="useWatchTextFile" icon="file-lines" iconType="solid" href="/extensions/development/react/hooks/useWatchTextFile" horizontal>
    Allows you to read and write to the contents of a file at the provided filePath.
  </Card>

  <Card title="useActiveFile" icon="file-code" iconType="solid" href="/extensions/development/react/hooks/useActiveFile" horizontal>
    Returns the file actively focused on by the current user.
  </Card>

  <Card title="useThemeValues" icon="palette" iconType="solid" href="/extensions/development/react/hooks/useThemeValues" horizontal>
    Provides you with the global token color values of the current user's theme.
  </Card>

  <Card title="useTheme" icon="brush" iconType="solid" href="/extensions/development/react/hooks/useTheme" horizontal>
    Returns all metadata on the current theme including syntax highlighting, description, HSL, token values, and more.
  </Card>

  <Card title="useIsExtension" icon="plug" iconType="solid" href="/extensions/development/react/hooks/useIsExtension" horizontal>
    Returns whether the handshake has been successfully established with the the Replit workspace. If the handshake is loading, undefined will be returned. After loading has finished, the hook will return a boolean.
  </Card>
</CardGroup>


# null
Source: https://docs.replit.com/extensions/create-extension





# Extension Devtools
Source: https://docs.replit.com/extensions/development/devtools

Learn how to use Replit's Extension Devtools to manage metadata, file handlers, and tools while developing your extension.

# Developing your Extension

In every extension Replit App, you will see a button labeled **Extension Devtools** in the top-right corner of the workspace.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/extensions/devtools-button.png" alt="Devtools button" />
</Frame>

If you do not see this button, make sure your Replit App is [configured to be an Extension](/replit-app/configuration/).

## Developer Tools

The Extension Devtools pane makes it easy to edit your Extension's metadata and manage [Tools](/extensions/basics/key-concepts#tool-extension-ui) and [File Handlers](/extensions/basics/key-concepts#file-handler-file-editors-and-icons).

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/extensions/devtools.png" alt="Devtools" />
</Frame>

### Extension Metadata

Click the **Edit** button in the top-right corner of your Extension preview to edit it. See [docs on the manifest file](/extensions/api/manifest).

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/extensions/preview-card.png" alt="Extension preview" />
</Frame>

### File Handlers

Click the "+" Icon next to **File Handlers** or click **New File Handler**. You will then be prompted to fill out the necessary information for the file handler. See [Type Definition](/extensions/api/manifest#filehandler).

To preview a file handler in action, click the **Open** button on the right side of an existing file handler.

### Tools

Click the "+" Icon next to **Tools** or click **New Tool**. You will then be prompted to fill out the necessary information for the new tool. See [Type Definition](/extensions/api/manifest#tool).

To preview a tool in action, click the **Open** button on the right side of an existing tool.


# Full-Stack
Source: https://docs.replit.com/extensions/development/full-stack

Learn how to build a full-stack extension by creating a separate backend API server to handle requests from your extension client on Replit.

# Create a full-stack Extension

While full-stack extensions are not supported within a single Replit App (aka a monorepo) at this time, you can always call out from your Extension client Replit App to any outside API endpoints.

Until we have full Deployments support, you can use this simple workaround to create your own server API for your extension:

1. [Create your Extension Client Replit App →](https://replit.com/new/extension)
2. [Create a separate Replit App](https://replit.com/new) for your backend. This should expose an API. For example it could be a [Node](https://replit.com/new/nodejs) or [Ruby](https://replit.com/new/ruby) API server, or even a [Next.js](https://replit.com/new?template=482b2b7d-6b3e-4b9d-863c-d51c1d5cf6f0) site with a serverless function.
3. Make fetch requests from your extension client to your backend\
   <Tip>Make sure to enable CORS requests on your extension backend API, since the extension client and API will run on different subdomains</Tip>

If you’re using Next.js to build your extension, we recommend [exporting it statically](https://nextjs.org/pages/building-your-application/deploying/static-exports) and pointing your releases to the build directory.


# Manual Installation
Source: https://docs.replit.com/extensions/development/installation

Learn how to install and initialize the Replit Extensions API client using script tags or npm packages for your project.

While we recommend using our [Templates](/extensions/basics/templates) to get started, you can also install the API client manually.

### As a `<script>` import

Start using the Extensions API client by inserting this code into the `<head>` tag of your HTML:

```html
<script src="https://unpkg.com/@replit/extensions@1.8.0/dist/index.global.js"></script>
```

Start using the API client by creating a new `<script>` tag and using the pre-defined `replit` variable.

```html
<script>
  async function main() {
    await replit.init();

    ...
  }

  window.addEventListener('load', main);
</script>
```

### As an npm package

Install the client with your preferred package manager, and use the `import` statement to start using it.

```
npm install @replit/extensions
yarn add @replit/extensions
pnpm add @replit/extensions
```

After installing the API client, use the `import` statement to start using it.

```tsx
import {
  fs,
  data,
  ...
} from '@replit/extensions';
```


# useActiveFile() Hook
Source: https://docs.replit.com/extensions/development/react/hooks/useActiveFile

The useActiveFile() hook returns the file actively focused on by the current user.

## Usage

```tsx
import { useActiveFile } from "@replit/extensions-react";

const Component = () => {
  const activeFile = useActiveFile();

  return (
    <>
      <span>Active File: {activeFile}</span>
    </>
  );
};
```

## Signature

```ts
function useActiveFile(): string | null;
```


# useIsExtension() Hook
Source: https://docs.replit.com/extensions/development/react/hooks/useIsExtension

The `useIsExtension()` hook returns whether the handshake has been successfully established with the Replit workspace. If the handshake is loading, `undefined` will be returned. After loading has finished, the hook will return a boolean.

## Usage

```ts
import { useIsExtension } from '@replit/extensions-react';

const Component = () => {
  const isExtension = useIsExtension();

  ...
}
```

## Signature

```ts
function useIsExtension(): boolean | undefined;
```


# useReplit() Hook
Source: https://docs.replit.com/extensions/development/react/hooks/useReplit

The `useReplit()` hook establishes the handshake between the Replit and the extension and passes the API wrapper for usage inside a React component.

## Usage

```ts
import { useReplit } from '@replit/extensions-react';

const Component = () => {
  const { replit, status, filePath, error } = useReplit();

  ...
}
```

## Signature

```ts
function useReplit(init?: {
  permissions: Array<string>;
}): UseReplitInitialized | UseReplitPreInitialization | UseReplitFailure;
```

## Result

| Property | Type                                  | Description                                                                                            |
| -------- | ------------------------------------- | ------------------------------------------------------------------------------------------------------ |
| status   | [`HandshakeStatus`](#handshakestatus) | A string indicating the status of the handshake between Replit and the Extension                       |
| error    | `string` \| `null`                    | If the handshake has failed, `error` is a string indicating the error message                          |
| filePath | `string` \| `null`                    | If the handshake has succeeded, `filePath` points to the current file the user is focusing             |
| replit   | `typeof replit`                       | If the handshake has succeeded, `replit` is the API wrapper for the entire `@replit/extensions` module |

## Types

### HandshakeStatus

An enumerated set of values for the handshake status.

| Key     | Value       |
| ------- | ----------- |
| Ready   | `"ready"`   |
| Error   | `"error"`   |
| Loading | `"loading"` |

### UseReplitReady

If the handshake between Replit and the Extension has been established successfully

| Property | Type                                          |
| -------- | --------------------------------------------- |
| status   | [`HandshakeStatus`](#handshakestatus).`Ready` |
| error    | `null`                                        |
| filePath | `string`                                      |
| replit   | `typeof replit`                               |

### UseReplitLoading

The default handshake status, before initialization has been established.

| Property | Type                                            |
| -------- | ----------------------------------------------- |
| status   | [`HandshakeStatus`](#handshakestatus).`Loading` |
| error    | `null`                                          |
| filePath | `null`                                          |
| replit   | `null`                                          |

### UseReplitFailure

If the handshake has failed.

| Property | Type                                          |
| -------- | --------------------------------------------- |
| status   | [`HandshakeStatus`](#handshakestatus).`Error` |
| error    | `string`                                      |
| filePath | `null`                                        |
| replit   | `null`                                        |


# useReplitEffect() Hook
Source: https://docs.replit.com/extensions/development/react/hooks/useReplitEffect

The `useReplitEffect()` hook fires a callback with the `replit` API wrapper upon the first component render and when its dependency array changes. It is similar in functionality to the `useEffect` React hook. 

## Usage

```ts
import { useReplitEffect } from '@replit/extensions-react';

const Component = () => {
  useReplitEffect(async (replit) => {
    ...
  }, [...dependencies]);

  ...
}
```

## Signature

```ts
function useReplitEffect(
  callback: (typeof replit) => Promise<void>;
  dependencies: Array<any>
): null;
```


# useTheme() Hook
Source: https://docs.replit.com/extensions/development/react/hooks/useTheme

The `useTheme()` hook returns all metadata on the current theme including syntax highlighting, description, HSL, token values, and more.

## Usage

```ts
import { useTheme } from '@replit/extensions-react';

const Component = () => {
  const theme = useTheme();

  ...
}
```

## Signature

```ts
function useThemeValues(): ThemeVersion | null;
```

## Types

### [ThemeVersion](../../../api/themes.md#themeversion)

A specific theme version reflecting all colors and metadata on the current theme.


# useThemeValues() Hook
Source: https://docs.replit.com/extensions/development/react/hooks/useThemeValues

The `useThemeValues()` hook provides you with the global token color values of the current user's theme.

## Usage

```ts
import { useThemeValues } from '@replit/extensions-react';

const Component = () => {
  const themeValues = useThemeValues();

  ...
}
```

## Signature

```ts
function useThemeValues(): ThemeValuesGlobal | null;
```

## Types

### [ThemeValuesGlobal](../../../api/themes.md#themevaluesglobal)

Replit's global theme token values for UI, excluding syntax highlighting.


# useWatchTextFile() Hook
Source: https://docs.replit.com/extensions/development/react/hooks/useWatchTextFile

The `useWatchTextFile()` hook allows you to read and write to the contents of a file at the provided `filePath`.

## Usage

```ts
import { useWatchTextFile } from '@replit/extensions-react';

const Component = () => {
  const { content, watching, watchError, writeChange } = useWatchTextFile({ filePath: "..." });

  ...
}
```

## Signature

```ts
function useWatchTextFile({
  filePath: string | null | undefined
}): UseWatchTextFileLoading | UseWatchTextFileErrorLike | UseWatchTextFileWatching;
```

## Result

| Property    | Type                     | Description                                                                       |
| ----------- | ------------------------ | --------------------------------------------------------------------------------- |
| status      | `UseWatchTextFileStatus` | The file watcher's status. Useful for ensuring the desired file is being watched. |
| content     | `string` \| `null`       | If watching, the contents of the file located at the provided `filePath`          |
| watchError  | `string` \| `null`       | If an error occurs, the corresponding error message                               |
| writeChange | `WriteChange` \| `null`  | If watching, a function to update the watched file                                |

## Types

### TextChange

| Property | Type     |
| -------- | -------- |
| from     | `number` |
| to?      | `number` |
| insert?  | `string` |

### UseWatchTextFileErrorLike

| Property    | Type                                                                                                 |
| ----------- | ---------------------------------------------------------------------------------------------------- |
| status      | `UseWatchTextFileStatus.Error` \| `UseWatchTextFileStatus.Moved` \| `UseWatchTextFileStatus.Deleted` |
| content     | `null`                                                                                               |
| watchError  | `string` \| `null`                                                                                   |
| writeChange | `null`                                                                                               |

### UseWatchTextFileLoading

| Property    | Type                             |
| ----------- | -------------------------------- |
| status      | `UseWatchTextFileStatus.Loading` |
| content     | `null`                           |
| watchError  | `null`                           |
| writeChange | `null`                           |

### UseWatchTextFileWatching

| Property    | Type                              |
| ----------- | --------------------------------- |
| status      | `UseWatchTextFileStatus.Watching` |
| content     | `string`                          |
| watchError  | `null`                            |
| writeChange | `WriteChange`                     |

***

## UseWatchTextFileStatus

```ts
Error = "error",
Loading = "loading",
Watching = "watching",
Moved = "moved",
Deleted = "deleted",
```

***

### WriteChange

```ts
(changes: TextChange | Array<TextChange>) => void
```


# Introduction
Source: https://docs.replit.com/extensions/development/react/introduction

Learn how to build Replit extensions using React with our official package, hooks, and components for a streamlined development experience.

Aside from the original API Client, we have a React-specific package which eliminates the need for extension developers to do a lot of boilerplate setup when using React for Extension development.

The package comes with a set of hooks and components that combine to make a blazingly fast and seamless developer experience.

* [NPM Package](https://www.npmjs.com/package/@replit/extensions-react)
* [GitHub Repository](https://github.com/replit/extensions-react)

## Installation

```
npm install @replit/extensions-react
yarn add @replit/extensions-react
pnpm add @replit/extensions-react
```

## Usage

Fork the [React Extension Template](https://replit.com/@replit/React-Extension?v=1) to get started.  Alternatively, you can start from scratch by wrapping your application with the `HandshakeProvider` component imported from `@replit/extensions-react`.

```tsx
import { HandshakeProvider } from '@replit/extensions-react';
import { createRoot } from 'react-dom/client';
import App from './App';

createRoot(document.getElementById('root')).render(
  <HandshakeProvider>
    <App />
  </HandshakeProvider>
)
```

In the `App` function, check the handshake status with the `useReplit` hook.

```tsx
import { useReplit } from '@replit/extensions-react';

function App() {
  const { status, error, replit } = useReplit();

  if(status === "loading") {
    return <div>Loading...</div>
  }

  if(status === "error") {
    return <div>An error occurred: {error?.message}</div>
  }

  return <div>
    Extension is Ready!
  </div>
}
```


# JavaScript Commands
Source: https://docs.replit.com/extensions/examples/javascript-commands

Learn how to build an extension that adds JavaScript-related commands to Replit for managing npm packages and running scripts.

# Create a JavaScript Commands extension

In this tutorial, we will create an extension that adds JavaScript related commands to the Replit workspace. This includes commands for searching, installing, and uninstalling npm packages, and running scripts

<Frame>
  <video controls width="80%" loop src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/extensions/videos/js-commands.mp4" type="video/mp4" />
</Frame>

## Introduction

This tutorial assumes that you have basic web development knowledge, some familiarity with Replit, and familiarity with the Command system.

In a gist, we will fork an extension template, add a background script, and in that background script, write code that adds Commands to to the Replit workspace. Our command can be thought of as a simple tree. There's a root command called "JavaScript tools". It returns three subcommands:

* "Install": This command lets you search the npm registry for packages to install, based on what you've typed. Selecting a package opens a new shell and invokes `npm install <package name>`

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/extensions/examples/js-commands/js-install.png" alt="" />
</Frame>

* "Scripts": This command displays scripts in your package.json file. Selecting the script opens a new shell and invokes that command.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/extensions/examples/js-commands/js-scripts.png" alt="" />
</Frame>

* "Uninstall": This returns all your installed packages. Selecting a package uninstalls it

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/extensions/examples/js-commands/js-uninstall.png" alt="" />
</Frame>

## Setting up your extension replit app

The first thing you want to do is fork an extension template. We recommend using the [React Extension Template](https://replit.com/@replit/React-Extension?v=1). although we are not going to write any react code in this tutorial.

Add a background script to your extension. You can scaffold a background script by typing in `replkit add background` in the shell. This creates a new folder `src/background`. The `src/background/main.tsx` file here is where we'll be writing our code.

## Adding a root command

Let's add a simple root command to the command bar to contain our subcommands.

```typescript
async function main() {
  await replit.commands.add({
    id: "js-commands",
    contributions: [replit.ContributionType.CommandBar],
    command: {
      label: "JS",
      description: "JavaScript Commands",
      icon: "js.png",
      commands: async () => {
        // This is where subcomands go:
        return [];
      },
    },
  });
}

main();
```

This adds an empty 'context' command, AKA a command that contains other sub-commands. This is what it looks like:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/extensions/examples/js-commands/empty-cmd.png" alt="" />
</Frame>

## Building "Uninstall"

Let's start with Uninstall. This command first figures out what packages you have installed, and then runs `npm uninstall ${package}`

The simplest way to figure out what you have installed is by parsing `package.json`, and looking at the dependencies object. Since this tutorial is focused on commands, here's the code that reads `package.json` and returns an array of installed packages:

```typescript
async function getPackageJson() {
  // This uses replit's filesystem API to read the package.json file. The command returns an object containing `content` as a string, or an `error` field if something went wrong
  const res = await replit.fs.readFile("package.json");

  if (res.error) return { error: res.error, result: null };

  try {
    let packageJsonObject = JSON.parse(res.content);
    return { error: null, result: packageJsonObject };
  } catch (e) {
    return {
      error: new Error("Failed to parse package.json: " + e.message),
      result: null,
    };
  }
}

async function getInstalledPackages() {
  const packageJsonRes = await getPackageJson();

  if (packageJsonRes.error) return packageJsonRes;

  // This returns an array of { name, version } objects
  const packages = Object.entries(packageJsonRes.result.dependencies).map(([name, version]) => ({
    name,
    version,
  }));

  return {
    error: null,
    result: packages,
  }
}
```

Armed with these functions, we can build the uninstall subcommand. The subcommand returns a list of action commands, one per package.

```typescript
const uninstallCommand = {
  label: "Uninstall",
  description: "Uninstall npm packages",
  commands: async () => {
    const packagesRes = await getInstalledPackages();

    if (packagesRes.error) {
      return null;
    }

    return packagesRes.result.map(({ name, version }) => {
      return {
        label: name,
        description: version,
        run: async () => {
          await replit.exec.exec(`npm uninstall ${name}`);
        },
      };
    });
  },
};
```

To add this command to our root command, simply include `uninstallCommand` as one of the commands returned by the root command:

```typescript
    {
      commands: async () => {
        // This is where subcomands go:
        return [
            uninstallCommand,
        ];
      },
    }
```

This is what it looks like in our JavaScript command now:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/extensions/examples/js-commands/uninstall-root.png" alt="" />
</Frame>

As you can see, the uninstall command lists installed npm packages that you can uninstall

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/extensions/examples/js-commands/uninstall-pkgs.png" alt="" />
</Frame>

## Building "Scripts"

"Scripts" is very similar to uninstall, except that we need to surface the output from the script. For this, we use an experimental API called execInShell.

Other than that, we can reuse most of the code from "Uninstall"

```typescript
async function getScripts() {
  const packageJsonRes = await getPackageJson();

  if (packageJsonRes.error) return packageJsonRes;

  // This returns an array of { name, version } objects
  const scripts = Object.entries(packageJsonRes.result.scripts).map(
    ([name, cmd]) => ({
      name,
      cmd,
    }),
  );

  return {
    error: null,
    result: scripts,
  };
}

const scriptsCommand = {
  label: "Scripts",
  description: "Run scripts in your package.json",
  commands: async () => {
    const scriptsRes = await getScripts();

    if (scriptsRes.error) {
      return null;
    }

    return scriptsRes.result.map(({ name, cmd }) => {
      return {
        label: name,
        description: cmd,
        run: async () => {
          await replit.experimental.execInShell(`npm run ${name}`);
        },
      };
    });
  },
};
```

Let's add the scripts command to our root command!

```typescript
    {
      commands: async () => {
        // This is where subcomands go:
        return [
            scriptsCommand,
            uninstallCommand,
        ];
      },
    }
```

Here's our command!

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/extensions/examples/js-commands/scripts-root.png" alt="" />
</Frame>

## Building "Install"

"Install" is somewhat different: we are pulling external data from the npm registry in response to the user typing in a search query. And we only want to explicitly trigger this search when the user has indicated that they want to search for npm packages to install

```typescript
async function getNpmPackages(search) {
  try {
    const res = await fetch(
      `https://registry.npmjs.org/-/v1/search?text=${search}`,
    );
    const json = await res.json();

    return { error: null, result: json.objects };
  } catch (e) {
    return { error: e, result: null };
  }
}

const installCommand = {
  label: "Install",
  description: "Install a package from npm",
  commands: async ({ search, active }) => {
    // This makes sure we do not perform a search unless someone selects "Install"
    if (!active) {
      return;
    }

    const packagesRes = await getNpmPackages();

    if (packagesRes.error) {
      return null;
    }

    return packagesRes.result.map((pkg) => {
      return {
        label: pkg.package.name,
        description: pkg.package.description,
        run: async () => {
          await replit.experimental.execInShell(`npm i ${pkg.package.name}`);
        },
      };
    });
  },
};
```

Notice the `search` and `active` parameters?

* `active` is `true` when users have selected the "Install" command (as opposed to the command system merely querying for subcommands in advance). We can check for it to make sure that we only query npm when we know that a user is interested in installing an extension.
* `search` returns what the user has typed into the command bar, which we use for searching the npm registry

This means that extensions can decide which scripts are directly accessible from the root CommandBar. For example, the scripts extension can let users search and trigger scripts immediately after opening the CommandBar:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/extensions/examples/js-commands/scripts-directly-accessible.png" alt="" />
</Frame>

We are ready to add "Install" to the root command! This is what our root command object looks like now:

```typescript
  await replit.commands.add({
    id: "js-commands",
    contributions: [replit.ContributionType.CommandBar],
    command: {
      label: "JS",
      description: "JavaScript Commands",
      commands: async () => {
        // This is where subcomands go:
        return [
            installCommand,
            scriptsCommand,
            uninstallCommand,
        ];
      },
    },
  });
```

Open the command bar, type in "Install", select your new command, and give it a try!

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/extensions/examples/js-commands/install-react.png" alt="" />
</Frame>

## Exercises left to the reader

We built a basic version of the JavaScript commands extension. This could be improved quite a bit:

* Did you notice that we only use `npm` in all the examples? JavaScript ecosystem has a plethora of package managers, including yarn, pnpm, and bun. How can we support all of them? And can we do it "magically" where someone using this extension doesn't have to manually select their package manager in our command? (Hint: it involves the lockfiles)

* We can probably cache the npm registry fetch call, so when you backspace through any letters, the results for that search query appear instantly.

* We can debounce npm search requests to prevent hitting npmjs.com excessively while you're typing out the package you're looking for.

* What happens if someone uses this command in a replit app that isn't a JavaScript project? We can probably check for the presence of `package.json` before showing the command. And maybe, if someone doesn't have a `package.json` yet, we can instead show a command to `npm init` their project!

If you just want to look at the solution, see the JavaScript commands extension on the store:

* Here's the link to the [extension](https://replit.com/extension/@ArnavBansal/adccbcd2-c9d6-4778-b0cb-20e1bf289634)
* Here's a link to the extension's [source replit app](https://replit.com/@ArnavBansal/js-commands-extension?v=1)


# JSON Editor
Source: https://docs.replit.com/extensions/examples/json-editor

Build a custom JSON editor extension for Replit using React and react-json-view to enable structured editing and code folding of JSON files.

# Create a JSON editor

In this tutorial, we will create a JSON editor Extension with React and the [react-json-view](https://www.npmjs.com/package/react-json-view) package. Our application will display a JSON file's content and allow users to edit, add or delete properties directly from the editor. When a user finishes editing the JSON, the file will automatically update with the changes.

## Prerequisites

This tutorial assumes that you have a basic knowledge and understanding of web development and React.

## Set up your Replit App

1. Fork the [Replit React Extension Template](https://replit.com/@replit/React-Extension?v=1).
2. Install the `react-json-view` package with `npm install --force react-json-view`. The package uses React 17 as a peer dependency but works fine with React 18 as well.

## Configure the manifest file

Configure the title and description in `public/extension.json` (the Extension [manifest file](../api/manifest)).

```json
{
  "name": "JSON Editor",
  "description": "A viewer/editor for JSON files, providing code folding and structured editing",
  "tags": ["editor"]
}
```

Add the `fileHandlers` property to `extension.json` and provide a handler for JSON files. This tells Replit that your extension handles a particular file pattern using a page provided by your extension at the `handler` path. In this case, the handler is `/`, meaning that Replit shows the page at the root as the handler for all `.json` files

```json
  "fileHandlers": [
    {
      "glob": "*.json",
      "handler": "/"
    }
  ],
```

## Build the JSON editor

Import the following dependencies in `src/App.jsx`.

```js
import * as React from "react";
import ReactJson from "react-json-view";
import "./App.css";
import {
  useReplit,
  useReplitEffect,
  useWatchTextFile,
} from "@replit/extensions-react";
```

Remove all the existing code from the `App` function and a state variable `path`, which will point to the JSON file your Extension will render.

```js
function App() {
  const [path, setPath] = React.useState(null);

  return <div>My app</div>;
}
```

### Initialize the Handshake

Initialize the handshake and derive the `status` and `error` properties from the [`useReplit hook`](../development/react/hooks/useReplit) within the `App` function.

The `status` property is an enumerated value indicating whether the handshake connection with Replit is `loading`, `ready`, or has resulted in an `error`.

```js
function App() {
  ...

  const { status, error } = useReplit();

  ...
}
```

### Get the File Path

Use the [`useReplitEffect`](../development/react/hooks/useReplitEffect) hook and set the `path` state to the `extensionPort`'s file path. This will set the `path` state once the handshake between Replit and your Extension has been established.

```js
useReplitEffect(async ({ extensionPort }) => {
  const filePath = await extensionPort.filePath;

  setPath(filePath);
}, []);
```

### Create the File Watcher

You can easily create a file watcher with the [`useWatchTextFile`](../development/react/hooks/useWatchTextFile) hook. Call the hook, pass in the file path, and derive `content` and `writeChange` from it.

```js
const { content, writeChange } = useWatchTextFile({
  filePath: path,
});
```

### Reflecting file contents

Create a `parsedContent` [React Memo](https://react.dev/reference/react/useMemo) that returns the `content` file value as parsed JSON. If there is an error parsing it, return `null` instead.

The [React useMemo hook](https://react.dev/reference/react/useMemo) caches a result based on an array of dependencies between re-renders to improve performance. Caching reduces the amount of computing required in a process, ultimately improving performance.

```js
const parsedContent = React.useMemo(() => {
  try {
    return JSON.parse(content);
  } catch (e) {
    return null;
  }
}, [content]);
```

### Handle file changes

Create a function which handles changes from the [react-json-view](https://www.npmjs.com/package/react-json-view) editor component. The `updated_src` property passed into this function is a JSON object.

Stringify the JSON object and then write it to the JSON file using the `writeChange` function.

Finally, update the `setContent` state to reflect the contents of the file.

```js
const handleChange = async ({ updated_src: newContent }) => {
  const stringified = JSON.stringify(newContent, null, 2);

  writeChange({
    from: 0,
    to: content.length,
    insert: stringified,
  });
};
```

### Build the UI

It's time to start building the UI.

First, handle loading and error states.

```js
function App() {
  ...

  if (status === "error") {
    return <main>
      <div className="notice error">{error.toString()}</div>
    </main>
  }
  else if (status === "loading") {
    return <main>
      <div className="notice">Loading...</div>
    </main>
  }
  else if (status === "ready") {
    return <main>Ready</main>
  }
}
```

[Install the Extension](/extensions/development/installation) by opening up the Command Bar (**cmd**/**ctrl** + k), navigating to **Extensions**, and selecting **From this Replit App**. The extension should load and display "Ready" almost instantly.

If you open the webview, your extension should load for a few seconds and fail. Extensions should be developed and used within the correct pane rather than the webview.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/extensions/examples/json-editor/load-nocss.png" alt="Loading state" />
</Frame>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/extensions/examples/json-editor/error-nocss.png" alt="Error state" />
</Frame>

If both `path` and `content` are valid strings, render the editor. If not, tell the user to select a file.

```js
else if (status === "ready") {
  return <main>
    {path && content ?
      <ReactJson
        style={{ width: '100vw', height: "100vh", padding: "1em" }}
        theme="ocean"
        displayDataTypes={false}
        src={parsedContent}
        onEdit={handleChange}
        onAdd={handleChange}
        onDelete={handleChange}
      /> :
      <div className="notice">
        Please select a file
      </div>
    }
  </main>
}
```

That's it. Now install and load your Extension, and it should work.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/extensions/examples/json-editor/file-select-nocss.png" alt="Select a file" />
</Frame>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/extensions/examples/json-editor/editor-nocss.png" alt="Editor without CSS" />
</Frame>

### Style your Extension

Right now, the Extension has barely any styles applied to it. To make it look more polished, paste the following into `App.css`:

```css
html,
body {
  margin: 0;
  padding: 0;
  height: 100%;
  width: 100%;
  display: flex;
  font-family: sans-serif;
  background: black;
  color: white;
}

#root,
main {
  flex-grow: 1;
  display: flex;
  width: 100%;
}

.notice {
  flex-grow: 1;
  align-self: center;
  justify-self: center;
  text-align: center;
  color: white;
  font-size: 24px;
}
```

***

Your Extension is now complete! [Install it](/extensions/development/installation), press the kebab menu on a JSON file in the file tree and then select "Open with JSON Editor" to start editing your JSON files with ease.

[See full solution](https://replit.com/@IroncladDev/JSON-editor-example?v=1).

<video controls src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/extensions/videos/json-editor.mp4" />

<iframe src="https://replit.com/@IroncladDev/JSON-editor-example?embed=true" height="600" />


# Snippet Manager
Source: https://docs.replit.com/extensions/examples/snippet-manager

Learn how to build a snippet manager extension that lets developers store and organize code snippets directly within the Replit workspace.

# Create a Snippet Manager

In this tutorial, we will build a snippet manager extension with React. A snippet manager is a tool used for storing and organizing commonly used pieces of code or text that can be quickly accessed.

## Prerequisites

This tutorial assumes that you have a basic knowledge and understanding of web development and React.

## Set up your Replit App

1. Fork the [Replit React Extension Template](https://replit.com/@replit/React-Extension?v=1).
2. Install the `react-feather` package with `npm install react-feather`.

## Configure the manifest file

Configure the title and description in `public/extension.json` (the Extension [manifest file](../api/manifest)).

```json
{
  "name": "Snippet Manager",
  "description": "Easily access snippets of code directly within the Replit workspace",
  "version": "0",
  "tags": ["snippet", "manager", "tool"]
}
```

Add the `tools` property to `extension.json` and provide a tool that handles the `/` route of your application. This will allow your extension to appear as a tool in the sidebar.

```json
"tools": [
  {
    "handler": "/",
    "name": "Snippet Manager"
  }
]
```

## Build the Snippet Manager

Import the following dependencies in `src/App.jsx`

```js
import { useReplit, useReplitEffect } from "@replit/extensions-react";
import { replDb } from "@replit/extensions";
import { useState } from "react";
import "./App.css";
```

Remove all the existing code from the `App` function and add state variables `snippets` and `newSnippetValue`. `snippets` will store all of the snippets you've created and `newSnippetValue` will be a string for when you create a new snippet.

```jsx
function App() {
  const [snippets, setSnippets] = useState([]);
  const [newSnippetValue, setNewSnippetValue] = useState("");

  return (
    <main>
      <h1>Snippet Manager</h1>
    </main>
  );
}
```

### Initialize the Handshake

Initialize the handshake and derive the `status` and `error` properties from the [`useReplit hook`](../development/react/hooks/useReplit) within the `App` function.

The `status` property is an enumerated value indicating whether the handshake connection with Replit is `loading`, `ready`, or has resulted in an `error`.

```js
function App() {
  ...
  const { status, error } = useReplit();
  ...
}
```

### Handle Handshake Statuses

Handle the `loading` and `error` statuses from the `useReplit` hook. If the Extension is neither loading nor has resulted in an error, the main content will be rendered.

```jsx
function App() {
  ...

  if(status === 'error') {
    return <div className="screen">
      <h2>Error: {error.message}</h2>
    </div>
  }

  if(status === 'loading') {
    return <div className="screen">
      <h2>Loading...</h2>
    </div>
  }

  return <main>
    <h1>Snippet Manager</h1>
  </main>
}
```

Paste the following CSS code into `src/App.css` to apply basic styling to your exstension. If you refresh the extension, the snippets you've added will be saved.

```css
body {
  background-color: rgb(40, 40, 40);
  color: white;
  margin: 0;
  font-family: sans-serif;
}

main {
  padding: 16px;
  display: flex;
  flex-direction: column;
}

main h1 {
  margin-top: 0;
  margin-bottom: 16px;
}

.screen {
  height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
}
```

### Snippet Creation

Create an empty function `insertSnippet` within the `App` function.

```js
const insertSnippet = () => {};
```

Add the following JSX code into the `App` function after the `h1` tag. This will be a basic form to create a new snippet.

```jsx
<div className="create-snippet-form">
  <textarea
    placeholder="Enter a new snippet here..."
    value={newSnippetValue}
    onChange={(e) => setNewSnippetValue(e.target.value)}
  ></textarea>
  <div>
    <button onClick={insertSnippet}>Add Snippet</button>
  </div>
</div>
```

Define an asynchronous function `updateSnippets` in `App`. This will allow us to update the `snippets` state variable and save it using the [replDb module](../api/replDb) at the same time.

<Note>
  Values saved to a Replit App's database get automatically URI-decoded so encoding has to happen twice. Replit App Databases can only store key-values as strings. [Read More](https:/.replit.com/cloud-services/storage-and-databases/replit-database).
</Note>

```js
const updateSnippets = async (snippetsArr) => {
  setSnippets(snippetsArr);
  await replDb.set({
    key: "snippets",
    value: encodeURIComponent(snippetsArr.map(encodeURIComponent).join(",")),
  });
};
```

Back in the `insertSnippet` function, use the `updateSnippets` function to insert and save `newSnippetValue` to the list of snippets.

```js
const insertSnippet = () => {
  updateSnippets([...snippets, newSnippetValue]);
  setNewSnippetValue("");
};
```

Add the following CSS code into `src/App.css` to style the snippet creation form:

```css
.create-snippet-form {
  display: flex;
}

.create-snippet-form textarea {
  flex-grow: 1;
  margin-right: 8px;
}

textarea,
button {
  padding: 8px;
  background-color: rgb(90, 90, 90);
  border-radius: 8px;
  border: none;
  color: white;
  outline: none;
}

textarea:focus,
textarea:hover {
  border: none;
  outline: none;
  box-shadow: 0 0 0 2px #3273dc;
}

textarea::placeholder {
  color: rgb(200, 200, 200);
}

button {
  cursor: pointer;
}

button:focus,
button:hover {
  outline: none;
  background-color: #3273dc;
}
```

### Load and list the snippets

Define an asynchronous function `loadSnippets` in `App`. This function will fetch all the snippets from the Replit database and update the `snippets` state variable.

```jsx
const loadSnippets = async () => {
  const snippetsFromDB = await replDb.get({
    key: "snippets",
  });

  if (snippetsFromDB) {
    setSnippets(snippetsFromDB.split(",").map(decodeURIComponent));
  }
};
```

Call the [`useReplitEffect` hook](../development/react/hooks/useReplitEffect) to run the `loadSnippets` function once, when Replit successfully connects to your Extension.

```js
useReplitEffect(() => loadSnippets(), []);
```

Add the following code to the main UI after the `.create-snippet-form` element. Display each snippet as a paragraph from the `snippet` state variable.

```jsx
<div className="snippet-list">
  {snippets.map((snippet, index) => (
    <p key={index}>{snippet}</p>
  ))}
</div>
```

[Install your extension](/extensions/development/installation), start creating some snippets, watch as they appear in realtime.

### The Snippet Component

You will be able to copy, edit, and delete snippets from the `Snippet` component with the click of a button.

Create a file `src/components/Snippet.jsx` and import the following dependencies:

```js
import { messages } from "@replit/extensions";
import { Copy, Edit2, Trash } from "react-feather";
import { useState, useEffect } from "react";
```

Create and export the `Snippet` component. The props declared in this component are as follows:

* `content` is the value of the snippet
* `index` is a number signifying the index of the snippet
* `snippets` is a full list of all the snippets in the database
* `updateSnippets` is the asynchronous function passed down from the `App` component

Add two state variables `isEditing` and `value`. `isEditing` indicates whether the snippet is being edited and `value` is the new value which will be used when editing the snippet, before it is saved.

```jsx
export const Snippet = ({ content, index, snippets, updateSnippets }) => {
  const [isEditing, setIsEditing] = useState(false);
  const [value, setValue] = useState(content);

  return <div>Snippet Component</div>;
};
```

Add a useEffect hook to set `value` to `content` whenever `content` updates. The prop will change when snippets get edited and deleted.

```js
useEffect(() => setValue(content), [content]);
```

Create a function `copyToClipboard`. Handle the asynchronous clipboard event with the `.then()` and `.catch()` methods. Use the [`messages` module](../api/messages) to display whether the action was successful or not.

```js
const copyToClipboard = () => {
  window.navigator.clipboard
    .writeText(content)
    .then(async () => await messages.showConfirm("Copied to clipboard"))
    .catch(async (e) => await messages.showError(e.message));
};
```

Define a function `saveEdit`. This will update the current snippet to reflect the `value` state variable and save it to the database.

```js
const saveEdit = async () => {
  const snippetsArr = [...snippets];
  snippetsArr[index] = value;

  await updateSnippets(snippetsArr);
  setIsEditing(false);
};
```

Add a function `deleteSnippet`. After it is confirmed that the user wants to delete the snippet, remove the snippet from both the application state and the database.

```js
const deleteSnippet = async () => {
  const shouldDelete = confirm("Are you sure you want to delete this snippet?");

  if (shouldDelete) {
    const snippetsArr = [...snippets];
    snippetsArr.splice(index, 1);

    await updateSnippets(snippetsArr);
    await messages.showConfirm("Snippet Deleted");
  }
};
```

Complete the UI of the `Snippet` component with the following JSX code. If the snippet is being edited, a different component will be shown.

```jsx
return isEditing ? (
  <div className="snippet edit">
    <textarea value={value} onChange={(e) => setValue(e.target.value)} />
    <div className="snippet-button-row">
      <button onClick={() => setIsEditing(false)}>Cancel</button>
      <button onClick={saveEdit}>Save</button>
    </div>
  </div>
) : (
  <div className="snippet">
    <p>{content}</p>

    <div className="snippet-buttons">
      <button onClick={copyToClipboard}>
        <Copy />
      </button>

      <button onClick={() => setIsEditing(true)}>
        <Edit2 />
      </button>

      <button onClick={deleteSnippet}>
        <Trash />
      </button>
    </div>
  </div>
);
```

Apply the following CSS to `src/App.css`:

```css
.snippet {
  padding: 8px;
  background: rgb(70, 70, 70);
  margin-bottom: 8px;
  display: flex;
  padding: 8px;
  border-radius: 8px;
}

.snippet p {
  flex-grow: 1;
  margin: 0;
  padding: 0;
}

.snippet-buttons {
  display: flex;
}

.snippet-buttons button {
  margin-left: 8px;
}

.edit {
  flex-direction: column;
}

.edit textarea {
  margin-bottom: 8px;
}

.edit .snippet-button-row button {
  margin-right: 8px;
}
```

### Display the snippets

In `App.jsx`, import the `Snippet` component.

```js
import { Snippet } from "./components/Snippet";
```

Update the `.snippet-list` div to render the new component.

```js
snippets.map((snippet, index) => (
  <Snippet
    key={index}
    content={snippet}
    snippets={snippets}
    updateSnippets={updateSnippets}
    index={index}
  />
));
```

Finally, style the snippet list with the following CSS:

```css
.snippet-list {
  flex-direction: column;
  display: flex;
  margin-top: 8px;
}
```

***

The Snippet Manager extension is now complete! [Install it](/extensions/development/installation), open the Tools section on the sidebar, and select the Snippet Manager extension. You can now easily save and access your favorite snippets directly within your Replit App.

[See full solution](https://replit.com/@IroncladDev/Snippet-Manager)

<Frame>
  <video controls src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/extensions/videos/snippet-manager.mp4" />
</Frame>

<iframe src="https://replit.com/@IroncladDev/Snippet-Manager?embed=true" height="600" />


# Extension Developer Docs
Source: https://docs.replit.com/extensions/extensions

Welcome! These docs contain docs, examples, and API references for the Replit Extensions platform.

## What are Replit Extensions?

Replit Extensions are a way to customize your Workspace, integrate the tools you already use, or create entirely new developer tools. You can create extensions for yourself, your team, or publish them to the Extensions Store for the whole community to discover. Extensions can be as simple as a CLUI Command, or as complex as a full-featured custom editor.

There are three main parts to the platform:

* **API**: Replit provides a JavaScript library, complete with React bindings, TypeScript, and Replit App templates. These APIs let you interact with Replit services, access Replit App files, render custom UI, and more.*[Read the API spec →](/extensions/category/api-reference)*
* **Workspace**: When you create an Extension, you'll get a Replit App Workspace tailored with all the tools and docs you need to build your idea.*[Learn about devtools →](/extensions/development/devtools)*
* **Store**: When it's ready, your extension can be shared publicly, or privately, by releasing it on the Extensions Store. IDEs are a great way to share your work with the community, get feedback from users, and grow your audience.*[Publish your extension →](/extensions/publish)*


# Frequently Asked Questions
Source: https://docs.replit.com/extensions/faq

Common questions and answers about building, verifying, and troubleshooting Replit Extensions, including server setup and webview integration.

<AccordionGroup>
  <Accordion title="How does my extension get verified?">
    A Replit staff member must review your Extension and manually verify it.
  </Accordion>

  <Accordion title="My backend server isn't working with my extension">
    Extensions are expected to be a bundle that can be [statically served](https://blog.hubspot.com/website/static-vs-dynamic-website). This means that you can't run a server in the same Replit App as the extension you're hosting. We would recommend separating your server and client for extension development.
  </Accordion>

  <Accordion title="My extension is throwing a timeout error">
    Make sure you are viewing your extension through the correct pane and not the [webview](https:/.replit.com/additional-resources/add-a-made-with-replit-badge-to-your-webview#what-is-the-webview). To correctly open your extension, use the [Extension Devtools](/extensions/development/devtools).
    If your extension is opened in the correct pane, hit the Reload icon in the extension tab.

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/reload-head.png" />
    </Frame>
  </Accordion>

  <Accordion title="What's the difference between the Webview and an Extension?">
    The webview is a normal iframe that displays the web output of your Replit App. In the case of an extension, a special handshake is established between it and the Replit workspace.
  </Accordion>
</AccordionGroup>


# Key Concepts
Source: https://docs.replit.com/extensions/key-concepts

On this page, you'll learn the key concepts of Replit Extensions. If you're new to Extensions, we recommend you start with the [Get Started guide](/extensions/).

## Platform

### Extension

Extensions allow you to add custom functionality, tools, and third-party integrations to the Workspace. Extensions can be installed by any user via the Store.

### Store

The Extensions Store is a marketplace for Extensions. Anyone can create and release an extension on the store. You can also share private links to unlisted Extensions, which is great for testing, internal tools, and more.

***

## Development

### Extension Repl

Extension Repls contain the frontend code for your Extension. You can use HTML / CSS / Javascript, and any web framework of your choice. We provide templates that use React and Vanilla Javascript.

### Devtools

Extension Devtools are a set of tools that help you build and test your Extension. In the Extension Repl workspace, you can access the Devtools by clicking the "Devtools" button in the header.

## Extension Features

### Tool (*Extension UI*)

A custom user interface presented as a Tab in the workspace. Examples include a ReplDB editor or a Chat Extension. Learn how to [build your first tool](/extensions/examples/snippet-manager).

### File Handler (*File Editors and Icons*)

File handlers allow you to build Tools and add icons for specific file types. Examples include a JSON file editor or a CSV file editor. Learn how to [build your first file handler](/extensions/examples/json-editor). Under the hood, file handlers are just tools with a filetype association.

### Command

Commands allow you to add custom commands to the CLUI command bar. Commands are a great way to build a CLI-like experience for your extension, and enable quick actions for your users.

### Background Script

Background scripts are loaded when the Repl opens. They remain permanently loaded until the extension is uninstalled or you close the workspace.


# Publish your Extension
Source: https://docs.replit.com/extensions/publish

Learn how to prepare and publish your Replit Extension to the store, including icon design, build configuration, and the review process.

After you've finished building your Extension, it's time to publish it to the store for all to use. There are a few steps you will need to complete before you release it. Extensions are expected to be a bundle that can be statically served.

## Design an Icon

Extensions need to have a clean, visible, and memorable icon before being added to the store. We have a [Figma template](https://www.figma.com/community/file/1220063901895293170) you can use to design your own, or you can use the Icon Generator to create one for you.

<Card image="https://extension-9d8280fb-1a5f-495b-9624-aba982c42205.theflowingsky.repl.co/cover.png" href="https://replit.com/extension/@theflowingsky/9d8280fb-1a5f-495b-9624-aba982c42205" title="Icon Generator Extension" icon="icons" horizontal description="Use this extension in your Extension Replit App to generate an icon for your own extension" />

<Frame>
  <a href="https://www.figma.com/community/file/1220063901895293170">
    <img src="https://s3-alpha.figma.com/hub/file/3206318308/7beb7f18-f8da-4456-91ee-e5e676cbd610-cover.png" alt="Extension Icon Cover" />
  </a>
</Frame>

## Building

If you use a framework like React, you will need to build a static output folder which renders the extension's contents statically. The default template already has the build steps configured, just confirm that it works by running the build command in the shell.

If you are using HTML/CSS/JS, set the build command to a single space `" "` and set the output directory to your Replit App's base URL `.`.

### Vite

Running `npx vite build` will create a static folder `dist`. Set `build` to `vite build` in your `package.json` file and set the extension's build command to `npm run build`. Next, set the output folder to `dist`.

### Next.js

Next.js supports building a [static HTML export](https://nextjs.org/advanced-features/static-html-export), but some features such as server-side rendering and API routes are not supported.

In `next.config.js`, set the `output` property to `"export"`.

The required steps to build the static output folder consist of:

1. Deleting the `.next` folder
2. Building in development mode
3. Running `next export`

All three steps can be collapsed into a single bash command, which can be set as the `"export"` command in `package.json`.

```json
"scripts": {
  "dev": "next dev",
  "build": "next build",
  "start": "next start",
  "export": "rm -rf .next && export NODE_ENV=development && yarn build && next export"
},
```

Running `next export` will create a static folder `out`. In the Extension Devtools, set the build command to `npm run export` and the output folder to `out`.

## Review

After your extension has been published, you must wait for a Replit staff member to review it before it can be put on the store.


# Extension Templates
Source: https://docs.replit.com/extensions/templates

Replit provides a few templates to help you get started with your extension. You can find them in the "Create Repl" menu, or fork one by clicking a link below.

<CardGroup>
  <Card title="React Extension" icon="react" href="https://replit.com/new/extension?template=656d6107-3a39-4802-b8d9-59479cc5e358">
    A starter template for Replit Extensions using the React JavaScript framework.

    <Card title="Use Template" icon={<svg preserveAspectRatio="xMidYMin" width="16" height="16" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true"><path fill-rule="evenodd" clip-rule="evenodd" d="M21.25 6C21.25 4.75736 20.2426 3.75 19 3.75C17.7574 3.75 16.75 4.75736 16.75 6C16.75 7.24264 17.7574 8.25 19 8.25C20.2426 8.25 21.25 7.24264 21.25 6ZM19 2.25C21.0711 2.25 22.75 3.92893 22.75 6C22.75 8.07107 21.0711 9.75 19 9.75C17.1858 9.75 15.6725 8.46168 15.325 6.75L12 6.75C11.3096 6.75 10.75 7.30964 10.75 8L10.75 16C10.75 16.6904 11.3096 17.25 12 17.25L15.325 17.25C15.6725 15.5383 17.1858 14.25 19 14.25C21.0711 14.25 22.75 15.9289 22.75 18C22.75 20.0711 21.0711 21.75 19 21.75C17.1858 21.75 15.6725 20.4617 15.325 18.75L12 18.75C10.4812 18.75 9.25 17.5188 9.25 16L9.25 12.75L2 12.75C1.58579 12.75 1.25 12.4142 1.25 12C1.25 11.5858 1.58579 11.25 2 11.25L9.25 11.25L9.25 8C9.25 6.48122 10.4812 5.25 12 5.25L15.325 5.25C15.6725 3.53832 17.1858 2.25 19 2.25ZM21.25 18C21.25 16.7574 20.2426 15.75 19 15.75C17.7574 15.75 16.75 16.7574 16.75 18C16.75 19.2426 17.7574 20.25 19 20.25C20.2426 20.25 21.25 19.2426 21.25 18Z"></path></svg>} href="href" />
  </Card>

  <Card title="Javascript Extension" icon="js" href="https://replit.com/new/extension?template=44dadedd-8045-46a9-ad28-2b86699a861">
    A starter template for a Replit Extension with Vanilla JavaScript

    <Card title="Use Template" icon={<svg preserveAspectRatio="xMidYMin" width="16" height="16" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true"><path fill-rule="evenodd" clip-rule="evenodd" d="M21.25 6C21.25 4.75736 20.2426 3.75 19 3.75C17.7574 3.75 16.75 4.75736 16.75 6C16.75 7.24264 17.7574 8.25 19 8.25C20.2426 8.25 21.25 7.24264 21.25 6ZM19 2.25C21.0711 2.25 22.75 3.92893 22.75 6C22.75 8.07107 21.0711 9.75 19 9.75C17.1858 9.75 15.6725 8.46168 15.325 6.75L12 6.75C11.3096 6.75 10.75 7.30964 10.75 8L10.75 16C10.75 16.6904 11.3096 17.25 12 17.25L15.325 17.25C15.6725 15.5383 17.1858 14.25 19 14.25C21.0711 14.25 22.75 15.9289 22.75 18C22.75 20.0711 21.0711 21.75 19 21.75C17.1858 21.75 15.6725 20.4617 15.325 18.75L12 18.75C10.4812 18.75 9.25 17.5188 9.25 16L9.25 12.75L2 12.75C1.58579 12.75 1.25 12.4142 1.25 12C1.25 11.5858 1.58579 11.25 2 11.25L9.25 11.25L9.25 8C9.25 6.48122 10.4812 5.25 12 5.25L15.325 5.25C15.6725 3.53832 17.1858 2.25 19 2.25ZM21.25 18C21.25 16.7574 20.2426 15.75 19 15.75C17.7574 15.75 16.75 16.7574 16.75 18C16.75 19.2426 17.7574 20.25 19 20.25C20.2426 20.25 21.25 19.2426 21.25 18Z"></path></svg>} href="href" />
  </Card>
</CardGroup>


# Overview
Source: https://docs.replit.com/faq

Find answers to common questions about Replit, including account management, troubleshooting, billing support, and using key features.

export const CycleValue = '$0.01';

<Tabs>
  <Tab title="General">
    <AccordionGroup>
      <Accordion title="Where can I get code-level help?">
        The best place to get help with code is to use [Replit AI](/category/replit-ai/). In your Workspace, open a new tab and search for **AI**. Replit AI can help you set up new projects, answer questions about your code, and assist your thinking. For further assistance, you can also check our [Community Hub](https://replit.com/community) for additional resources.
      </Accordion>

      <Accordion title="I am having trouble using Replit. How can I get help?">
        Sign in to Replit and use the **?** on the top right corner of the page for help. For additional support, refer to the [support policy doc](/legal-and-security-info/support-policy).
      </Accordion>

      <Accordion title="Where can I get help with billing?">
        Before contacting the Support team, check if you can find a solution below under **Account**. If that does not help, please sign in and use the **?** on the top right corner of the page for help.
      </Accordion>

      <Accordion title="I cannot access my Replit account – what should I do?">
        Please email `support@replit.com` and include your account username and sign-in ID.
      </Accordion>

      <Accordion title="When will I get a response from Replit?">
        Replit support is generally available Monday through Friday from 9 a.m. to 8 p.m. Eastern Standard Time (UTC-5).
      </Accordion>

      <Accordion title="How do I restore my folders in my Replit App?">
        Navigate to your profile identity located on the top right corner of your Replit App, select **CLUI**, and in the search box that appears, search by typing *restore*. In the search results, you'll see an option **restore-folder** to restore a specific folder from the trash.

        > Note: Deleted Replit Apps are permanently deleted and unrecoverable **30-days** after their original deletion date.
      </Accordion>

      <Accordion title="How do I restore a deleted Replit App?">
        Navigate to your profile identity located on the top right corner of your Replit App, select **CLUI**, and in the search box that appears, search by typing *restore*. In the search results, you'll see an option **restore-repl** to restore a specific Replit App from the trash.

        > Note: Deleted Replit Apps are permanently deleted and unrecoverable **30-days** after their original deletion date.
      </Accordion>

      <Accordion title="Why is my Replit App failing to load?">
        If your Replit App is failing to load, try these debugging steps:

        1. Test your [internet connection](https://www.speedtest.net/).
        2. Try a different browser.
        3. Check if your browser has enabled JavaScript.
        4. Use the command `kill 1` in the shell to kill and restart the virtual Linux machine backing your Replit App.

        If none of the above steps helped, check Replit's [Service Status](https://status.replit.com). If you see the status as **All systems are go!** and you still have issues loading your Replit App, please get in touch with [Replit Support](https://replit.com/support).
      </Accordion>

      <Accordion title="How can I upload a large file to my Replit App?">
        If the file is too large for a standard GUI upload, you can use `scp` (Secure Copy) to securely transfer files between local and remote systems over [SSH](/replit-workspace/ssh). To copy files from your local machine to the remote machine, use this syntax:`scp filename username@ip_address:/home/username`

        You can also copy entire directories using scp.
      </Accordion>

      <Accordion title="How do I convert my Cycles to usage credits?">
        Go to [https://replit.com/\~/cli/account/cycles-to-usage-credits](https://replit.com/~/cli/account/cycles-to-usage-credits) to convert Cycles to credit. Each Cycle is equivalent to a {CycleValue} USD usage credit. This is an irreversible operation.
      </Accordion>

      <Accordion title="How do I check my usage credit balance?">
        If you convert your Cycles into credit, you can view your current balance at [https://replit.com/\~/cli/account/usage-credits-balance](https://replit.com/~/cli/account/usage-credits-balance).
      </Accordion>

      <Accordion title="What are Cycles still used for on Replit?">
        Cycles can still be used for Bounties.
      </Accordion>
    </AccordionGroup>
  </Tab>

  <Tab title="Accounts">
    <Accordion title="I'm having trouble logging in; what should I do?">
      1. Make sure you are using the correct email and password.
      2. To reset your password, navigate to the [forgot password page](https://replit.com/forgot). Be sure to check your spam folder for the reset email from `notifications@replit.com`.
      3. Try logging in through a different browser.

      If all the steps you've tried don't succeed, please [Contact Support](https://replit.com/support).
    </Accordion>

    <Accordion title="How do I change my email if I signed up with Google/GitHub/Facebook/Apple?">
      We require a password to change the email on your account. If you sign up with a third-party authentication provider such as Google or GitHub, you will first need to create a password.

      To create a password:

      1. Open the sidebar and log out.
      2. Return to the login page, select [forgot password](https://replit.com/forgot), and enter your email address.
      3. You will receive an email with a link to create a new password. If you don't see the email, check your spam folder and allow up to thirty minutes for the email to be sent.
      4. After logging in, navigate to the [account page](https://replit.com/account) to change your email address.
    </Accordion>

    <Accordion title="How do I change my username?">
      Replit users can change their username only **once**. Navigate to the [CLUI](https://replit.com/~/cli/account/change-username?run=1) and select **change-username**. If the option is unavailable to you, you've already changed it.
    </Accordion>

    <Accordion title="What is Explorer mode, and how can I activate it?">
      Explorers are Replit users who have opted to see and test new features that are still in development. To enable Explorer mode, navigate to the [Account Page](https://replit.com/account#roles) and toggle the switch.
    </Accordion>
  </Tab>
</Tabs>


# Introduction
Source: https://docs.replit.com/getting-started/intro-replit

Replit is a browser-based platform where you can effortlessly create and share apps without installation or setup.

Replit takes you from idea to app as fast as possible.

The platform provides all the tools you must create amazing applications from one browser tab—no installation required.
Replit includes AI coding tools, real-time collaboration, and project sharing to give you a head start on your app creation journey.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/getting-started/workspace.jpg" alt="Replit Workspace" />
</Frame>

## Quickstart guides

To create your app on Replit, choose the guide that matches your needs:

<CardGroup cols={2}>
  <Card title="Remix an existing app" icon="shuffle" href="/getting-started/quickstarts/remix-an-app/">
    ⏱️ *1 minute*

    Jump-start your project by building on community-contributed apps.
  </Card>

  <Card title="Ask AI" icon="robot" href="/getting-started/quickstarts/ask-ai/">
    ⏱️ *7 minutes*

    Use the AI-powered Replit tools to create, explain, and debug your app.
  </Card>

  <Card title="Build from Scratch" icon="user-chef" href="/getting-started/quickstarts/from-scratch/">
    ⏱️ *15 minutes*

    Create a full-stack app with complete control.
  </Card>

  <Card title="Import from GitHub" icon="github" href="/getting-started/quickstarts/import-from-github/">
    ⏱️ *2 minutes*

    Import an existing GitHub repository into Replit.
  </Card>
</CardGroup>

{/* vale off */}

<Info>
  You can also create an app from an existing GitHub repository. For instructions, see [Import a GitHub repository](/replit-workspace/using-git-on-replit/import-repository).
</Info>

{/* vale on */}

## What is Replit

Replit is an AI-powered platform that lets you create and deploy apps from a single browser tab.
The platform eliminates the complexity of traditional app-creation environments by combining coding,
deployment, and collaboration tools in a single interface.

Typically, you must install programs, languages, and packages to build apps.
However, on Replit, you can rely on AI to configure your environment so you can start building without coding experience.

The platform supports full-featured development and coding environments for those familiar with coding, so there's no limit on what's possible.

### Workspace features

Replit provides the following essential app creation tools:

* [Real-time preview](/replit-workspace/workspace-features/webview) of your app
* [Deploy in minutes](/category/replit-deployments)
* Browser native app that requires zero installation and configuration
* [Full-featured code editor](/replit-workspace/introduction-to-workspace)
* [Mobile app](/platforms/mobile-app) for building apps from your phone or tablet
* [AI-assisted app creation](/replitai/agent)
* [Version control integration](/replit-workspace/using-git-on-replit) for tracking changes
* [Collaborative building](/teams/collaboration-on-replit) over the network

### AI companion capabilities

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/getting-started/agent.jpg" alt="Replit AI Agent" />
</Frame>

Replit AI [Agent](/replitai/agent) and [Assistant](/replitai/assistant) accelerate app creation with the following capabilities:

* Complete app generation and setup from natural language descriptions
* Code suggestions and autocomplete
* Automated error detection and debugging assistance
* Documentation generation for your app

### Share in minutes

Deploy your apps in minutes using the following tools:

* App deployment to the cloud in a few clicks
* Database integration and hosting
* Custom domain support and connection encryption for your applications

## Additional information

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/getting-started/mobile.jpg" alt="Replit Mobile" />
</Frame>

To learn more about all of Replit's features, see the following resources:

* Learn about the workspace features from [Introduction to the Workspace](/replit-workspace/introduction-to-workspace/).
* Learn about the capabilities of the Replit AI-powered features from [Replit Agent](/replitai/agent/) and [Replit Assistant](/replitai/assistant/).
* Learn how to share your creations from [Sharing Your Replit App](/replit-app/collaborate/).
* [Download the mobile app](https://replit.com/mobile/) for iOS or Android devices.


# Create a Slack channel summarizer
Source: https://docs.replit.com/getting-started/quickstarts/ai-slack-channel-summarizer

Build a Slack bot that summarizes channel activity using GPT-4. Learn how to integrate AI with Slack's API.

Turn your Slack conversations into concise summaries with AI. This guide shows you how to create a bot that summarizes channel activity using GPT-4.

## Features

<CardGroup cols={2}>
  <Card title="Channel Summaries" icon="message-bot">
    Summarize Slack channel activity for any time period
  </Card>

  <Card title="GPT-4 Integration" icon="brain-circuit">
    Generate intelligent, context-aware summaries using OpenAI's GPT-4
  </Card>
</CardGroup>

## Create your summarizer

<Steps>
  <Step title="Fork the template">
    1. Sign in to Replit
    2. Navigate to the [AI Slack summary template](https://replit.com/@replit-matt/Slack-Channel-Summary-Bot)
    3. Select **+ Use Template** in the upper-right corner
    4. Follow the prompts to create your Replit App
  </Step>

  <Step title="Create a Slack app">
    1. Go to the [Slack Apps page](https://api.slack.com/apps)
    2. Select **Create an App**
    3. Choose **From an app manifest**
    4. Select your workspace from the dropdown
    5. Replace the manifest content with the [manifest.json](https://replit.com/@replit-matt/Slack-Channel-Summary-Bot#assets/manifest.json) file
    6. Review the configuration and select **Create**
    7. Select **Install the App**

    <Note>
      You may need administrator approval to install the app depending on your organization's settings.
    </Note>
  </Step>

  <Step title="Configure your tokens">
    Add the following secrets to your Replit App's **Secrets** tab:

    1. **SLACK\_BOT\_TOKEN**
       * Navigate to Settings > Install App in your Slack App
       * Copy the **Bot User OAuth Token**
    2. **SLACK\_SIGNING\_SECRET**
       * Go to Settings > Basic Information
       * Copy the **Signing Secret** from App Credentials
    3. **SLACK\_APP\_TOKEN**
       * Go to Settings > Basic Information
       * Under App-Level Tokens, select **Generate Token and Scopes**
       * Add a token name and select permissions
       * Copy the generated token
    4. **OPENAI\_API\_KEY**
       * Get your API key from OpenAI's platform
  </Step>

  <Step title="Deploy your bot">
    1. Select **Deploy** in the Workspace header
    2. Choose **Reserved VM Deployments**
    3. Select **Set up your deployment**
    4. Select **Deploy**
  </Step>
</Steps>

## Using your summarizer

Add your bot to a channel and send it a direct message with the following command:

```bash
/summarize-channel #channel-name duration
```

For example, to summarize the last 24 hours of activity in #general:

```bash
/summarize-channel #general 24
```

## Customization options

<AccordionGroup>
  <Accordion title="Summarization criteria">
    Customize your summaries by modifying the prompt to focus on specific keywords or topics.
  </Accordion>

  <Accordion title="Platform integrations">
    Extend functionality by connecting with additional platforms and services.
  </Accordion>

  <Accordion title="Alert messages">
    Customize the format and content of Slack alert messages.
  </Accordion>

  <Accordion title="Summary frequency">
    Configure different summarization intervals for channels or topics.
  </Accordion>
</AccordionGroup>


# Create with AI
Source: https://docs.replit.com/getting-started/quickstarts/ask-ai

Learn how to create a Replit App using AI-powered tools.

## Create your app using AI

⏰ *Estimated time: 7 minutes*

Learn how to create your Replit App using the **Agent** and **Assistant** AI tools in this guide.

<CardGroup cols={2}>
  <Card title="Agent" icon="robot">
    Specializes in generating new projects and building complex features.
  </Card>

  <Card title="Assistant" icon="wand-magic-sparkles">
    Specializes in describing your code, making quick fixes, and adding new features.
  </Card>
</CardGroup>

Follow the steps below to build a polished business website. Use Replit's
AI features to create an app, and refine it until it matches your desired design.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/getting-started/quickstart_ai_complete.png" width="500" alt="image of the Completed App" />
</Frame>

<Steps>
  <Step title="Create an App">
    Navigate to the Home screen and select **Create App**:

    <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/shared/buttons/create_app.png" width="250" alt="image of the Create App button" />

    Select the **Create with Replit Agent** tab as shown in the following image:

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/getting-started/quickstart_ai_agent_tab.png" alt="image of the Create with Replit Agent tab" />
    </Frame>
  </Step>

  <Step title="Craft your prompt">
    To ask Agent to create your Replit App, enter your **prompt** in the text area.
    A prompt is a description of the task you want AI to perform.

    You can include text and file attachments in your prompt. Follow these steps to submit both in your prompt:

    1. Copy the following image:
       <Frame>
         <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/getting-started/saas_website.png" alt="image of a SaaS business website" />
       </Frame>
    2. Paste the image into Agent text area.
    3. Enter the following prompt in the text area:
       ```text
        Build a website for a SaaS B2B website that looks like the attached file.
       ```
    4. Select **Start building**.
  </Step>

  <Step title="Review and approve Agent's plan">
    After you submit your prompt, Agent sets up your Replit App and provides updates on its status in real time.
    You can monitor and view the history in the **Progress** tab.

    When Agent finishes setup, it prompts you with what it intends to build and options to include additional features as shown in the following image:

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/getting-started/quickstart_ai_agent_approve.png" alt="image of Agent's approve dialog" />
    </Frame>

    Leave the additional options unchecked and select **Approve plan & start**.
  </Step>

  <Step title="Test the app">
    After Agent builds your app, navigate to the **Webview** tab, where you can interact with the website.
    The website should resemble the following image:

    <Note>The generated website might differ since Agent can return different results for the same prompt.</Note>

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/getting-started/quickstart_ai_agent_generated_page.png" alt="image of the Webview showing the website created by Agent" />
    </Frame>

    Since the prompt only includes information about the landing page, Agent might omit content creation for the links on the page.

    The next step demonstrates how to use Assistant to add those pages.
  </Step>

  <Step title="Improve the app using the Assistant">
    Navigate to the **Assistant** tab, which should resemble the following image:

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/getting-started/quickstart_ai_assistant_new.png" alt="image of the Assistant tab" />
    </Frame>

    Enter the following prompt in the text area and submit it:

    ```
    Create pages for each of the links in the navigation bar.
    ```

    You can select **Preview code changes** to view the Assistant's planned changes.

    Select **Apply All** and confirm your selection if prompted.

    <Note>
      Assistant and Agent, which rely on popular AI models, occasionally produce results that don't fulfill your request.
      If you encounter issues, follow up with a prompt that describes the error messages or the incorrect behavior.
      Alternatively, you can use the Rollback feature to restore your Replit App to a previously known working state.
    </Note>

    At this point, you should have a navigable website that includes sample text and functional links.
  </Step>
</Steps>

## Explore

Try the tasks in the following sections to build your knowledge of Replit.

### Undo an Agent change

Agent lets you perform a rollback, a feature that reverts your app to a previous checkpoint, discarding all changes made after that point.
Follow these steps to revert the app to a specific checkpoint:

<Warning>
  When you use the rollback feature, you restore the Replit App to a previous state. This action
  removes all changes made after that point, including edits by you or the AI-powered features.
</Warning>

<Steps>
  <Step title="Locate the checkpoint">
    Navigate to the **Agent** tab and locate the checkpoint you want to restore.

    Select **Rollback to here** to undo all changes after that point as shown in the following image:

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/getting-started/quickstart_ai_agent_rollback.png" alt="image of Rollback to here button in the Agent tab" />
    </Frame>
  </Step>

  <Step title="Verify the rollback">
    After Agent completes your request, check that the **Agent** tab displays "Rollback completed".

    Confirm that your app functionality matches its state before the checkpoint.
  </Step>
</Steps>

### Undo an Assistant change

Assistant lets you perform a rollback, a feature that reverts your app to a previous checkpoint, discarding all changes made after that point.
Follow these steps to revert the app to a specific checkpoint:

<Warning>
  When you use the rollback feature, you restore the Replit App to a previous state. This action
  removes all changes made after that point, including edits by you or the AI-powered features.
</Warning>

<Steps>
  <Step title="Locate the checkpoint">
    Navigate to the **Assistant** tab and locate the checkpoint you want to restore.

    Select **Undo these changes**\* to revert all changes from the checkpoint after that point in time as shown in the following image:

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/getting-started/quickstart_ai_assistant_rollback.png" alt="image of Undo these changes button in the Assistant tab" />
    </Frame>
  </Step>

  <Step title="Verify the rollback">
    After Assistant completes your request, the **Undo these changes** button label should be replaced with **Restore checkpoint**.

    Confirm that your app functionality matches its state before the checkpoint.
  </Step>
</Steps>

## Continue your journey

Now that you've completed this tutorial, you're ready to explore more possibilities with your Replit App.
Try the following next steps to enhance your skills:

* Use Agent to create a new Replit App using your own prompt. If your prompt needs more direction or details, select the pen icon labeled **Improve prompt**.
* Add features to your app using Assistant. Navigate to the **Assistant** tab and try one of the recommended prompts.
* Deploy your Replit App to make it publicly available. Learn more about deployment options and billing from [About Deployments](/category/replit-deployments/).
* Learn more about the AI-powered Replit features from the following guides:

  {/* vale off */}

  * [Replit Agent](/replitai/agent/)
  * [Replit Assistant](/replitai/agent/)

  {/* vale on */}


# Create a file converter with AI
Source: https://docs.replit.com/getting-started/quickstarts/build-with-ai

Build a file conversion app in 15 minutes using Replit's AI tools. Learn how to use Agent and Assistant to create apps through natural language.

Learn how to replace line-by-line coding with AI-powered conversations. This guide shows you how to effectively communicate your vision and leverage Replit's AI tools to bring your ideas to life.

## What you'll learn

<CardGroup cols={2}>
  <Card title="AI Tool Mastery" icon="wand-magic-sparkles">
    Use Agent and Assistant effectively for different development tasks
  </Card>

  <Card title="Clear Communication" icon="comments">
    Learn the art of describing your vision to AI tools
  </Card>

  <Card title="Best Practices" icon="list-check">
    Discover how to provide context and specifications effectively
  </Card>

  <Card title="Rapid Development" icon="rocket">
    Build and deploy a working app in just 15 minutes
  </Card>
</CardGroup>

<Note>
  You'll need a Replit account and Core subscription to access Agent.
</Note>

<AccordionGroup>
  <Accordion title="Quick access">
    * [View the finished template](https://replit.com/@matt/msftmd-Office-Markdown-Converter?v=1\&utm_source=matt\&utm_medium=youtube\&utm_campaign=msftmd-app)
    * [Try the live demo](https://msftmd.replit.app/)
  </Accordion>
</AccordionGroup>

<Frame type="glass">
  <iframe src="https://www.youtube.com/embed/JNH2g53T3zE" title="Building a File Converter App with AI Tools" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen height="400" width="100%" />
</Frame>

## Start with Agent

<Steps>
  <Step title="Understand the library">
    We'll use [MarkItDown](https://github.com/microsoft/markitdown), Microsoft's file conversion library. Since it's new, provide Agent with context about its capabilities:

    ```text
    MarkItDown is a utility for converting various files to Markdown (e.g., for indexing, text analysis, etc). It supports:

    PDF
    PowerPoint
    Word
    Excel
    Images (EXIF metadata and OCR)
    Audio (EXIF metadata and speech transcription)
    HTML
    Text-based formats (CSV, JSON, XML)
    ZIP files (iterates over contents)
    ```
  </Step>

  <Step title="Create your prompt">
    Craft a clear prompt explaining your vision:

    ```text
    I'd like to build a simple app that converts office files to markdown.
    It should have a drag and drop interface and be both desktop and mobile friendly.
    ```

    <Tip>
      Hover over library URLs and select "copy content" to give Agent additional context.
    </Tip>
  </Step>

  <Step title="Review the plan">
    Agent will create a development plan outlining:

    * Required files
    * Code structure
    * Implementation steps

    <Frame type="glass">
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/getting-started/building-with-ai/02-approve-plan.png" alt="Reviewing and approving Agent's initial plan" />
    </Frame>
  </Step>
</Steps>

## Develop iteratively

### Using Agent for major changes

Agent excels at handling structural changes and core functionality. When you encounter issues:

1. Copy error messages directly into the chat
2. Be descriptive about what's not working
3. Provide clear requirements for new features

<Frame type="glass">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/getting-started/building-with-ai/04-fix-errors-paste.png" alt="Fixing JSON parse error by sharing with Agent" />
</Frame>

Example prompts for adding features:

```text
1. Support multiple files
2. I want to be able to copy the output in addition to downloading
```

```text
Make the app more responsive and mobile friendly, the copy and download buttons are cut off on narrow screens
```

### Refining with Assistant

Switch to Assistant for detailed improvements and UI refinements. Use the `@` symbol to reference specific files:

```text
1. Remove "Powered by MarkItDown Library" and add a description to the top of the app
2. Add a footer with links to social profiles
```

<Tip>
  Use web development terms like "responsive," "mobile-friendly," and "grid interface" to communicate effectively.
</Tip>

## Deploy your app

<Steps>
  <Step title="Start deployment">
    Select **Publish** or search for "Deployments" in the command bar.
  </Step>

  <Step title="Configure resources">
    For auto-scale deployments, configure:

    * Basic resources (1 CPU, 1GB RAM per instance)
    * Maximum machines (start with 6)
    * Environment variables
    * Run commands
  </Step>

  <Step title="Launch">
    1. Name your app
    2. Select **Deploy**
    3. Wait 1-5 minutes for deployment
    4. Access your app via the provided URL
  </Step>
</Steps>

## Best practices

<CardGroup cols={2}>
  <Card title="Use Agent for">
    * Initial setup
    * Core functionality
    * Major structural changes
    * Error resolution
  </Card>

  <Card title="Use Assistant for">
    * UI refinements
    * Small feature additions
    * Code optimization
    * Documentation
  </Card>
</CardGroup>

<Note>
  Success with AI tools depends more on clear communication than coding expertise. Focus on describing your vision effectively using web development terminology.
</Note>

## Resources

<CardGroup cols={3}>
  <Card title="Template" icon="code" href="https://replit.com/@matt/msftmd-Office-Markdown-Converter?v=1&utm_source=matt&utm_medium=youtube&utm_campaign=msftmd-app">
    Fork the template
  </Card>

  <Card title="Demo" icon="play" href="https://msftmd.replit.app/">
    Try the live demo
  </Card>

  <Card title="Tutorial" icon="video" href="#">
    Watch the video above
  </Card>
</CardGroup>

<Frame type="glass">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/getting-started/building-with-ai/msftmd.jpg" alt="Deployed file converter app interface" />
</Frame>


# Connect your app to a SQL database
Source: https://docs.replit.com/getting-started/quickstarts/database-connection

Learn how to connect to your Replit database from your Replit App.

This guide shows you how to connect to your Replit App's database
from your code using the connection methods:

* **Direct connection**: Connection for development and lighter workloads
* **Connection pooling**: Efficient connection management for high-traffic production applications

To determine which type of connection you need, see
<a href="https://neon.tech/docs/connect/choose-connection#next-choose-your-connection-type-direct-or-pooled">Choosing your driver and connection type</a>
in the Neon documentation.

<Tip>
  Use **Agent** or **Assistant** to generate code that connects to your existing database.
</Tip>

## Prerequisites

Before getting started, make sure you have the following:

* Created a database in your Replit App
* Knowledge of coding and database connection management

## Create a connection script

<Note>
  This tutorial does not provide examples for all programming languages.
  Use PostgresSQL driver documentation for your project's programming language
  or ask Assistant to translate the code examples.
</Note>

<Steps>
  <Step title="Create a directory for your connection script">
    Create a directory at the top level of your project called `scripts`.
  </Step>

  <Step title="Create a connection script">
    Create a file in this directory and paste one of the following connection examples.

    <Accordion title="Direct connection examples">
      <CodeGroup>
        ```js JavaScript
        const { Client } = require('pg')

        async function queryDatabase() {
          const databaseUrl = process.env.DATABASE_URL
          const client = new Client({ connectionString: databaseUrl })

          try {
            await client.connect()
            const result = await client.query('SELECT * FROM users WHERE active = true')
            return result.rows
          } finally {
            await client.end()
          }
        }

        queryDatabase()
          .then(rows => console.log(rows))
          .catch(err => console.error(err))
        ```

        ```py Python
        import os
        import psycopg2

        database_url = os.environ['DATABASE_URL']

        try:
            conn = psycopg2.connect(database_url)
            cur = conn.cursor()
            # example query that assumes users table is present
            cur.execute("SELECT * FROM users WHERE active = true")
            results = cur.fetchall()
        finally:
            cur.close()
            conn.close()
        ```
      </CodeGroup>
    </Accordion>

    <Accordion title="Pooled connection examples">
      <CodeGroup>
        ```js JavaScript
        const { Pool } = require('pg')

        async function queryDatabasePool() {
          const databaseUrl = process.env.DATABASE_URL
          // changes the URL to use the Neon's connection pooler
          const poolUrl = databaseUrl.replace('.us-east-2', '-pooler.us-east-2')
          const pool = new Pool({
            connectionString: poolUrl,
            max: 10
          })

          try {
            const client = await pool.connect()
            try {
              const result = await client.query('SELECT * FROM users WHERE active = true')
              return result.rows
            } finally {
              client.release()
            }
          } finally {
            await pool.end()
          }
        }

        queryDatabasePool()
          .then(rows => console.log(rows))
          .catch(err => console.error(err))
        ```

        ```py Python
        import os
        from psycopg2 import pool

        database_url = os.environ['DATABASE_URL']
        # changes the URL to use the Neon's connection pooler
        database_url = database_url.replace('.us-east-2', '-pooler.us-east-2')

        connection_pool = pool.SimpleConnectionPool(1, 10, database_url)

        try:
            conn = connection_pool.getconn()
            cur = conn.cursor()
            # example query that assumes users table is present
            cur.execute("SELECT * FROM users WHERE active = true")
            results = cur.fetchall()
        finally:
            cur.close()
            connection_pool.putconn(conn)
            connection_pool.closeall()
        ```
      </CodeGroup>
    </Accordion>
  </Step>
</Steps>

## Create a workflow to run your script

<Info>
  Your workflow may vary depending on the language you chose and the file path of the script you created.
</Info>

<Steps>
  <Step title="Add a new workflow">
    Navigate to the **Workflows** tool and select **New Workflow** to add a workflow.
    In the **Workflow** field, enter "test connection" as the name.
  </Step>

  <Step title="Create a command to run the script">
    Select **Execute Shell Command** under the **Tasks** heading. Add a command to run the script you created in the line below it.

    The following screenshot shows the "test connection" workflow configured to run a JavaScript connection example:

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/getting-started/database-connection/database-connection-test-workflow.png" alt="screenshot of an example workflow" />
    </Frame>
  </Step>

  <Step title="Run the workflow">
    Select the arrow to the left of the workflow name to run it.
  </Step>

  <Step title="View the output">
    Navigate to the **Console** tool, where you should see a data from your `users` table, if any exists.
  </Step>
</Steps>

## Next steps

To learn more about working with databases in Replit, see the following resources:

* [Database](/cloud-services/storage-and-databases/sql-database/): learn how to create and manage a SQL database using the Replit Database tool.
* [Workflows](/replit-workspace/workflows/): learn how to create and run custom workflows.


# Create a Discord bot
Source: https://docs.replit.com/getting-started/quickstarts/discord-bot

Build a fun Discord bot that tells jokes. Learn how to use the Discord API and deploy your bot on Replit.

Learn how to create an interactive Discord bot. This guide shows you how to build and deploy a bot that responds to commands with jokes.

## What you'll learn

<CardGroup cols={2}>
  <Card title="Discord API" icon="discord">
    Build interactive bot features
  </Card>

  <Card title="Bot Commands" icon="terminal">
    Handle user interactions
  </Card>

  <Card title="Deployment" icon="cloud">
    Host your bot 24/7
  </Card>

  <Card title="Authentication" icon="key">
    Manage bot tokens securely
  </Card>
</CardGroup>

## Create your bot

<Steps>
  <Step title="Fork the template">
    {/* vale off */}

    Sign in to Replit and fork the [Discord bot template](https://replit.com/@replit-matt/Discord-Python-Quickstart?v=1#main.py). Select **+ Use Template** and follow the prompts to create your Replit App.

    {/* vale on */}
  </Step>

  <Step title="Set up Discord developer portal">
    1. Go to the [Discord Developer Portal](https://discord.com/developers/applications)
    2. Navigate to your application's Bot section
    3. Under Build-A-Bot, select **Reset Token**
    4. Copy the token

    <Warning>
      Keep your bot token secret! Never share it or commit it to version control.
    </Warning>
  </Step>

  <Step title="Configure your bot">
    Add your bot token to your Replit App:

    1. Open the Secrets tab
    2. Create a new secret named `DISCORD_BOT_TOKEN`
    3. Paste your bot token as the value

    <Tip>
      Use Replit Secrets to securely store sensitive information like API tokens.
    </Tip>
  </Step>
</Steps>

## Deploy your bot

<Steps>
  <Step title="Configure deployment">
    1. Select **Deploy** in the workspace header
    2. Choose **Reserved VM** deployment
    3. Select **Deploy**
  </Step>

  <Step title="Test">
    1. Invite your bot to a server
    2. Try the `/tell-me-a-joke` command
    3. Verify the bot responds correctly

    <Note>
      Reserved VM deployments ensure your bot stays online continuously.
    </Note>
  </Step>
</Steps>

## Customization options

<CardGroup cols={2}>
  <Card title="Commands">
    * Add new commands
    * Create custom responses
    * Handle different events
  </Card>

  <Card title="Features">
    * Add moderation tools
    * Create games
    * Integrate with APIs
  </Card>
</CardGroup>

## Next steps

<CardGroup cols={3}>
  <Card title="Databases" icon="database" href="/cloud-services/storage-and-databases/sql-database">
    Add persistent storage
  </Card>

  <Card title="Monitoring" icon="chart-line" href="/category/replit-deployments/">
    Track bot performance
  </Card>

  <Card title="Slash Commands" icon="terminal" href="https://discord.com/developers/docs/interactions/application-commands">
    Add more interactions
  </Card>
</CardGroup>

## Related guides

<CardGroup cols={2}>
  <Card title="Create a Slack bot" icon="slack" href="/getting-started/quickstarts/webscrape-and-slack-notifications">
    Build a Slack integration
  </Card>

  <Card title="Build with AI" icon="wand-magic-sparkles" href="/getting-started/quickstarts/build-with-ai">
    Create apps using Agent
  </Card>
</CardGroup>

<Note>
  {/* vale off */}

  Want to learn more about bot development? Check out our [deployment documentation](/category/replit-deployments).

  {/* vale on */}
</Note>


# Create a FastAPI service
Source: https://docs.replit.com/getting-started/quickstarts/fastapi-service

Build and deploy a high-performance API using FastAPI on Replit. Learn how to use autoscaling for reliable API hosting.

Learn how to create a modern API service using FastAPI's powerful features. This guide shows you how to deploy a Python-based API with automatic scaling.

## What you'll learn

<CardGroup cols={2}>
  <Card title="FastAPI" icon="bolt">
    Build modern Python APIs
  </Card>

  <Card title="Autoscaling" icon="arrows-up-down">
    Deploy with automatic scaling
  </Card>

  <Card title="Performance" icon="gauge-high">
    Create high-performance endpoints
  </Card>

  <Card title="Documentation" icon="book">
    Auto-generate API docs
  </Card>
</CardGroup>

## Create your API

<Steps>
  <Step title="Fork the template">
    {/* vale off */}

    Sign in to Replit and fork the [FastAPI template](https://replit.com/@replit/FastAPI?v=1#main.py). Select **+ Use Template** and follow the prompts to create your Replit App.

    {/* vale on */}

    <Tip>
      FastAPI automatically generates interactive API documentation at `/docs`.
    </Tip>
  </Step>

  <Step title="Configure deployment">
    1. Select **Deploy** in the workspace header
    2. Choose **Autoscale** deployment
    3. Configure your deployment:
       * Machine: 1vCPU, 2 GiB RAM (default)
       * Max machines: 3 (default)
       * Run command: `uvicorn main:app --host 0.0.0.0`

    <Note>
      Autoscale deployments automatically adjust resources based on API traffic.
    </Note>
  </Step>

  <Step title="Launch">
    Select **Deploy** to start the deployment process. Your API will be live in a few minutes!
  </Step>
</Steps>

## Customization options

<CardGroup cols={2}>
  <Card title="Endpoints">
    * Add new routes
    * Implement validation
    * Handle authentication
  </Card>

  <Card title="Documentation">
    * Customize API docs
    * Add examples
    * Define schemas
  </Card>
</CardGroup>

## Next steps

<CardGroup cols={3}>
  <Card title="Custom Domain" icon="globe" href="/cloud-services/deployments/custom-domains">
    Add your own domain
  </Card>

  <Card title="Databases" icon="database" href="/cloud-services/storage-and-databases/sql-database/">
    Add data persistent storage
  </Card>

  <Card title="Monitoring" icon="chart-line" href="/category/replit-deployments">
    Track performance
  </Card>
</CardGroup>

## Related guides

<CardGroup cols={2}>
  <Card title="Create a Flask app" icon="flask" href="/getting-started/quickstarts/flask-app">
    Build with Flask
  </Card>

  <Card title="Build with AI" icon="wand-magic-sparkles" href="/getting-started/quickstarts/build-with-ai">
    Create apps using Agent
  </Card>
</CardGroup>

<Note>
  {/* vale off */}

  Want to learn more about API development? Check out our [deployment documentation](/category/replit-deployments).

  {/* vale on */}
</Note>


# Create a Flask app
Source: https://docs.replit.com/getting-started/quickstarts/flask-app

Build and deploy a web application using Flask on Replit. Learn how to use autoscaling for reliable web hosting.

Learn how to create a web application using Flask's simple yet powerful framework. This guide shows you how to deploy a Python web app with automatic scaling.

## What you'll learn

<CardGroup cols={2}>
  <Card title="Flask" icon="flask">
    Build Python web apps
  </Card>

  <Card title="Autoscaling" icon="arrows-up-down">
    Deploy with automatic scaling
  </Card>

  <Card title="Web Development" icon="browser">
    Create dynamic web pages
  </Card>

  <Card title="Deployment" icon="cloud">
    Host your application
  </Card>
</CardGroup>

## Create your app

<Steps>
  <Step title="Fork the template">
    V{/* vale off */}

    Sign in to Replit and fork the [Flask template](https://replit.com/@replit/Flask?v=1#main.py). Select **+ Use Template** and follow the prompts to create your Replit App.

    {/* vale on */}

    <Tip>
      Flask's development server automatically reloads when you make changes to your code.
    </Tip>
  </Step>

  <Step title="Configure deployment">
    1. Select **Deploy** in the workspace header
    2. Choose **Autoscale** deployment
    3. Configure your deployment:
       * Machine: 1vCPU, 2 GiB RAM (default)
       * Max machines: 3 (default)
       * Run command: `python3 main.py`

    <Note>
      Autoscale deployments automatically adjust resources based on website traffic.
    </Note>
  </Step>

  <Step title="Launch">
    Select **Deploy** to start the deployment process. Your website will be live in a few minutes!
  </Step>
</Steps>

## Customization options

<CardGroup cols={2}>
  <Card title="Routes">
    * Add new pages
    * Handle form submissions
    * Create API endpoints
  </Card>

  <Card title="Templates">
    * Design page layouts
    * Add dynamic content
    * Style your pages
  </Card>
</CardGroup>

## Next steps

<CardGroup cols={3}>
  <Card title="Databases" icon="database" href="/cloud-services/storage-and-databases/sql-database/">
    Add data persistence
  </Card>

  <Card title="Custom Domain" icon="globe" href="/cloud-services/deployments/custom-domains">
    Add your own domain
  </Card>
</CardGroup>

## Related guides

<CardGroup cols={2}>
  <Card title="Create a FastAPI service" icon="bolt" href="/getting-started/quickstarts/fastapi-service">
    Build with FastAPI
  </Card>

  <Card title="Build with AI" icon="wand-magic-sparkles" href="/getting-started/quickstarts/build-with-ai">
    Create apps using Agent
  </Card>
</CardGroup>

<Note>
  {/* vale off */}

  Want to learn more about web development? Check out our [deployment documentation](/category/replit-deployments).

  {/* vale on */}
</Note>


# Build from Scratch
Source: https://docs.replit.com/getting-started/quickstarts/from-scratch

Learn how to create a Replit App from scratch. Choose your language, frameworks, and databases.

## Create your app from a Template

⏰ *Estimated time: 15 minutes*

Learn how to create your Replit App from a **Template** in this guide. A Template is a set of ready-made
setup and configuration files that get you coding faster.

This tutorial demonstrates how to build a web app using a Replit Template for Express.js, a popular
backend JavaScript framework. Templates provide ready-made project configuration files to get you
coding faster, but exclude application logic to let you build your own ideas from scratch.

For tutorials on building apps in other ways, see [Quickstart Guides](/getting-started/intro-replit#quickstart-guides).

When you complete the tutorial, your app should resemble the following image:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/getting-started/quickstart_scratch_aloha.png" alt="image of the Webview showing the finished app" />
</Frame>

<Steps>
  <Step title="Create an App">
    Navigate to the Home screen and select **Create App**:

    <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/getting-started/quickstart_scratch_create_app_button.png" width="250" alt="image of the Create App button" />
  </Step>

  <Step title="Choose a Template">
    Select the **Choose a Template** tab and enter "Express.js" in the search field to locate the corresponding Template as shown in the following image:

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/getting-started/quickstart_scratch_express_template.png" alt="image of the Template selection in the Create App dialog" />
    </Frame>

    Set the App's title in the **Title** field and make sure **Private** is selected. You can modify these values later.

    Select **Create App** to proceed.
  </Step>

  <Step title="Modify the app using Assistant">
    Navigate to the **Assistant** tab.

    Assistant is Replit's AI-powered tool that specializes in building smaller changes to your app.

    Enter the following prompt in the text area and submit it to modify a specific file:

    ```text
    Update the endpoint in index.js to say "Hello, Replit!" followed by a random cheerful emoji.
    ```

    <Tip>You can optionally refer to a specific filename by preceding it with the `@` character.</Tip>

    Select **Apply all** to accept changes or **Preview code changes** to view them.

    After applying the changes, you should see the updated message in the **Webview** tab as shown in the following image:

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/getting-started/quickstart_scratch_hello.png" alt="image of the Webview showing the default endpoint" />
    </Frame>
  </Step>

  <Step title="Modify the code directly">
    Navigate to the **Files** tab to access your Replit App's files.

    Select `index.js` to open a file editor tab.

    Locate the endpoint and change the message from "Hello, Replit!" to "Aloha, Replit!"

    If you're unsure where to edit, replace the endpoint with the following code:

    ```js
        app.get('/', (req, res) => {
            const emojis = ['😊', '🎉', '✨', '🌟', '💫', '🌈', '🎨', '🚀'];
            const randomEmoji = emojis[Math.floor(Math.random() * emojis.length)];
            res.send(`<h1>Aloha, Replit! ${randomEmoji}</h1>`);
        });
    ```

    Switch to the **Webview** tab and select the refresh button <Icon icon="rotate-right" iconType="regular" />.

    After the browser reloads, the page should resemble the following image:

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/getting-started/quickstart_scratch_aloha.png" alt="image of the Webview showing the new message" />
    </Frame>
  </Step>
</Steps>

## Explore

Try the tasks in the following sections to build your knowledge of Replit.

### Add a dependency using Assistant

Follow these steps to add the `morgan` package, which lets you configure request logging for your Express.js server:

<Steps>
  <Step title="Craft a prompt">
    From the **All Tools** tab or search box, locate and select **Assistant**.
    Assistant is an AI chatbot that can modify your code to add new features or fix errors.

    Enter the following prompt in the text area and submit it:

    ```text
    Add the morgan HTTP request logger
    ```

    After analyzing the request and existing code, Assistant prompts you to view or accept its changes as shown in the following dialog:

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/getting-started/quickstart_scratch_morgan.png" alt="image of Assistant recommending installation of the morgan npm package" />
    </Frame>

    Select **Apply All** to add the dependency and update the configuration.
  </Step>

  <Step title="Verify the installation">
    Navigate to the **Dependencies** tab.

    The dependencies list should include the `morgan` package as shown in the following image:

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/getting-started/quickstart_scratch_dependency_morgan.png" alt="image of the Dependencies list including morgan" />
    </Frame>
  </Step>
</Steps>

### Add a dependency manually

You can edit the package manager configuration files or use the **Dependencies** tool to manage the frameworks and libraries your app uses.

<Steps>
  <Step title="Open the Dependencies tab">
    To access the tool, open the **All Tools** tab or search box, locate and select the **Dependencies** tab as shown in the following image:

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/getting-started/quickstart_scratch_dependencies_tab.png" alt="image of the Dependencies tab" />
    </Frame>
  </Step>

  <Step title="Add a package">
    In the **Imports** tab, select **Add new package** to open a dialog. Search for and add the "express-rate-limit" package as shown in the following image:

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/getting-started/quickstart_scratch_dependency_search.png" alt="image of adding the express-rate-limit dependency" />
    </Frame>

    Alternatively, select **Open package.json** to open `package.json` in an editor tab, where you can add or edit dependencies.
  </Step>
</Steps>

### Try Assistant's recommendations

In addition to adding or modifying features in your app, Assistant can provide suggestions or ideas to extend its functionality.
Follow these steps to request a feature recommendation and implement it using Assistant:

<Steps>
  <Step title="Ask Assistant for recommendations">
    Navigate to the **Assistant** tab.

    Enter the following prompt in the text area and submit it:

    ```text
    What features should I consider next?
    ```

    Assistant might respond with the options shown in the following image:

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/getting-started/quickstart_scratch_assistant_recommendations.png" alt="image of Assistant recommendations" />
    </Frame>
  </Step>

  <Step title="Request a feature">
    Enter the following prompt in the text area and submit it:

    ```text
    Add API endpoints that let me modify the message
    ```

    Assistant might respond with the implementation described in the following image:

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/getting-started/quickstart_scratch_assistant_api.png" alt="image of Assistant implementing API endpoints" />
    </Frame>

    Select **Apply all** to make the code changes.
  </Step>

  <Step title="Test the changes">
    Test the API endpoints by navigating to the **Shell** tab and running the shell commands recommended by Assistant.

    Alternatively, ask Assistant to test the endpoints. In the response, you should see action buttons such as **Run** and **Run in Shell**
    as shown in the following image:

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/getting-started/quickstart_scratch_assistant_api_test.png" alt="image of Assistant implementing API endpoints" />
    </Frame>

    Select these to execute the commands to retrieve the current message and update it.

    Verify changes to the message by navigating to the **Webview** tab and selecting **Refresh** in the address toolbar.
  </Step>
</Steps>

### Customize the workflow

Replit Apps include a **workflow**, a customizable sequence of steps that execute when you select **Run**.
Follow these steps to set up a new workflow using Assistant.

<Steps>
  <Step title="Customize the workflow">
    The Express.js Template includes a workflow that runs a command to start the Express.js server.
    However, the server requires a restart to view the latest changes to the files it serves which can
    inconvenience development.

    To avoid this repetitive task, you can ask Assistant to perform the following tasks:

    * Install the <a href="https://www.npmjs.com/package/nodemon" target="_blank">nodemon</a> package which automatically restarts the Express.js server when it detects file changes
    * Update the workflow to manage the Express.js server using `nodemon`.

    To request this change, navigate to the **Assistant** tab and enter the following prompt:

    ```text
    Install nodemon and configure the app to automatically restart the Express server whenever I make changes
    ```

    Assistant's response should resemble the following image:

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/getting-started/quickstart_scratch_nodemon.png" alt="image of Assistant recommending installation of the nodemon package" />
    </Frame>

    Select **Install** to add the dependencies, and **Apply All** to update the configuration.
  </Step>

  <Step title="Test the changes">
    To confirm the workflow updates, select the downward arrow next to the **Run** or **Stop** button and select **Manage Workflows** as shown in the following image:

    <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/getting-started/quickstart_scratch_workflows.png" width="250" alt="image of the Manage Workflows button in the menu" />

    <Note>The name of the workflow generated by the Assistant might vary.</Note>

    Select the **Dev** workflow to view the details, which should resemble the following image:

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/getting-started/quickstart_scratch_workflows_dev.png" alt="image of the Dev workflow that uses nodemon" />
    </Frame>

    To ensure your App runs using the selected workflow, select **Stop** and then **Run**.

    Try making a change to the message returned by the endpoint. After your update, you should see the updated message in the **Webview** tab.
  </Step>
</Steps>

## Continue your journey

Now that you've completed this tutorial, you're ready to explore more possibilities with your Replit App.
Try the following next steps to enhance your skills:

* Browse the Replit Templates on the <a href="https://replit.com/templates" target="_blank">Templates</a> page.
* Start a Replit App using the <a href="https://replit.com/@replit/Blank-Repl?v=1#README.md" target="_blank">Blank Repl Template</a> which omits language and framework setup.
* Share your completed Replit App as a Template by following the steps in the [Make your Replit App Public](/replit-app/collaborate#make-your-replit-app-public) guide.
* Learn more about Assistant's capabilities from the [Replit Assistant](/replitai/assistant) documentation.


# Create a Google Sheets integration
Source: https://docs.replit.com/getting-started/quickstarts/google-sheets-integration

Build an app that connects to Google Sheets using Python. Learn how to fetch and process spreadsheet data on Replit.

Learn how to create an application that interacts with Google Sheets. This guide shows you how to access and display spreadsheet data using Python and pandas.

## What you'll learn

<CardGroup cols={2}>
  <Card title="Google Sheets" icon="table">
    Connect to spreadsheet data
  </Card>

  <Card title="Data Processing" icon="database">
    Work with pandas dataframes
  </Card>

  <Card title="API Integration" icon="plug">
    Use Google's API services
  </Card>

  <Card title="Authentication" icon="lock">
    Handle OAuth and service accounts
  </Card>
</CardGroup>

## Create your app

<Steps>
  <Step title="Fork the template">
    {/* vale off */}

    Sign in to Replit and fork the [Google Sheets to HTML Renderer](https://replit.com/@replit-matt/Google-Sheets-to-API#README). Select **+ Use Template** and follow the prompts to create your Replit App.

    {/* vale on */}
  </Step>

  <Step title="Configure for public sheets">
    1. Open `main.py`
    2. Replace `WORKSHEET_URL` with your Google Sheet URL
    3. Set `require_auth=False` for public sheets

    <Tip>
      A worksheet refers to a single tab in a Google Sheet. Make sure to use the correct tab's URL.
    </Tip>
  </Step>

  <Step title="Configure for private sheets">
    1. Enable Google Sheets API access:

       {/* vale off */}

       * Enable Drive and Spreadsheets APIs
       * Follow the [API setup guide](https://gspread.org/en/v6.0.0/oauth2.html#enable-api-access-for-a-project)

       {/* vale on */}

    2. Create a [service account](https://gspread.org/en/v6.0.0/oauth2.html#for-bots-using-service-account)

    3. Add the service account JSON to your Replit App's Secrets as `SERVICE_ACCOUNT_JSON`

    4. Share your sheet with the service account email

    <Note>
      Service accounts provide secure, automated access to your sheets.
    </Note>
  </Step>
</Steps>

## Deploy your app

<Steps>
  <Step title="Configure deployment">
    1. Select **Deploy** in the workspace header
    2. Choose **Reserved VM** deployment
    3. Select **Deploy**
  </Step>

  <Step title="Test">
    Your app will be live in a few minutes. Test it by accessing the HTML endpoint in your browser.
  </Step>
</Steps>

## Customization options

<CardGroup cols={2}>
  <Card title="Data Processing">
    * Modify data transformations
    * Add filtering options
    * Create custom views
  </Card>

  <Card title="Display">
    * Customize HTML rendering
    * Add interactive features
    * Style your output
  </Card>
</CardGroup>

## Next steps

<CardGroup cols={3}>
  <Card title="FastAPI" icon="bolt" href="/getting-started/quickstarts/fastapi-service">
    Create an API service
  </Card>

  <Card title="Databases" icon="database" href="/cloud-services/storage-and-databases/sql-database/">
    Add persistent storage
  </Card>
</CardGroup>

## Related guides

<CardGroup cols={2}>
  <Card title="Create a Slack bot" icon="slack" href="/getting-started/quickstarts/webscrape-and-slack-notifications">
    Build a Slack integration
  </Card>

  <Card title="Build with AI" icon="wand-magic-sparkles" href="/getting-started/quickstarts/build-with-ai">
    Create apps using Agent
  </Card>
</CardGroup>

<Note>
  {/* vale off */}

  Want to learn more about API integrations? Check out our [deployment documentation](/category/replit-deployments).

  {/* vale on */}
</Note>


# Import from GitHub
Source: https://docs.replit.com/getting-started/quickstarts/import-from-github

Learn how to create a **Replit App** from your existing GitHub repository using two different methods.

## Import your GitHub repository

⏰ *Estimated time: two minutes*

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/getting-started/github_import_preview.png" alt="Preview of GitHub repository import in Replit" />
</Frame>

Follow this guide to import your GitHub repository into Replit using one of two convenient methods:

<Accordion title="Method 1: Direct URL (Public Repositories)" defaultOpen={true}>
  The fastest way to import a repository is using the direct URL method:

  1. Take your GitHub repository URL:

  ```
  https://github.com/username/repository
  ```

  2. Append it to `replit.new/`:

  ```
  https://replit.new/github.com/username/repository
  ```

  3. Press Enter to automatically start the import process
</Accordion>

<Accordion title="Method 2: Homepage Import" defaultOpen={false}>
  To import from the Replit homepage:

  1. Navigate to [replit.com](https://replit.com)
  2. Select **Create App** (you may have to open the sidebar to see the option)

  <Frame>
    <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/getting-started/homepage_app.png" alt="Replit homepage import interface" />
  </Frame>

  3. Choose **Import from GitHub**

  <Frame>
    <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/getting-started/connect_your_account.png" alt="Replit homepage import interface" />
  </Frame>

  4. Connect your account or enter your repository URL

  <Frame>
    <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/getting-started/github_import_preview.png" alt="Replit homepage import interface" />
  </Frame>

  5. Confirm your settings and select **Import**

  A new Replit App will be created with the contents of your GitHub repository.
</Accordion>

After importing, you must:

1. Choose your preferred run command or accept the detected one
2. Select the appropriate language/framework if not auto-detected
3. Configure any environment variables needed
4. Select **Done** to complete the setup

For simple projects, you can should be able to simply alter the "run" command—Replit will detect the correct language/framework for you.

## Next steps

Now that you've imported your GitHub repository, you can:

* Set up [GitHub authentication](/replit-workspace/using-git-on-replit/private-repo) for private repositories
* Configure [deployment settings](/cloud-services/deployments/about-deployments) for your app
* Add a ["Run on Replit" badge](/replit-workspace/using-git-on-replit/running-github-repositories-replit) to your GitHub README

<Note>
  If you're importing a private repository, you'll must first authorize Replit to access your private GitHub repositories
  during the import process.
</Note>

<Tip>
  For monorepo setups, you can specify which directory to use as the root of your Replit App during the import process.
</Tip>


# Create a Next.js app
Source: https://docs.replit.com/getting-started/quickstarts/next-js-app

Build and deploy a modern React application using Next.js on Replit. Learn how to use server-side rendering and static generation.

Learn how to create a Next.js application with server-side rendering capabilities. This guide shows you how to deploy a React app using Replit's autoscaling deployment.

## What you'll learn

<CardGroup cols={2}>
  <Card title="Next.js" icon="react">
    Build modern React applications
  </Card>

  <Card title="Server-Side Rendering" icon="server">
    Enable SSR for better performance
  </Card>

  <Card title="Autoscaling" icon="arrows-up-down">
    Deploy with automatic scaling
  </Card>

  <Card title="Performance" icon="gauge-high">
    Optimize for production
  </Card>
</CardGroup>

## Create your app

<Steps>
  <Step title="Fork the template">
    {/* vale off */}

    Sign in to Replit and fork the [Next.js template](https://replit.com/@replit/Nextjs?v=1#README). Select **+ Use Template** and follow the prompts to create your Replit App.

    {/* vale on */}
  </Step>

  <Step title="Configure deployment">
    1. Select **Deploy** in the workspace header
    2. Choose **Autoscale** deployment
    3. Configure your deployment:
       * Machine: 1vCPU, 2 GiB RAM (default)
       * Max machines: 3 (default)
       * Build command: `npm run build`
       * Run command: `npm run start`

    <Note>
      Autoscale deployments automatically adjust resources based on traffic.
    </Note>
  </Step>

  <Step title="Launch">
    Select **Deploy** to start the deployment process. Your app will be live in a few minutes!
  </Step>
</Steps>

## Next steps

<CardGroup cols={3}>
  <Card title="Custom Domain" icon="globe" href="/cloud-services/deployments/custom-domains">
    Add your own domain
  </Card>

  <Card title="Autoscaling" icon="server" href="/cloud-services/deployments/autoscale-deployments">
    Learn about scaling
  </Card>

  <Card title="Performance" icon="gauge-high" href="/category/replit-deployments">
    Optimize your app
  </Card>
</CardGroup>

## Related guides

<CardGroup cols={2}>
  <Card title="Create a static blog" icon="newspaper" href="/getting-started/quickstarts/static-blog-astro">
    {/* vale off */}

    Build a blog with Astro

    {/* vale on */}
  </Card>

  <Card title="Build with AI" icon="wand-magic-sparkles" href="/getting-started/quickstarts/build-with-ai">
    Create apps using Agent
  </Card>
</CardGroup>

<Note>
  {/* vale off */}

  Want to learn more about web development? Check out our [deployment documentation](/category/replit-deployments).

  {/* vale on */}
</Note>


# Create a cat image generator
Source: https://docs.replit.com/getting-started/quickstarts/no-code-cat-image-generator

Build a fun image generator in 5 minutes using Replit's AI tools. Perfect for beginners exploring no-code development.

Learn how to create apps without writing code. This guide shows you how to build a playful cat image generator using Replit's AI tools.

## What you'll learn

<CardGroup cols={2}>
  <Card title="AI Development" icon="wand-magic-sparkles">
    Create apps through natural language conversations
  </Card>

  <Card title="No-Code Building" icon="code">
    Build without writing code
  </Card>

  <Card title="Tool Selection" icon="screwdriver-wrench">
    Choose the right AI tool for each task
  </Card>

  <Card title="Deployment" icon="rocket">
    Take your app live in minutes
  </Card>
</CardGroup>

<Note>
  You'll need a Replit account and Core subscription to access Agent.
</Note>

<Frame type="glass">
  <iframe src="https://www.youtube.com/embed/ji8C1LxWyXU" title="Build a Cat Generator App in 5 Minutes" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen height="400" width="100%" />
</Frame>

## Start with Agent

<Steps>
  <Step title="Open Replit">
    Head to [Replit](https://replit.com) and sign in. You'll see the prompt editor where you can instruct Agent.

    <Frame type="glass">
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/getting-started/build-without-code-cat-generator/prompt.png" alt="Replit's AI prompt interface showing where to enter instructions for the Agent" />
    </Frame>
  </Step>

  <Step title="Create your prompt">
    Start with a simple request:

    ```text
    Let's build a cat generator that displays a random image of a cat from the internet 
    every time I press a button.
    ```

    <Tip>
      Use the "Improve Prompt" button to add more details to your request.
    </Tip>
  </Step>

  <Step title="Review the plan">
    Agent will outline a development plan using Flask and JavaScript. Don't worry about the technical terms—Agent handles the complexity for you.

    <Frame type="glass">
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/getting-started/build-without-code-cat-generator/agent-plan.png" alt="Agent's proposed development plan for creating the cat generator application" />
    </Frame>
  </Step>
</Steps>

## Develop iteratively

### Using Agent for major changes

Agent excels at structural changes and core functionality. Try improving the UI:

```text
Can you change the UI to be more beautiful and playful? Use cat emojis to improve 
the appearance of the app.
```

<Frame type="glass">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/getting-started/build-without-code-cat-generator/agent-making-style-improvements.png" alt="Agent interface showing UI improvement suggestions with emoji additions" />
</Frame>

### Refining with Assistant

Switch to Assistant for targeted improvements. For example, add dark mode:

```text
Can we add a dark mode to the app with a toggle button to switch between dark 
and light mode?
```

<Frame type="glass">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/getting-started/build-without-code-cat-generator/assistant-preview-edits.png" alt="Preview of code changes made by Assistant for implementing dark mode" />
</Frame>

<Tip>
  Ask Assistant to explain how your app works:

  ```text
  Help me understand the framework this app is built on.
  ```
</Tip>

<Frame type="glass">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/getting-started/build-without-code-cat-generator/assistant-ask-about-architecture.png" alt="Assistant explaining the application's framework and architecture" />
</Frame>

## Deploy your app

<Steps>
  <Step title="Start deployment">
    Select **Deploy** or **Publish** in the top navigation.
  </Step>

  <Step title="Configure">
    1. Choose the recommended deployment option
    2. Name your app (e.g., "whisker-wonder")
    3. Select **Deploy**
  </Step>

  <Step title="Go live">
    Wait 2-3 minutes for deployment. Your app will be available at `your-app-name.replit.app`.

    <Frame type="glass">
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/getting-started/build-without-code-cat-generator/deploy.png" alt="Step-by-step deployment process showing how to publish the cat generator app" />
    </Frame>
  </Step>
</Steps>

## Best practices

<CardGroup cols={2}>
  <Card title="Development tips">
    * Start simple and iterate
    * Don't worry about technical details initially
    * Provide context in prompts
  </Card>

  <Card title="Tool selection">
    * Use Agent for broad changes
    * Switch to Assistant for specific improvements
    * Test locally before deploying
  </Card>
</CardGroup>

## Next steps

<CardGroup cols={3}>
  <Card title="Databases" icon="database" href="/cloud-services/storage-and-databases/sql-database">
    Add data persistence with ReplDB
  </Card>

  <Card title="Cloud Services" icon="cloud" href="/category/replit-deployments">
    Learn about deployment options
  </Card>

  <Card title="Custom Domain" icon="globe" href="/cloud-services/deployments/custom-domains">
    Set up your own domain name
  </Card>
</CardGroup>

## Related guides

<CardGroup cols={2}>
  <Card title="Create a file converter" icon="file-arrow-up" href="/getting-started/quickstarts/build-with-ai">
    Build a file conversion app using Agent and Assistant
  </Card>

  <Card title="Create a Slack summarizer" icon="slack" href="/getting-started/quickstarts/ai-slack-channel-summarizer">
    Build a bot that summarizes Slack channels with AI
  </Card>
</CardGroup>

<Note>
  Want to learn more about Replit's AI tools? Check out [Replit AI](/category/replit-ai/).
</Note>


# Remix an App
Source: https://docs.replit.com/getting-started/quickstarts/remix-an-app

Learn how to create a **Remix** as a starting point for your app. A Remix is a Replit App started from a publicly shared Replit App.

## Create your Remix

⏰ *Estimated time: 1 minute*

Follow the steps in this guide to create a Remix of the following solar system visualization:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/getting-started/quickstart_remix_app_preview.png" alt="image of the Remix button on the Replit App page" />
</Frame>

<Tip>Try the live app at [Solar System Visualization Demo Replit App](https://solar-system-viz.replit.app/).</Tip>

<Steps>
  <Step title="Remix the app">
    Open the [Solar System Visualization](https://replit.com/@matt/Solar-System-Visualization?v=1) Replit App in your browser
    and select **Remix Template**:

    <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/shared/buttons/remix_button.png" width="300" alt="image of the Remix button on the Replit App page" />
  </Step>

  <Step title="Complete the app details">
    In the **Remix App** dialog, select **Remix App** to continue. You can edit these details later.

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/getting-started/quickstart_remix_dialog.png" alt="image of the Remix App dialog" />
    </Frame>
  </Step>

  <Step title="Start the app">
    Select **Run** to start the app:

    <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/shared/buttons/run_button.png" width="100" alt="image of the Run button" />

    Navigate to the **Webview** tab to confirm the app displays animated planets.

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/getting-started/solar_system_webview.webp" alt="animated image of the Webview tab in the Solar System Visualization" />
    </Frame>
  </Step>

  <Step title="Interact with the app">
    You now have a fully functioning Remix that you can interact with and iteratively improve.

    To interact with the visualization, try the following controls in the **Webview** tab:

    * Drag to rotate the view
    * Scroll to zoom in and out
    * Click a planet to select it
    * Select **Planet info** while a planet is selected to view information about it
    * Select **Pause Rotation** or **Start Rotation** to toggle the animation

    Select Earth and then select **Planet Info** to read facts about it.
  </Step>
</Steps>

## Explore

Try the tasks in the following sections to learn how **Agent** and **Assistant**,
Replit's AI-powered tools can help you build your app.

Agent specializes in building projects from scratch and making complex changes to a Replit App.
Assistant specializes in smaller changes and describing the app's code.

<Note>
  Assistant and Agent, which rely on popular AI models, occasionally produce results that don't fulfill your request.
  If you encounter issues, follow up with a prompt that describes the error messages or the incorrect behavior.
  Alternatively, you can use the Rollback feature to restore your Replit App to a previously known working state.
</Note>

The following sections show examples of using them to enhance this Remix.

### Add a feature using Agent

<Tip>
  When building from a Remix, Agent is available only if it performed the initial setup for that Remix.
</Tip>

Follow these steps to add a complex feature to your Remix using Agent:

<Steps>
  <Step title="Craft a prompt">
    Navigate to the **Agent** tab.

    Enter the following prompt in the text area:

    ```text
    Add a button that toggles an autopilot flyby mode.
    ```

    After you submit the prompt, Agent might pause and ask for clarification or confirmation. Respond in the text area.
  </Step>

  <Step title="Test the feature">
    Navigate to the **Webview** tab to see Agent's updates to the visualization.

    Try toggling the added autopilot button.

    Since the initial prompt excluded information such as speed and position of the flyby, the result might not
    match your expectations.
  </Step>

  <Step title="Refine the feature">
    If the feature differs from your expectations, continue the conversation by entering the following prompt
    in the **Agent** text area:

    ```text
    Change the autopilot to slowly and continuously fly between planets.
    ```

    After Agent completes the feature, the **Webview** might resemble the following image:

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/getting-started/quickstart_remix_app_preview.png" alt="image of the Remix button on the Replit App page" />
    </Frame>

    To undo these changes, select **Rollback to here** in the Checkpoint created immediately
    after starting the plan for the change in the **Agent** tab.
  </Step>
</Steps>

### Add a feature using Assistant

Follow these steps to add a quick enhancement to your Remix using Assistant:

<Steps>
  <Step title="Craft a prompt">
    Navigate to the **Assistant** tab and enter the following prompt:

    ```text
    Add a button that changes the planet orbit speeds to 0.5x, 1x, and 2x.
    ```

    After you submit the prompt, Assistant describes the changes it wants to make and lets you review the code changes before proceeding.
    Select **Preview code changes** to view a comparison of the current code and the updates.
  </Step>

  <Step title="Test the feature">
    Select **Apply all** and approve any following confirmations to continue.

    Navigate to the **Webview** tab to check the result.

    After Assistant completes the feature, the **Webview** might resemble the following image:

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/getting-started/quickstart_remix_assistant_result.png" alt="image of the solar system visualization with speed controls" />
    </Frame>

    To undo these changes, select **Undo these changes** in the **Assistant** tab.
  </Step>
</Steps>

## Continue your journey

Now that you've completed this tutorial, you're ready to explore more possibilities with your Replit App.
Try the following next steps to enhance your skills:

* Ask Agent to implement a new complex feature or to check the code for bugs.
* Ask Assistant to explain how the code works or to generate user instructions.
* View and edit the Replit App source code and configuration in the **Files** tab.
* Share your Replit App for others to remix. To learn more, see [Make your Replit App Public](/replit-app/collaborate#make-your-replit-app-public).


# Create a static blog with Astro
Source: https://docs.replit.com/getting-started/quickstarts/static-blog-astro

Build and deploy a modern static blog using Astro on Replit. Learn how to use static deployments for fast, reliable content delivery.

Learn how to create a static blog using Astro's powerful features. This guide shows you how to deploy a pre-configured blog template with Replit's static hosting.

## What you'll learn

<CardGroup cols={2}>
  <Card title="Static Sites" icon="globe">
    Build fast, modern static websites
  </Card>

  <Card title="Astro Framework" icon="rocket">
    Use Astro's powerful features
  </Card>

  <Card title="Content Management" icon="newspaper">
    Create and organize blog posts
  </Card>

  <Card title="Deployment" icon="cloud">
    Deploy with static hosting
  </Card>
</CardGroup>

## Create your blog

<Steps>
  <Step title="Fork the template">
    {/* vale off */}

    Sign in to Replit and fork the [Astro starter kit template](https://replit.com/@replit-matt/Blog-with-Astro?v=1#README). Select **+ Use Template** and follow the prompts to create your Replit App.

    {/* vale on */}

    <Tip>
      Review the README file in the template for details about the project structure.
    </Tip>
  </Step>

  <Step title="Configure your blog">
    The template includes:

    * Pre-configured blog layout
    * Markdown support
    * Responsive design
    * SEO optimization
  </Step>

  <Step title="Deploy your site">
    1. Select **Deploy** in the workspace header
    2. Choose **Static** deployment
    3. Keep the default deployment values
    4. Select **Deploy**

    <Note>
      Static deployments are optimized for content-focused sites like blogs.
    </Note>
  </Step>
</Steps>

## Customization options

<CardGroup cols={2}>
  <Card title="Content">
    * Add blog posts
    * Create new pages
    * Customize layouts
  </Card>

  <Card title="Styling">
    * Modify themes
    * Add components
    * Update typography
  </Card>
</CardGroup>

## Next steps

<CardGroup cols={3}>
  <Card title="Custom Domain" icon="globe" href="/cloud-services/deployments/custom-domains">
    Add your own domain
  </Card>

  <Card title="Deployments" icon="cloud" href="/cloud-services/deployments/static-deployments">
    Learn about static hosting
  </Card>

  <Card title="Templates" icon="puzzle-piece" href="/replit-workspace/templates">
    Explore more templates
  </Card>
</CardGroup>

## Related guides

<CardGroup cols={2}>
  <Card title="Build with AI" icon="wand-magic-sparkles" href="/getting-started/quickstarts/build-with-ai">
    Create apps using Agent and Assistant
  </Card>

  <Card title="Create a file converter" icon="file-arrow-up" href="/getting-started/quickstarts/build-with-ai">
    Build a file conversion app
  </Card>
</CardGroup>

<Note>
  {/* vale off */}

  Want to learn more about web development? Check out our [web hosting documentation](/category/replit-deployments).

  {/* vale on */}
</Note>


# Create a HackerNews Slack bot
Source: https://docs.replit.com/getting-started/quickstarts/webscrape-and-slack-notifications

Build a bot that scrapes HackerNews and sends updates to Slack. Learn how to use scheduled deployments and integrate with external services.

Learn how to create a bot that monitors HackerNews and sends notifications to Slack. This guide shows you how to use scheduled deployments and external APIs.

## What you'll learn

<CardGroup cols={2}>
  <Card title="Web Scraping" icon="spider-web">
    Fetch data from HackerNews
  </Card>

  <Card title="Slack Integration" icon="slack">
    Send notifications to Slack channels
  </Card>

  <Card title="Scheduling" icon="clock">
    Configure automated deployments
  </Card>

  <Card title="API Usage" icon="code">
    Work with external services
  </Card>
</CardGroup>

## Create your bot

<Steps>
  <Step title="Fork the template">
    {/* vale off */}

    Sign in to Replit and fork the [HackerNews webscraper template](https://replit.com/@replit-matt/Hacker-News-Alert-Slackbot?v=1#app.py). Select **+ Use Template** and follow the prompts to create your Replit App.

    {/* vale on */}
  </Step>

  <Step title="Create a Slack app">
    1. Go to [Slack Apps](https://api.slack.com/apps) and select **Create an App**
    2. Choose **From an app manifest**
    3. Select your workspace

    {/* vale off */}

    4. Replace the manifest with [this JSON](https://replit.com/@replit-matt/Hacker-News-Alert-Slackbot?v=1#manifest.json)

    (/\* vale on \*/}

    5. Review and select **Create**
    6. Select **Install the App**

    <Note>
      You may need administrator approval based on your organization's policies.
    </Note>
  </Step>

  <Step title="Configure tokens">
    Add these secrets to your Replit App's **Secrets** tab:

    1. **SLACK\_BOT\_TOKEN**
       * Go to Settings > Install App
       * Copy the **Bot User OAuth Token**

    2. **SLACK\_SIGNING\_SECRET**
       * Go to Settings > Basic Information
       * Copy the **Signing Secret** from App Credentials

    3. **SLACK\_APP\_TOKEN**
       * Go to Settings > Basic Information
       * Under App-Level Tokens, select **Generate Token and Scopes**
       * Add permissions and generate token
  </Step>

  <Step title="Customize your bot">
    Update `app.py` with your preferences:

    ```python
    KEYWORDS = ["h"]  # Terms to search for
    ALERT_UIDS = ["U06C34217C5"]  # Your Slack member ID
    NUM_TOP_STORIES = 25  # Number of stories to check
    ```

    <Tip>
      Get your Slack member ID from your profile settings under the ellipsis menu.
    </Tip>
  </Step>
</Steps>

## Deploy with scheduling

<Steps>
  <Step title="Start deployment">
    Select **Deploy** in the workspace header.
  </Step>

  <Step title="Configure schedule">
    1. Choose [Scheduled Deployments](/cloud-services/deployments/scheduled-deployments)
    2. Set your preferred schedule
    3. Select **Deploy**
  </Step>

  <Step title="Monitor">
    Your bot will now run automatically according to your schedule.
  </Step>
</Steps>

## Customization options

<CardGroup cols={2}>
  <Card title="Enhance filtering">
    * Add more keywords
    * Refine matching criteria
    * Customize scoring
  </Card>

  <Card title="Improve notifications">
    * Format messages
    * Add rich previews
    * Include metadata
  </Card>
</CardGroup>

## Next steps

<CardGroup cols={3}>
  <Card title="AI Integration" icon="robot" href="/getting-started/quickstarts/ai-slack-channel-summarizer">
    Add AI summaries to notifications
  </Card>

  <Card title="Deployments" icon="cloud" href="/cloud-services/deployments/scheduled-deployments">
    Learn more about scheduling
  </Card>

  <Card title="Databases" icon="database" href="/cloud-services/storage-and-databases/sql-database/">
    Store historical data
  </Card>
</CardGroup>

## Related guides

<CardGroup cols={2}>
  <Card title="Create a Slack summarizer" icon="slack" href="/getting-started/quickstarts/ai-slack-channel-summarizer">
    Build a bot that summarizes Slack channels
  </Card>

  <Card title="Build with AI" icon="wand-magic-sparkles" href="/getting-started/quickstarts/build-with-ai">
    Create apps using Agent and Assistant
  </Card>
</CardGroup>

<Note>
  {/* vale off */}

  Want to learn more about deployments? Check out our [deployment documentation](/category/replit-deployments).

  {/* vale on */}
</Note>


# Overview
Source: https://docs.replit.com/guides/category/replit-workspace



<CardGroup cols={2}>
  <Card title="Introduction to the Workspace" icon="code" href="../replit-workspace/introduction-to-workspace">
    The Workspace is like an IDE (Integrated Development Enviro...
  </Card>

  <Card title="Configure a Replit" icon="gear" href="../replit-workspace/configuring-repl">
    Repls are configured with two files: the...
  </Card>

  <Card title="Dependency Management" icon="box" href="/replit-workspace/dependency-management">
    Replit supports a variety of languages and dependency manage...
  </Card>
</CardGroup>


# Overview
Source: https://docs.replit.com/guides/faq



<Tabs>
  <Tab title="General">
    <AccordionGroup>
      <Accordion title="Where can I get code-level help?">
        The best place to get help with code is to use [Replit AI](/replitai/getting-started). In your Workspace, open a new tab and search for **AI**. Replit AI can help you set up new projects, answer questions about your code, and assist your thinking. For further assistance, you can also check our [Community Hub](https://replit.com/community) for additional resources.
      </Accordion>

      <Accordion title="I am having trouble using Replit. How can I get help?">
        Sign in to Replit and use the **?** on the top right corner of the page for help. For additional support, refer to the [support policy doc](/legal-and-security-info/support-policy).
      </Accordion>

      <Accordion title="Where can I get help with billing?">
        Before contacting the Support team, check if you can find a solution below under **Account**. If that does not help, please sign in and use the **?** on the top right corner of the page for help.
      </Accordion>

      <Accordion title="I cannot access my Replit account – what should I do?">
        Please email `support@replit.com` and include your account username and sign-in ID.
      </Accordion>

      <Accordion title="When will I get a response from Replit?">
        Replit support is generally available Monday through Friday from 9 a.m. to 8 p.m. Eastern Standard Time (UTC-5).
      </Accordion>

      <Accordion title="How do I restore my folders in my Repl?">
        Navigate to your profile identity located on the top right corner of your Repl, select **CLUI**, and in the search box that appears, search by typing *restore*. In the search results, you'll see an option **restore-folder** to restore a specific folder from the trash.
      </Accordion>

      <Accordion title="How do I restore a deleted Repl?">
        Navigate to your profile identity located on the top right corner of your Repl, select **CLUI**, and in the search box that appears, search by typing *restore*. In the search results, you'll see an option **restore-repl** to restore a specific Repl from the trash.
      </Accordion>

      <Accordion title="Why is my Repl failing to load?">
        If your Repl is failing to load, try these debugging steps:

        1.  Test your [internet connection](https://www.speedtest.net/).
        2.  Try a different browser.
        3.  Check if your browser has enabled JavaScript.
        4.  Use the command `kill 1` in the shell to kill and restart the virtual Linux machine backing your Repl.

        If none of the above steps helped, check Replit's [Service Status](https://status.replit.com). If you see the status as **All systems are go!** and you still have issues loading your Repl, please get in touch with [Replit Support](https://replit.com/support).
      </Accordion>

      <Accordion title="How can I upload a large file to my Repl?">
        If the file is too large for a standard GUI upload, you can use `scp` (Secure Copy) to securely transfer files between local and remote systems over [SSH](/replit-workspace/ssh). To copy files from your local machine to the remote machine, use this syntax:`scp filename username@ip_address:/home/username`

        You can also copy entire directories using scp.
      </Accordion>

      <Accordion title="How do I convert my Cycles to usage credits?">
        Go to [https://replit.com/\~/cli/account/cycles-to-usage-credits](https://replit.com/~/cli/account/cycles-to-usage-credits) to convert Cycles to credit. Each Cycle is equivalent to a \$0.01 USD usage credit. This is an irreversible operation.
      </Accordion>

      <Accordion title="How do I check my usage credit balance?">
        If you convert your Cycles into credit, you can view your current balance at [https://replit.com/\~/cli/account/usage-credits-balance](https://replit.com/~/cli/account/usage-credits-balance).
      </Accordion>

      <Accordion title="What are Cycles still used for on Replit?">
        Cycles can still be used for Bounties.
      </Accordion>
    </AccordionGroup>
  </Tab>

  <Tab title="Accounts">
    <Accordion title="I'm having trouble logging in; what should I do?">
      1.  Make sure you are using the correct email and password.
      2.  To reset your password, navigate to the [forgot password page](https://replit.com/forgot). Be sure to check your spam folder for the reset email from `notifications@replit.com`.
      3.  Try logging in through a different browser.

      If all the steps you've tried don't succeed, please [Contact Support](https://replit.com/support).
    </Accordion>

    <Accordion title="How do I change my email if I signed up with Google/GitHub/Facebook/Apple?">
      We require a password to change the email on your account. If you sign up with a third-party authentication provider such as Google or GitHub, you will first need to create a password.

      To create a password:

      1.  Open the sidebar and log out.
      2.  Return to the login page, select [forgot password](https://replit.com/forgot), and enter your email address.
      3.  You will receive an email with a link to create a new password. If you don't see the email, check your spam folder and allow up to thirty minutes for the email to be sent.
      4.  After logging in, navigate to the [account page](https://replit.com/account) to change your email address.
    </Accordion>

    <Accordion title="How do I change my username?">
      Replit users can change their username only **once**. Navigate to the [CLUI](https://replit.com/~/cli/account/change-username?run=1) and select **change-username**. If the option is unavailable to you, you've already changed it.
    </Accordion>

    <Accordion title="What is Explorer mode, and how can I activate it?">
      Explorers are Replit users who have opted to see and test new features that are still in development. To enable Explorer mode, navigate to the [Account Page](https://replit.com/account#roles) and toggle the switch.
    </Accordion>
  </Tab>
</Tabs>


# Overview
Source: https://docs.replit.com/guides/getting-started/getting-started



<CardGroup cols={2}>
  <Card title="Introduction to Replit" href="/getting-started/intro-replit" icon="code" horizontal>
    Replit provides a large range of tools and features necessary for software development. It serves as an IDE, a code collaboration platform, a cloud provider, a developer community, and so much more.
  </Card>

  <Card title="Quickstarts" href="/category/quickstarts" icon="rocket" horizontal>
    8 items
  </Card>
</CardGroup>


# Introduction to Replit
Source: https://docs.replit.com/guides/getting-started/intro-replit

Replit provides a large range of tools and features necessary for software development. It serves as an IDE, a code collaboration platform, a cloud provider, a developer community, and so much more.

<Frame>
  <iframe width="100%" height="420" src="https://www.youtube.com/embed/TiHq41h3nDo?si=j5554xFdqjLlbTJG" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen />
</Frame>

## Help

### [Community Hub](https://replit.com/community-hub)

Replit's Community Hub is the perfect place to get help on your code, report bugs, and learn about new features.

### [Contact Support](https://replit.com/support)

Get in touch with Replit's Support Team for any account/billing-related issues.

### [Legal & Security Info](https://replit.com/legal)

Legal and Security information and guides for reporting users and what is/isn't allowed on the platform.


# Overview
Source: https://docs.replit.com/guides/getting-started/quickstarts



<CardGroup>
  <Card title="Webscrape & Slack Notification Bot" icon="robot" href="/getting-started/Quickstarts/webscrape-and-slack-notifications" horizontal>
    This guide will walk you through the steps to scrape HackerNew\...
  </Card>

  <Card title="AI Slack Channel Summarizer" icon="slack" href="/getting-started/Quickstarts/ai-slack-channel-summerizer" horizontal>
    This guide will walk you through the steps to set up a Slack bot...
  </Card>

  <Card title="Google Sheets Integration" icon="table" href="/getting-started/Quickstarts/google-sheets-integration" horizontal>
    This guide will walk you through the steps to pull data from Goo...
  </Card>

  <Card title="Discord Bot" icon="discord" href="/getting-started/Quickstarts/discord-bot" horizontal>
    This guide will help you set up a Discord bot in Python that tells...
  </Card>

  <Card title="Next.js App" icon="react" href="/getting-started/Quickstarts/nextjs-app" horizontal>
    Next.js is a React framework that enables server-side rendering...
  </Card>

  <Card title="Flask App" icon="flask" href="/getting-started/Quickstarts/flask-app" horizontal>
    Deploying a Flask application on Replit is quick and easy. Replit...
  </Card>

  <Card title="FastAPI Service" icon="bolt" href="/getting-started/Quickstarts/fastapi-service" horizontal>
    Deploying a FastAPI server on Replit is quick and easy. FastAPI...
  </Card>

  <Card title="Static Blog Site (Astro)" icon="blog" href="/getting-started/Quickstarts/static-blog-astro" horizontal>
    The Astro starter kit template simplifies the process of building...
  </Card>
</CardGroup>


# AI Slack Channel Summarizer
Source: https://docs.replit.com/guides/getting-started/quickstarts/ai-slack-channel-summarizer

This guide will walk you through the steps to set up a Slack bot that summarizes channels using GPT-4.

## Features

*   Gather data from websites
*   Send processed data to Slack

### Step 1: Fork the template

Login to Replit and then fork the [AI Slack summary template](https://replit.com/@replit-matt/Slack-Channel-Summary-Bot#summary%5Fbot/app.py), select the **+ Use Template** button at the top right of the page. Follow the onscreen instructions to complete the fork and create a Repl.

### Step 2: Create the app in the Slack developer portal

Follow the instructions below to create and install a Slack app into your Slack workspace:

1.  Navigate to [**Your Apps**](https://api.slack.com/apps) page and select **Create an App**.
2.  Choose **From an app manifest** from the options.
3.  Select a Workspace from the dropdown menu and then select **Next**.
4.  Replace the JSON content with the content of the [manifest.json](https://replit.com/@replit-matt/Slack-Channel-Summary-Bot#assets/manifest.json) file, then select **Next**.
5.  Review and configure your **OAuth** permissions, **Features**, and **Settings**, then select **Create**.
6.  Select **Install the App**.

Note: You might need admin approval to install the App based on your organization's policies.

### Step 3: Get tokens from Slack developer portal

Follow these instructions to obtain the necessary tokens:

1.  **SLACK\_BOT\_TOKEN:** Navigate to your [Slack App page](https://api.slack.com/apps), then to Settings -> Install App. Under OAuth Tokens for your Workspace, copy the **Bot User OAuth Token** and use it to update the `SLACK_BOT_TOKEN` Secret key in your Repl.
2.  **SLACK\_SIGNING\_SECRET:** On your Slack App page, go to Settings -> Basic Information. In the **App Credentials** section, locate the **Signing Secret** and use it to update the `SLACK_SIGNING_SECRET` Secret key in your Repl.
3.  **SLACK\_APP\_TOKEN:** On your Slack App page, go to Settings -> Basic Information. In the *App-Level Tokens* section, select **Generate Token and Scopes**. Add a **Token Name**, choose your desired permissions, and select **Generate**. Copy the generated token and use it to update the `SLACK_APP_TOKEN` Secret key in your Repl.
4.  **OPENAI\_API\_KEY:** The API key is generated by registering your application on the open API provider's platform and creating a new application within their developer portal. The key is then generated and provided for authentication purposes.

Save all of these secrets to Replit by opening the **Secrets** tab in the Replit Workspace and pasting the values in.

### Step 4: Deploy your Slack bot on Replit

In the Workspace header, select the **Deploy** button located on the top right of your Repl, and from the available types of Deployments, choose **Reserved VM Deployments**. Select the **Set up your deployment** button, followed by the **Deploy** button to deploy your application.

### Step 5: Testing your bot

To summarize a channel, add your App to the channel and send it a direct message. Then, use the command `summarize-channel #my-channel 24` to summarize the activity in `#my-channel` from the past 24 hours.

**Example:**

```
/summarize-channel #my-channel 24

```

This command summarizes the `#my-channel` channel from the previous 24 hours. Adjust the channel name and duration according to your preferences.

## **Further customization**

*   **Customizable summarization criteria:** Customize summaries to focus on specific keywords or topics.
*   **Integration with additional platforms:** Extend functionality by integrating with other platforms.
*   **Personalized alert messages:** Customize message content and formatting for Slack alerts.
*   **Dynamic summarization frequency:** Set different summarization intervals for channels or topics.


# Discord Bot
Source: https://docs.replit.com/guides/getting-started/quickstarts/discord-bot

This guide will help you set up a Discord bot in Python that tells jokes.

Follow these steps to set up and deploy the bot.

### Step 1: Fork the template

Login to Replit and then fork the [Discord bot template](https://replit.com/@replit-matt/Discord-Python-Quickstart?v=1#main.py) by selecting the **+ Use Template** button at the top right of the page. Follow the on-screen instructions to complete the process and create your Repl.

### Step 2: Set up the bot in the Discord developer portal

Before you can deploy your Discord bot, you need to obtain the necessary tokens:

*   Navigate to your [Discord Developer Portal](https://discord.com/developers/applications) and then to your *Application's Bot* section.
*   Under *Build-A-Bot*, select the **Reset Token** to reveal the token.
*   Copy the token and update the `DISCORD_BOT_TOKEN` secret key into your Repl.

### Step 3: Test the bot in development mode

After updating the token, run the Repl to start the bot. You should be able to execute the `/tell-me-a-joke` command in your server.

### Step 4: Deploy the bot on Replit

In the Workspace header, select the **Deploy** button located on the top right of your Repl, and from the available types of Deployments, choose **Reserved VM Deployments**. Select the **Set up your deployment** button, followed by the **Deploy** button to deploy your application.

### Step 5: Test the bot in production mode

Navigate to your Discord server and send the command `/tell-me-a-joke` to the bot to get a joke.


# Google Sheets Integration
Source: https://docs.replit.com/guides/getting-started/quickstarts/google-sheets-integration

This guide will walk you through the steps to pull data from Google Sheets so you can process it or serve it as a web application.

## Features

*   Fetches data from Google Sheets
*   Pulls data into a [pandas](https://pandas.pydata.org/docs/) dataframe
*   Supports both public and private Google Sheets
*   Flexible configuration for data extraction

### Step 1: Fork the template

Login to Replit and then fork the [Google Sheets to HTML Renderer](https://replit.com/@replit-matt/Google-Sheets-to-API#README.md) by selecting the **+ Use Template** button at the top right of the page. Follow the onscreen instructions to complete the fork and create a Repl.

### Step 2: Configure your Repl (public Google Sheet)

To configure and run the App, follow the instructions below:

1.  Open the `main.py` file in your Repl. Replace the `WORKSHEET_URL` variable with the URL of your Google Sheets worksheet.
2.  (Optional) - If your worksheet is public, set `require_auth=False`.
3.  Select the **Run** button in your Repl to execute the code. This will render the HTML page containing the data from your Google Sheet. Note that this process does not require any authentication.
4.  Once the App is running, you can access the rendered HTML by navigating to the appropriate endpoint in your browser.

note

*   *Worksheet* refers to a *tab* on a Google Sheet. If you only have one tab, you can copy the URL; if not, select the proper tab to get its URL.
*   If you have sensitive data in your sheet, you'll need to enable the Google Sheets API.

### Step 3: Configure your Repl (private Google Sheet)

In this step, you'll configure Google Sheets API access.

If your sheet is private or contains sensitive data, you must enable the *Drive* and *Spreadsheets* APIs. To enable the APIs, use [enable API access for a project](https://docs.gspread.org/en/v6.0.0/oauth2.html#enable-api-access-for-a-project) documentation. Next, follow the steps below to generate a service account to run the App and render HTML content.

1.  Generate a [service account](https://docs.gspread.org/en/v6.0.0/oauth2.html#for-bots-using-service-account) for your project. This allows your App to access Google Sheets on your behalf. At the end of this process, a JSON file will be downloaded.
2.  Open the JSON file you just downloaded and copy its contents. Paste all the content into the `SERVICE_ACCOUNT_JSON` Secret variable in your Repl.
3.  Share your Google Sheet with the email address associated with the service account (found in the JSON file).
4.  You can update the App configuration by navigating to the `main.py` file in your Repl and locating the `get_worksheet_as_dataframe` function call. Replace `WORKSHEET_URL` with the URL of your Google Sheets document. Adjust parameters like require\_auth, skip\_rows, skip\_cols, and has\_header based on your sheet's configuration.
5.  Save your changes and run the App. Your sheet data should appear in the console. Once the App is running, you can access the rendered HTML by navigating to the appropriate endpoint in your browser.

### Step 4: Deploy your application

In the Workspace header, select the **Deploy** button located on the top right of your Repl, and from the available types of Deployments, choose **Reserved VM Deployments**. Select the **Set up your deployment** button, followed by the **Deploy** button to deploy your application.

## Further customization

*   Modify the HTML rendering logic in FastAPI to customize the appearance of the rendered data.
*   Implement additional endpoints or functionality to enhance the App's capabilities.
*   Secure your App further by implementing authentication or authorization mechanisms if needed.
*   Explore [FastAPI documentation](https://devdocs.io/fastapi/) to leverage more features and optimize your App's performance.


# Next.js App
Source: https://docs.replit.com/guides/getting-started/quickstarts/next-js-app

Next.js is a React framework that enables server-side rendering and generating static websites for React-based web applications.

Follow the steps below to get your `Next.js` app up and running on Replit:

### Step 1: Fork the template

Login to Replit and fork the [Next.js template](https://replit.com/@replit/Nextjs?v=1#README.md) by selecting the **+ Use Template** button located at the top right of the page. Follow the onscreen instructions to complete the fork and create a Repl.

### Step 2: Deploy the application

In the Workspace header, select the **Deploy** button and choose **Autoscale** from the types of Deployments. Then, select the **Set up your deployment** button and use the following configuration:

*   **Machine configuration:** You can keep the default values. The default machine configuration is a 1vCPU and 2 GiB RAM.
*   **Max number of machines:** Keep the default value of 3.
*   **Primary domains:** Choose a domain name for your app.
*   **Build command:** Enter the command `npm run build` into the **Build command** field.
*   **Run command:** Enter the command `npm run start` into the **Run command** field.

Select the **Deploy** button to deploy your application.

After a few minutes, your app will be live!

In the future, if you want to update your deployment, open the Deployments pane and either **Redeploy** or update the config in the settings.


# Webscrape & Slack Notification Bot
Source: https://docs.replit.com/guides/getting-started/quickstarts/webscrape-and-slack-notifications

This guide will walk you through the steps to scrape HackerNews and send data to a given Slack channel of your choice.

## Features

*   Fetches top Hacker News stories
*   Schedule for your app to run at fixed time intervals. E.g., "Run every Tuesday at 3:00 PM"

### Step 1: Fork the template

Login to Replit and then fork the [Hacker news webscraper template](https://replit.com/@replit-matt/Hacker-News-Alert-Slackbot?v=1#app.py) by selecting the **+ Use Template** button at the top right of the page. Follow the on-screen instructions to complete the process and create your Repl.

### Step 2: Create the Slack Bot in the Slack developer portal)

Follow the instructions below to create and install a Slack app into your Slack workspace:

1.  Navigate to [**Your Apps**](https://api.slack.com/apps) page and select **Create an App**.
2.  Choose **From an app manifest** from the options.
3.  Select a Workspace from the dropdown menu and then select **Next**.
4.  Replace the JSON content with the content of the [manifest.json](https://replit.com/@replit-matt/Hacker-News-Alert-Slackbot?v=1#manifest.json) file, then select **Next**.
5.  Review and configure your **OAuth** permissions, **Features**, and **Settings**, then select **Create**.
6.  Select **Install the App**.

Note: You might need to request approval to install the App based on your organization's policies.

### Step 3: Get tokens from Slack developer portal

Follow these instructions to obtain the necessary tokens:

1.  **SLACK\_BOT\_TOKEN**: Navigate to your [Slack App](https://api.slack.com/apps); in the left nav, look for Settings -> Install App, you'll find OAuth Tokens for Your Workspace. Copy the **Bot User OAuth Token** value and use it in your Repl to update the `SLACK_BOT_TOKEN` Secret key.
2.  **SLACK\_SIGNING\_SECRET**: On your [Slack App page](https://api.slack.com/apps), in the left nav, look for Settings -> Basic Information. In the *App Credentials* section, look for **Signing Secret** and use it in your Repl to update the `SLACK_SIGNING_SECRET` Secret key.
3.  **SLACK\_APP\_TOKEN** On your [Slack App page](https://api.slack.com/apps), in the left nav, look for Settings -> Basic Information. In the *App-Level Tokens* section, select **Generate Token and Scopes**. Add a token name of your choice and select **Add Scope**. Select the permissions and **Generate**. Now, copy the token and use it in your Repl to update the `SLACK_APP_TOKEN` Secret key.

Save all of these secrets to Replit by opening the "Secrets" tab in the Replit Workspace and pasting the values in.

### Step 4: Configure your App

To configure your App for Slack integration, follow the instructions below:

1.  Navigate to your Slack profile, select your profile picture, and use the ellipsis menu next to *View as* to select the **Copy member ID**. You'll use this ID to replace the value for **ALERT\_UIDS**.
2.  Get back to your repl created from Step 1, navigate to the **app.py** file, and locate the following lines:

```
KEYWORDS = ["h"]
ALERT_UIDS = ["U06C34217C5"]
# max 500
NUM_TOP_STORIES = 25
```

3.  Replace the value for **ALERT\_UIDS** with your Slack member ID that was copied earlier and adjust **KEYWORDS** and **NUM\_TOP\_STORIES** based on your preferences.
4.  Save the changes and select **Run**.

### Step 4: Deploy your App

In the Workspace header, select the **Deploy** button. From the available types of Deployment, choose [Scheduled Deployments](/cloud-services/deployments/scheduled-deployments). Then, select the **Set up your deployment** button. Add your schedule and select **Deploy** to deploy your application.

Your App will be deployed and will automatically run at your scheduled time.

### **Further customization**

*   Expand functionality by adding more keywords or refining matching criteria.
*   Personalize the alert message format or include additional information.
*   Enhance error handling or implement logging as needed.
*   Summarize the articles using GPT-4.


# Introduction to the Workspace
Source: https://docs.replit.com/guides/replit-workspace/introduction-to-workspace

The Workspace is like an IDE (Integrated Development Environment), providing a comprehensive set of development tools and features for creating, debugging, and managing your software. It helps you quickly and easily create, modify, and collaborate on your code.

<Frame>
  <iframe src="https://www.loom.com/embed/45e8cbc1586f49b5a9ef4a9416ef2a4b?sid=b2e37b91-f66e-40a9-aa5f-221d64abeb46" style={{border: "none", borderRadius: "8px"}} width="100%" height="420px" />
</Frame>

## How to create a Repl

A Repl (derived from REPL—"read-eval-print loop") is an interactive programming environment where you can write and execute code in real-time. To create one, navigate to [Replit](https://replit.com) and click the **create** button in the sidebar.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/create-repl.gif" />
</Frame>

Next, give your Repl a name and choose the Template you want to use. You can also directly [import a GitHub repository](/replit-workspace/using-git-on-replit/import-repository).

To import a GitHub repository, read our docs [here](/replit-workspace/using-git-on-replit/import-repository).

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/choose-lang.gif" />
</Frame>

Congratulations! You've just created a Repl!

## The sidebar

Navigate between files and folders easily using the file navigator in the sidebar. Repls come with syntax highlighting and autocompletion to make coding easier. And you can access helpful resources such as documentation from the Tools section for extra support.

### The file tree

Quickly locate and access files in your project using the file tree, an organized navigation system that displays the hierarchical structure of your project with each file and folder clearly labeled. The file tree offers a comprehensive view of the structure of your project and lets you modify any file immediately.

<Frame>
  <iframe src="https://www.loom.com/embed/84129671e4fd4346b426b726609a7cae?sid=ea104265-b5ac-4f93-bf50-6136258de174" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen width="100%" height="420px" />
</Frame>

### Tools

You can find Tools in the sidebar, like the Shell, Console, Secrets, and other helpful utilities for your Repl.

<Frame>
  <iframe src="https://www.loom.com/embed/2fe5ad5b4f644496be84986c088a566e?sid=defcea9c-dd79-453a-a766-4ed06721a694" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen width="100%" height="420px" />
</Frame>

### Repl Resources

Monitor your Repl's storage, memory, and processing capacity in real time using the Repl Resources section in the sidebar.

<Frame>
  <iframe src="https://www.loom.com/embed/294a292862504b8f962b2e4789bf67fb?sid=34793621-e454-405f-8e5b-bc4c51d30dd1" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen width="100%" height="420px" />
</Frame>

## Tabs and panes

Files and Tools are displayed in the workspace using tabs and panes. A tab is a single file or tool, while a pane can contain multiple files and tools.

<Frame>
  <iframe src="https://www.loom.com/embed/495838f6de3a42a890461572615ad48e?sid=df5d78b9-6d2e-4396-8853-4e3fa2b81db4" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen width="100%" height="420px" />
</Frame>

## Run your code

To execute your code, select the **Run** button. You can also use the Shell to run a custom command or modify the `.replit` file to alter the initial run command. Check out the [Configuring a Repl](/replit-workspace/configuring-repl) doc to learn how to customize the way your Repl runs even further.

<Frame>
  <iframe src="https://www.loom.com/embed/086c8447bf234ca290ad11f0bbb2e13e?sid=1e8597e5-a3c4-4b36-b42e-f3ad97533334" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen width="100%" height="420px" />
</Frame>

## The spotlight page

The spotlight page is how others can view and interact with your Repl.

<Frame>
  <iframe src="https://www.loom.com/embed/568fa9603a5546919e97b06695ea1da5?sid=cbc2a2f4-ae3f-4a96-85ef-45941f587d35" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen width="100%" height="420px" />
</Frame>

## Multiplayer

Replit's multiplayer feature allows users to collaborate on code simultaneously in real-time.

<Frame>
  <iframe src="https://www.loom.com/embed/9addef3f98584fefa07ef7a875e37440?sid=eccfa666-399f-4272-8f8a-2cdfdb90e3be" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen width="100%" height="420px" />
</Frame>

***

Now you are ready to build. Get started with one of our [templates](https://replit.com/templates). If you need more help, check our [Community Hub](https://replit.com/community) for additional resources.


# Introduction
Source: https://docs.replit.com/introduction

Welcome to the home of your new documentation

<img className="block dark:hidden" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/hero-light.svg" alt="Hero Light" />

<img className="hidden dark:block" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/hero-dark.svg" alt="Hero Dark" />

## Setting up

The first step to world-class documentation is setting up your editing environments.

<CardGroup cols={2}>
  <Card title="Edit Your Docs" icon="pen-to-square" href="https://mintlify.com/docs/quickstart">
    Get your docs set up locally for easy development
  </Card>

  <Card title="Preview Changes" icon="image" href="https://mintlify.com/docs/development">
    Preview your changes before you push to make sure they're perfect
  </Card>
</CardGroup>

## Make it yours

Update your docs to your brand and add valuable content for the best user conversion.

<CardGroup cols={2}>
  <Card title="Customize Style" icon="palette" href="https://mintlify.com/docs/settings/global">
    Customize your docs to your company's colors and brands
  </Card>

  <Card title="Reference APIs" icon="code" href="https://mintlify.com/docs/api-playground/openapi">
    Automatically generate endpoints from an OpenAPI spec
  </Card>

  <Card title="Add Components" icon="screwdriver-wrench" href="https://mintlify.com/docs/components/accordion">
    Build interactive features and designs to guide your users
  </Card>

  <Card title="Get Inspiration" icon="stars" href="https://mintlify.com/customers">
    Check out our showcase of our favorite documentation
  </Card>
</CardGroup>


# Reporting Abuse on Replit
Source: https://docs.replit.com/legal-and-security-info/abuse-report

At Replit, we strive to maintain a safe and welcoming environment for all our users. If you encounter abusive, harmful, or inappropriate content, we encourage you to report it immediately. We have established multiple channels to address various types of concerns efficiently. Here's how you can help

## 1. Use the On-Site reporting feature

Use the on-site reporting feature for a quick and direct way to report content that violates our [Community Standards](https://blog.replit.com/community-standards). This method ensures that your report is immediately sent to our staff members for review. Here's how to use it:

* Navigate to the content you wish to report.
* Look for a report button or link. This is usually located near the content itself, such as under a post or within a user's profile options.
* Select the report button or link and describe the nature of the abusive content.
* Submit your report. Our team will review it as soon as possible and take appropriate action.

For more detailed instructions on using the reporting feature, please read [How to Make Reports](./trust-and-safety.md#how-to-make-reports).

## 2. Report Abuse via email

If you come across phishing attempts or suspect a piece of content is designed to deceive or harm others by pretending to be something it's not, please report it directly to our dedicated email address for abuse reports:

* **Email**: `abuse@replit.com`
* **Subject**: Briefly describe the issue (e.g., "Phishing Attempt Detected").
* **Body**: Include detailed information about the phishing attempt, such as URLs, user account names involved, and a description of the content. Attach any relevant screenshots if possible.

### Additional Resources

For cybersecurity organizations looking to report phishing detections via automation, we invite you to contact us for potential partnership opportunities. Please reach out to the abuse team at [abuse@replit.com](mailto:abuse@replit.com) to discuss further.

## 3. Issue DMCA Takedown Requests

For copyright holders or their authorized representatives, Replit respects your intellectual property rights and follows the Digital Millennium Copyright Act (DMCA) procedures to address your concerns. For detailed instructions on copyright claims on Replit, please read [Copyright claims and takedown requests](./copyright-claims-takedown-requests).

## 4. Report Security vulnerabilities

If you've discovered a security vulnerability within Replit, we highly value your contribution to our community's safety and encourage you to report it to us. Please read our [Security](./security) documentation for instructions on disclosing potential vulnerabilities.


# Account Inactivity
Source: https://docs.replit.com/legal-and-security-info/account-inactivity

Learn about Replit's account inactivity policy, when accounts may be terminated, and how paid subscriptions affect account status.

A free Replit account provides access to most Replit features and products. An account is kept active by user actions, including logging in and interacting with the Replit Workspace. An inactive Replit account is one that has not been used within a **1-year** period, meaning the user has not logged in to the account during that period. Replit reserves the right to terminate inactive Replit accounts and delete associated user data. Replit will delete Replit Apps associated with inactive free accounts.

Replit accounts under a paid subscription plan are not subject to termination due to account inactivity.


# Copyright claims and takedown requests
Source: https://docs.replit.com/legal-and-security-info/copyright-claims-takedown-requests

Learn how to submit DMCA takedown requests for copyrighted content or private information on Replit Apps and understand the required documentation process.

It is against our [Terms and Conditions](https://replit.com/site/terms) for users to publish any content that violates privacy rights, publicity rights, copyrights, or contract rights. We will immediately remove a replit app at your request in the case of either of the following:

* You hold a copyright to content contained within a public/private replit app, or a public/private classroom assignment.
* Personal/private information is contained within a public/private replit app, or a public/private classroom assignment.

To issue a takedown request, send an email to [dmca@replit.com](mailto:dmca@replit.com). Ensure that your request complies with all the requirements of the DMCA (see below). Our team will review your submission and take appropriate action.

Per the Digital Millennium Copyright Act (DMCA, see 17 U.S.C 512(c)(3) for details), we require the following information in writing for DMCA takedown requests:

* An electronic or physical signature of the person authorized to act on behalf of the owner of the copyright's interest.
* A description of the copyrighted work that you claim has been infringed, including the URL of the location where the copyrighted work exists, or a copy of the copyrighted work.
* Identification of the URL or other specific location on the service where the material that you claim is infringing is located.
* Your address, telephone number, and email address.
* A statement by you that you have a good faith belief that the disputed use is not authorized by the copyright owner, its agent, or the law.
* A statement by you, made under penalty of perjury, that the above information in your notice is accurate and that you are the copyright owner or authorized to act on the copyright owner's behalf.


# Deleting your data
Source: https://docs.replit.com/legal-and-security-info/deleting-your-data

Learn how to permanently delete your account and personal information from Replit using either the web browser or mobile app.

To delete your personal information from Replit, please follow these instructions.  If you are using a desktop web browser:

1. Log in to Replit and visit [https://replit.com/account](https://replit.com/account), or click your account name (next to your profile picture) then click Account.
2. Scroll down to the "Account" section and find the button "Request account deletion".
3. Click that button, then click "Yes, Delete my Account" to confirm.

You can also perform the same process using our mobile app:

1. Click "Account" at the bottom of the screen.
2. Scroll down to "Manage Account".
3. Click "Delete Account" and then "Delete Account" again to confirm.

Deleting your account removes all of your content from Replit (including Replit Apps, templates, posts), and results in your personal information being purged from our systems. You will not be able to recover this data if you change your mind.

For further information about your rights over your personal data, please view our [Privacy Policy](https://replit.com/site/privacy).


# Licensing information
Source: https://docs.replit.com/legal-and-security-info/licensing-info

Learn how public and private Replit Apps are licensed, including MIT license details and how to specify custom licenses for your projects.

Here, you will find information about how your Replit Apps are licensed.

## Public Replit Apps

Content you create in a public Replit App in a team or personal context is automatically subject to an MIT license. The full text of the MIT license reads as follows:

> Copyright

> Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

> The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

> THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

## Specific Replit App Licenses

<Note>
  Adding a license file to a public Replit App does not prevent the Replit App from being made available under the MIT license. To make a license file effective, the Replit Apps must be made private as described below.
</Note>

For specific Replit Apps, we may offer features to allow users to change the default license. For example, we might enable the ability to earn or to pay in Cycles for rights in a Replit Apps, or for access to specific features or digital items.

## Private Replit Apps

Content in a private Replit Apps in a Team or personal context is licensed to Replit on a platform basis under the [Terms of Service](https://replit.com/site/terms).

If you would like to attach your own license to the code, we recommend you include the license as a (code) comment or a readme.txt file, as part of the Replit Apps.


# Security
Source: https://docs.replit.com/legal-and-security-info/security

We understand that your code, applications, and user-data hosted on Replit are very important, so we take seriously our responsibility to safeguard it. After all, we use Replit to build our business too!

## Reporting a Vulnerability

Please use the following dedicated channel for all security-related concerns:

* **Email**: `security@replit.com`
* **Subject**: "Security Vulnerability Report".
* **Body**: Describe the nature of the vulnerability in detail, including the steps to reproduce it if possible. Please include any relevant information that would help us understand the severity and scope of the issue, such as the potential impact on user data or system integrity.

## Responsible Disclosure

Pursuant to our [terms of service](https://replit.com/site/terms), you should not take any actions
that interfere or disrupt the service. If you are in doubt, and think there might be a risk of service
disruption, then don't try to verify the bug yourself – email us and we'll work with you to verify it.

Email [security@replit.com](mailto:security@replit.com) with a description of the issue and we'll respond as soon as possible.


# Strike system FAQ
Source: https://docs.replit.com/legal-and-security-info/strike-system-faq

Learn about warnings, banned community access, and site bans in Replit.

### What is a Warning in Replit?

A staff member will send you a warning when you violate the [Community Standards](https://blog.replit.com/community-standards), [Terms of Service](https://replit.com/site/terms), or [Privacy Policy](https://replit.com/site/privacy). Other disciplinary actions may include unpublishing of your Replit App(s), cancellation of a Bounty, and/or hiding/deleting Bounty Applications.

### Can I republish my Replit App after it's been unpublished?

Yes. Revise your Replit App to abide by the [Community Standards](https://blog.replit.com/community-standards), then republish.

### What happens when I'm banned from the Community?

When banned from the community, you cannot create posts, share Replit App, or participate in [Bounties](https://replit.com/bounties). However, you can still use the online IDE for features unrelated to community activity.

### What happens when I'm banned from Replit?

A ban from Replit means you cannot log into your account and all Replit App will have been deleted. This often occurs for violating the [Terms of Service](https://replit.com/site/terms).

### How can I appeal a ban?

Send an email to [appeals@replit.com](mailto:appeals@replit.com) with your Replit username, a description of the action that you are appealing, and your reasons for the appeal.


# Support Policy
Source: https://docs.replit.com/legal-and-security-info/support-policy

Replit offers different support options for all Replit users, members and free.

## Community support

All Replit users can also access the [Community Hub](https://replit.com/community) for community resources.

Free users can also email [support@replit.com](mailto:support@replit.com) for get help with their account.

## Replit Core member support

Replit Core members can submit private support requests to Replit's support team. This support covers a wide range of topics including billing, account management, product questions, and technical assistance. Member support is open from 9am to 8pm Eastern Time (UTC-5), Monday through Friday and available only in English.

### Channels

Member support is available via the in-app `? Get Help` button as well as emailing [support@replit.com](mailto:support@replit.com). Using the in-app button is the best way to get in touch.

### Scope

Member support covers a number of areas:

* Billing, Cycles, Bounties, and account help
* Product issues, configuration help, and general usage questions
* Analysis of Nix-os issues
* Help with Extensions, Power Ups, Replit AI, and other features
* [Templates](https://replit.com/templates) created by @replit

Member support does not cover:

* General application debugging
* General modifications or refactoring of applications to run or deploy on Replit
* Writing code or teaching how to code: Replit provides a number of resources for learning how to code, but support cannot provide direct assistance
* Community created Templates

However, [Community Hub](https://replit.com/community) is a great resource for learning how to code or getting code-level help.


# Trust and Safety at Replit
Source: https://docs.replit.com/legal-and-security-info/trust-and-safety

At Replit, we strive to create a fun and creative community that is also trusted and safe. To achieve this goal, we have implemented rules and policies that promote positive behavior and protect our users. In this document, you will find a summary of our key rules, tips on how to report any concerns, and information on where you can learn more.

## Rules for Content and Behavior

To maintain a safe and trusted environment, we have established a set of rules that are detailed in our [Terms of Service](https://replit.com/site/terms). The same rules apply whether you are publishing Replit App, or engaging with other users in our Community.

* Keep it appropriate. All content must be suitable for a workplace environment and free of any offensive language or nudity. We prohibit violent and graphic content, as well as content that depicts or encourages self-harm.
* No bullying. We have a zero-tolerance policy for bullying, trolling, doxxing, hate speech, racism, sexism, or any other form of prejudice. Violation of this rule may result in an immediate ban.
* No illegal or regulated content. Replit should not be used for any illegal activities, such as dealing in drugs, sex, gambling, weapons, or pirated software.
* Misuse of the service is not allowed. Do not share content that could harm other users, such as spam, malware, or phishing. We also do not allow Replit App that consume an excessive amount of resources, such as spam bots and cryptocurrency miners.

## How we enforce our rules

Our staff works hard to keep our service safe by actioning reports concerning content that violates our [Terms](https://replit.com/site/terms), [Community Standards](https://blog.replit.com/community-standards), or [Privacy Policy](https://replit.com/site/privacy).

If your content violates the rules, we will take appropriate action against it. In circumstances of serious violations, you may be banned from using Replit. For more information on the actions we take, checkout our [Strike System FAQ](/legal-and-security-info/strike-system-faq).

## Protecting Underage users

Replit upholds the highest global privacy standards for our youngest members. To ensure that their personal information remains safe, we don't collect it in the first place.

To protect children from inappropriate images, we automatically scan all images uploaded to Replit. Our machine learning technology quickly detects and flags most images that violate our rules for review by a staff member.

We also take swift action to prevent predators from using Replit. Any account that shares child abuse material (CSAM) or seeks sexual contact with minors will be terminated and may be reported to the authorities.

## How to Make Reports

### Reporting a Replit App

Report a Replit App to a staff member by visiting its cover page and clicking the kebab menu. Select the "Report" option and provide a reason for the report. A staff member will investigate and take appropriate action as soon as possible

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/animations/report-repl.webp" alt="Reporting a Replit App" />
</Frame>

### Reporting a User

Report a user by accessing the "Report" option on their profile page. Provide a reason for the report, and a staff member will review and address as soon as possible

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/animations/report-user.webp" alt="Reporting a User" />
</Frame>

### Reporting a Bounty

Report a bounty by accessing the "Report" option on the bounty page. If you are the poster of a bounty, you can also report a bounty application that violates our rules in a similar way.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/animations/report-bounty.gif" alt="Reporting a Bounty" />
</Frame>

### Reporting a Theme

Report a theme by accessing the "Report" option on the theme page. Themes should not be reported because of their appearance, but only because they contain content such as an offensive name that violates our rules.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/animations/report-theme.gif" alt="Reporting a Bounty" />
</Frame>

## Additional Information

This page contains an easy-to-read summary of information that is given in more detail in our other policy documents. If you would like more information, please consult these resources:

* [Terms of service](https://replit.com/site/terms)
* [Privacy Policy](https://replit.com/site/privacy)
* [Copyright claims and takedown requests](./copyright-claims-takedown-requests)


# Usage Quota & Limits
Source: https://docs.replit.com/legal-and-security-info/usage

Learn about Replit's resource limits, including CPU, RAM, storage, and network restrictions that apply to Replit Apps based on your plan.

Replit has certain soft and hard limits in using its service. Hard limits are automatically enforced by the Service. Soft limits are consumable resources that you agree not to exceed. Details of these limits are shown at [https://replit.com/site/pricing](https://replit.com/site/pricing) and may be updated there from time to time Long periods of inactivity may result in an account or your use of the Service being deemed inactive.

* CPU per Replit App: determined by plan (hard)

* RAM per Replit App: determined by plan (hard)

* Concurrent Replit Apps: 20 (hard)

* Storage per Replit App: determined by plan and storage used by other Replit Apps (hard)

* Storage per account: determined by plan (hard)

* Network bandwidth: determined by plan (soft)

In addition, regardless of your plan, some limits and restrictions are imposed on your Replit App’s content and its network activity in order to enforce our Terms of Service. If these limits are exceeded, your Replit App may become temporarily unavailable, or particular operations may fail with an error. These include:

* A limit on the number of concurrent outgoing network connections in a given period.

* Limits on the frequency and size of requests to Replit’s internal GraphQL API.

* Restrictions on the use of code that appears to violate our Terms of Service, such as cryptocurrency mining.


# Replit web accessibility statement
Source: https://docs.replit.com/legal-and-security-info/web-accessibility

Learn about Replit's commitment to web accessibility, WCAG 2.1 compliance goals, current accessibility status, and how to provide feedback about accessibility features.

*See our accessibility features [here](/replit-workspace/workspace-features/preferences).*

Replit believes that computing is for everyone. As such we are committed to making our service fully accessible to all, including people with disabilities. This statement explains our accessibility goals, our progress towards meeting those goals, and how you can contact us with feedback about accessibility on Replit.

# Conformance goals

Our aim is to achieve full compliance with the W3C WAI’s Web Content Accessibility Guidelines (WCAG) 2.1, which defines requirements for designers and developers to improve accessibility for people with disabilities. Replit is currently partially conformant with WCAG 2.1 level AA. Partially conformant means that some parts of our website content do not yet fully conform to the accessibility standard.

# Current status

Replit has an ongoing internal project to improve our site’s accessibility, responding to our own internal evaluation, user interviews and reports, and the results of an independent evaluation conducted by the Cornell University IT Department in 2021.

The majority of content on our website is available in HTML format conformant with current W3C standards for HTML and CSS. Non-text content presented to the user, such as images and form elements, have a text alternative that can be recognized and spoken aloud by screen readers.

Despite our best efforts to ensure accessibility of Replit, you may encounter some limitations. In particular, the inability to fully manipulate the workspace using your keyboard is a known issue that we are working to address.

# Giving feedback

If you have any trouble accessing the Replit website, we encourage you to provide us with feedback by emailing [contact@replit.com](mailto:contact@replit.com). Please provide the URL (web address) of the material you tried to access, the problem you experienced, and your contact information.


# Replit Desktop App
Source: https://docs.replit.com/platforms/desktop-app

The Replit Desktop App for macOS, Windows, and Linux lets you create apps using all Replit's tools in a focused coding environment.

In the Replit Desktop App, you can create, run, and deploy your apps using a
native application for your desktop environment. The desktop app provides the
complete functionality of the web version on Replit.com.

## What is the Replit Desktop App

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/desktop/desktop-app.png" alt="screenshot of the desktop app" />
</Frame>

The Replit Desktop App is a full-featured development environment, packaged as a standalone app
that runs on your desktop or laptop. You can access the same workspace tools as the web version,
allowing you to create your app without the distractions of a browser.

## Getting started

Follow these steps to install the Replit Desktop App and create a Replit App.

### Install the app

To install the app compatible with your operating system, follow these steps:

1. Navigate to the <a href="https://replit.com/desktop" target="_blank">desktop app download page</a>.
2. After downloading, open the file and follow the installation instructions.
3. Open the app and log in with your existing Replit account.

<Note>
  The macOS and Windows desktop apps automatically update when you launch them. You must manually update the Linux desktop app.
</Note>

### Create an app

After logging into your Replit account, follow these steps to create a new Replit App:

1. In the desktop app, select <img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/shared/buttons/create-app-icon.svg" alt="plus sign icon" />**Create App**.
2. The desktop app opens a new browser tab on Replit.com titled **Create a new App**.
3. Follow the prompts to create your new Replit App in the browser. Take note of the Replit App name.
4. Switch to the desktop and select the app you created from the **Recent** list. Alternatively, locate the app by typing the name in the **Search Apps** field.

### Open an existing app

To open an existing Replit App in the Replit Desktop app, follow these steps:

1. Select the <img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/shared/buttons/replit.svg" alt="Replit logo" /> Replit icon in the top left.
2. Select the app you want to open from the list. Alternatively, locate the app by typing the name in the **Search Apps** field.

## Key features

* **Focused environment**: Create your app without the distractions of working from a web browser
* **Complete toolset**: Access the same tools as the web version to create, run, and deploy your app
* **Customizable workspace**: Arrange tools on your screen and use keyboard shortcuts to maximize productivity

## Next steps

* [Introducing the Replit Desktop App](https://blog.replit.com/desktop-app): Read the Replit Desktop App announcement on the Replit blog.
* [Replit AI](/category/replit-ai): Learn about Replit's AI-powered tools and their capabilities


# Replit Mobile App
Source: https://docs.replit.com/platforms/mobile-app

The Replit Mobile App for iOS and Android lets you create apps using all of Replit's tools on the go.

In the Replit Mobile App, you can create, run, and deploy your apps using an
app creation experience optimized for your smartphone or tablet. The mobile
app provides the complete functionality of the web version on Replit.com.

## What is the Replit Mobile App

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/mobile/mobile-screens.png" alt="image of the mobile app" />
</Frame>

The Replit Mobile App is a full-featured development environment, with an interface designed for touchscreens and mobile use.
It provides access to the same workspace tools as the web version, allowing you create your app
anywhere you have an internet connection.

## Getting started

Follow these steps to learn to install the app and create a Replit App.

### Install the app

To install the app on your compatible mobile device, follow these steps:

1. Navigate to the <a href="https://replit.com/mobile" target="_blank">mobile app download page</a> and install the app for your mobile device OS.
2. Open the app and register for a new account or log in with an existing one.
   If you register for a new account, you must verify your email address to complete the process.
3. Create a new Replit App or select an existing one.

### Create an app

You can start a new Replit App one of the following ways:

<Accordion title="Create a new app using Agent">
  To access the Agent text area which lets you enter a prompt for AI to build your app, follow these steps:

  1. Select <Icon icon="plus" color="black" /> **Create** in the dock at the bottom of the screen.
  2. Toggle <img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/replitai/agent_icon.svg" alt="Agent icon" /> Agent at the top of the screen.
  3. Enter a description of the app you want Agent to build.
</Accordion>

<Accordion title="Create a new app from a Template">
  To start your app from a Template, follow these steps:

  1. Select <Icon icon="plus" color="black" /> **Create** in the dock at the bottom of the screen.
  2. Toggle the <img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/mobile/chevrons.svg" alt="angle brackets icon" /> angle brackets at the top of the screen.
  3. Browse the selection of Templates or search for them by selecting the <Icon icon="magnifying-glass" color="black" /> magnifying glass.
</Accordion>

<Accordion title="Create a new app from a GitHub repository">
  To start your app using files from a GitHub repository, follow these steps:

  1. Select <Icon icon="plus" color="black" /> **Create** in the dock at the bottom of the screen.
  2. Toggle the <img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/mobile/chevrons.svg" alt="angle brackets icon" /> angle brackets at the top of the screen.
  3. Select <Icon icon="github" color="black" /> **Import from URL** and complete the dialog prompts.
     To choose a private repository, select **Settings** and add a GitHub account that can access the repository.
</Accordion>

## Key features

The Replit Mobile App includes the following features:

* **Workspace Tools**: Create fully functional apps using the same Replit workspace tools as the web version
* **Collaboration**: Work together using real-time multiplayer collaboration to build better projects faster
* **Deployment**: Publish your projects instantly with zero setup required to make them available for anyone to access
* **Templates**: Jumpstart your app using a Template from a community of over 15 million software creators
* **Custom domains**: Assign a custom domain to your project for a professional presence

## Upgrade your plan

To use Replit's AI-powered tools beyond the free trial, you must upgrade to the Replit Core monthly or yearly subscription.

To subscribe using the mobile app, follow these steps:

1. Navigate to the **Account** section.
2. Select **Upgrade** to see the available plans.
3. Select the plan type that meets your needs and then select **Continue with Core**.
4. Follow the instructions specific to your mobile app store to complete payment.

## Next steps

* [Replit AI](/category/replit-ai): Learn about Replit's AI-powered tools and their capabilities
* [Templates](/replit-workspace/templates): Learn what Templates are and how to create them


# Quickstart
Source: https://docs.replit.com/quickstart

Start building awesome documentation in under 5 minutes

## Setup your development

Learn how to update your docs locally and deploy them to the public.

### Edit and preview

<AccordionGroup>
  <Accordion icon="github" title="Clone your docs locally">
    During the onboarding process, we created a repository on your Github with
    your docs content. You can find this repository on our
    [dashboard](https://dashboard.mintlify.com). To clone the repository
    locally, follow these
    [instructions](https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository)
    in your terminal.
  </Accordion>

  <Accordion icon="rectangle-terminal" title="Preview changes">
    Previewing helps you make sure your changes look as intended. We built a
    command line interface to render these changes locally. 1. Install the
    [Mintlify CLI](https://www.npmjs.com/package/mintlify) to preview the
    documentation changes locally with this command: `npm i -g mintlify`
    2\. Run the following command at the root of your documentation (where
    `mint.json` is): `mintlify dev`
  </Accordion>
</AccordionGroup>

### Deploy your changes

<AccordionGroup>
  <Accordion icon="message-bot" title="Install our Github app">
    Our Github app automatically deploys your changes to your docs site, so you
    don't need to manage deployments yourself. You can find the link to install on
    your [dashboard](https://dashboard.mintlify.com). Once the bot has been
    successfully installed, there should be a check mark next to the commit hash
    of the repo.
  </Accordion>

  <Accordion icon="rocket" title="Push your changes">
    [Commit and push your changes to
    Git](https://docs.github.com/en/get-started/using-git/pushing-commits-to-a-remote-repository#about-git-push)
    for your changes to update in your docs site. If you push and don't see that
    the Github app successfully deployed your changes, you can also manually
    update your docs through our [dashboard](https://dashboard.mintlify.com).
  </Accordion>
</AccordionGroup>

## Update your docs

Add content directly in your files with MDX syntax and React components. You can use any of our components, or even build your own.

<CardGroup>
  <Card title="Style Your Docs" icon="paintbrush" href="/settings/global">
    Add flair to your docs with personalized branding.
  </Card>

  <Card title="Add API Endpoints" icon="square-code" href="/api-playground/configuration">
    Implement your OpenAPI spec and enable API user interaction.
  </Card>

  <Card title="Integrate Analytics" icon="chart-mixed" href="/analytics/supported-integrations">
    Draw insights from user interactions with your documentation.
  </Card>

  <Card title="Host on a Custom Domain" icon="browser" href="/settings/custom-domain/subdomain">
    Keep your docs on your own website's subdomain.
  </Card>
</CardGroup>


# Replit App Embed
Source: https://docs.replit.com/replit-app/app-embed

Embedding a Replit App in your website or documentation allows you to display a read-only view of your code, meaning viewers can see but not edit the code. This feature is particularly useful for showcasing examples, tutorials, or code snippets directly within your content.

### Running and deploying

To interact with the Replit App, such as running the code and seeing its output, users must fork it. Forking creates a personal copy of the Replit App in their workspace, where they can run and edit the code. For a more integrated experience, you can deploy your Replit App and use an iframe to embed the deployed application from `replit.app` directly into your site.

### How to embed a Replit App

To embed a public Replit App, append the `?embed=true` query parameter to the Replit App's URL. This modification converts the URL into an embeddable link. Below is an example demonstrating how to embed a Replit App using an iframe in HTML:

```html
<iframe src="YOUR Replit App LINK?embed=true" width="600" height="400"></iframe>
```

<Note>
  Replace `YOUR Replit App LINK` with the actual link to your Replit App, for example, `https://replit.com/@user/repl-name.`
</Note>

Here's an example of an embedded Replit App:

<iframe src="https://replit.com/@soren/sorenrood-dotcom?embed=true&theme=dark" height="600" />

### Customizing the theme

You can customize the appearance of the embedded Replit App by setting the theme. Add theme=light or theme=dark at the end of the URL to choose between a light or dark theme. For instance, to embed a Replit App with a light theme:

```html
<iframe src="YOUR Replit App LINK?embed=true&theme=light" width="600" height="400"></iframe>
```

Example with a light theme:

<iframe src="https://replit.com/@soren/sorenrood-dotcom?embed=true&theme=light" height="600" />


# Collaboration
Source: https://docs.replit.com/replit-app/collaborate

One of the great parts about Replit is that _everything_ you make can be shared with the world. Since your code is hosted in the cloud, it's as simple as one click!

There are a few ways to share your Replit App, we'll cover them here.

## Collaborate in real time (Join Links)

<Warning>
  * Join links **grant edit access** to your Replit App, so be careful who you share them with.
  * Join links **share secrets** stored in the "Secrets" pane.
    For sharing a Replit App as you would a Repo or other code, take a look at [making your Replit App public.](#make-your-repl-public)
</Warning>

To collaborate with your friends on your Replit App, you can create a Join Link. Join Links create a unique URL that you can share with others. When they click the link, they'll be taken to your Replit App and can start coding with you in real time.

Join Links are **private** by default, so only people with the link can access your Replit App.

If you accidentally share your link with someone you didn't mean to, you can always regenerate a new one. to create a new join link, click the "Invite" button in the top right corner of your Replit App.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/programming-ide/join-link.png" alt="Create a Join Link" />
</Frame>

Simply toggle the Join Link to "On" and copy the resulting URL. When your friends with an active Replit account navigate to that URL, they'll be able to edit your Replit App in real time.

You'll also receive a notification when someone joins your Replit App.

## Make your Replit App Public

<Note>
  Making your Replit App public *will not* expose any secrets you've saved in the "Secrets" pane. *However*, it will expose any code you've written, so be careful about sharing sensitive information.
</Note>

Head over to your Replit App and click the name in the top left corner. This will open up the settings for your Replit App.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/animations/click-repl-name.png" alt="Click Replit App Name" />
</Frame>

Now, you can toggle the Replit App to be public or private.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/animations/make-repl-public.webp" alt="Make Replit App Public" />
</Frame>

Making your Replit App public will allow anyone to view your code and run your project. It creates a unique URL that you can share with anyone, like this: [https://replit.com/@replit/Python?v=1](https://replit.com/@replit/Python?v=1).

### Create a template

After you've made your Replit App visible, you should consider turning it into a **[template](https://replit.com/templates)**.

Creating a template makes it easy for others to start their own project based on your code. It will improve the discoverability of your Replit App and surface it on pages like [https://replit.com/templates](https://replit.com/templates).

To lean more about templates and create your own, you can read more [here](/replit-workspace/templates).


# Replit App Configuration
Source: https://docs.replit.com/replit-app/configuration

Learn how to configure your Replit App using .replit and replit.nix files to manage dependencies, run commands, environment variables, and deployment settings.

Replit App are configured with two files: the `.replit` and `replit.nix`. They affect how your Replit App behaves, from code execution to development tools and languages.

These configuration files are hidden by default. Show them in your Replit App by selecting "Show hidden files" from the filetree menu.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/getting-started/show-hidden-files.png" alt="image" />
</Frame>

## `replit.nix` file

Replit uses `Nix` to manage packages and environments. The `replit.nix` file is used for:

**Specifying system dependencies:** Define exactly what software packages your Replit App requires, managed through Nix, a package manager.

**Creating reproducible environments:** Ensure your development environment is consistent and reproducible, ideal for collaborative projects and testing across multiple systems.

You can manage Nix packages visually through the `Dependencies` tool. Learn more in the [System Dependencies](/replit-workspace/dependency-management#system-dependencies) guide.

To configure packages with the `replit.nix` file, you can list [Nix packages](https://search.nixos.org/packages) in the `deps` array, prefixed with `pkgs.`. Any changes will be synced after your shell is reloaded.

```nix
{ pkgs }: {
  deps = [
    pkgs.nodejs-19_x
    pkgs.nodePackages.typescript-language-server
    pkgs.yarn
    pkgs.replitPackages.jest
  ];
}
```

## `.replit` file

The `.replit` file controls your Replit App's behavior. It uses the `toml` [configuration format](https://toml.io/en/). Here are some of the key aspects that can be configured:

**Run command:** Specify the command that executes when the Run button is selected. Each template has a default run command to allow code execution immediately. For more customized and complex apps, use [Workflows](../replit-workspace/workflows.md).

**Language Server Protocol (LSP)**: Provides features like auto-complete, code navigation, code highlighting, and real-time linting and errors.

**Environment variables:** Set and manage environment variables essential for your applications to run correctly.

**Dependencies and packages:** Manage package installations and configurations directly through the `.replit` file, ensuring your Replit App has all the necessary tools ready upon startup. You can manage dependencies visually through the `Dependencies` tool. Learn more in the [System Modules](../replit-workspace//dependency-management.md#advanced-configuration) guide.

For Python applications, the default `.replit` file looks like:

```toml
entrypoint = "main.py"
modules = ["python-3.10:v18-20230807-322e88b"]

[nix]
channel = "stable-23_05"

[unitTest]
language = "python3"

[gitHubImport]
requiredFiles = [".replit", "replit.nix"]

[deployment]
run = ["python3", "main.py"]
deploymentTarget = "cloudrun"
```

The following table provides a view of each setting within the `.replit` file, explaining what each configuration does and its impact on the Replit App environment.

| **Configuration key**                           | **Value/Example**                      | **Description**                                                                                                                                                                              |
| ----------------------------------------------- | -------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| <a name="entrypoint" />`entrypoint`             | `main.py`                              | Specifies the main file to be executed and displayed by default when the editor is opened. You can rename the file name based on your application.                                           |
| <a name="modules" />`modules`                   | `["python-3.10:v18-20230807-322e88b"]` | Defines specific versions of programming languages or other major dependencies supported by Replit.                                                                                          |
| <a name="nix" />`[nix]`                         |                                        | Specifies settings for using Nix, a package manager, to manage system dependencies. Refer to [Dependency Management](/replit-workspace/dependency-management) document for more information. |
| <a name="channel" />`channel`                   | `stable-23_05`                         | Indicates the Nix channel to use, which affects the versions of system dependencies available.                                                                                               |
| <a name="unitTest" />`[unitTest]`               |                                        | Configures settings related to unit testing within the Replit App.                                                                                                                           |
| <a name="language" />`language`                 | `python3`                              | Specifies the language used for unit testing, indicating that Python 3 is used for writing tests.                                                                                            |
| <a name="gitHubImport" />`[gitHubImport]`       |                                        | Settings that affect how projects are imported from GitHub, specifically which files must be included.                                                                                       |
| <a name="requiredFiles" />`requiredFiles`       | `[".replit", "replit.nix"]`            | Lists the files that must be present when importing the project to ensure it functions correctly.                                                                                            |
| <a name="deployment" />`[deployment]`           |                                        | Contains settings for deploying the application from the Replit App to a live environment.                                                                                                   |
| <a name="run" />`run`                           | `["python3", "main.py"]`               | Command executed to start the application during deployment.                                                                                                                                 |
| <a name="deploymentTarget" />`deploymentTarget` | `cloudrun`                             | Specifies the deployment target platform for hosting the application.                                                                                                                        |

Now that you have an idea of the default configurations of the `.replit` file use the next sections to understand how to configure basic and advanced settings for your Replit App.

## Configuring basic settings

### Entrypoint

This is the main file of your project. If you do not define a `run` property, `entrypoint` is the file that gets executed by the runtime.

```toml
entrypoint = "<file-name>.py"
```

### `Run` command

The `run` property in the `.replit` file is a key feature that determines the initial command or series of commands executed when the `Run` button is selected in a Replit environment. The `Run` command can be specified either as a string representing the command to execute, or an array of strings representing the command and individual arguments to that command.

Some common ways to configure the `Run` command:

* **Single command:**
  This example shows how to pass single command to execute directly in the Replit App. With this in your `.replit` file, pressing the `Run` button will display a greeting in the `Console` pane:
  **Example:** `run = "echo 'Hello, Replit!'"`

* **Explicit arguments:**
  In some situations it may be beneficial to be more explicit, avoiding the need for parsing quotes or shell interpolation rules. We can rewrite the above example to separate the arguments.
  Note, we no longer need both `'` and `"`, since we are explicitly passing the greeting as the first and only argument to `echo`:
  **Example:** `run = ["echo", "Hello, Replit!"]`

* **Multiple commands:**
  This example shows how to run multiple processes, such as a frontend and a backend, simultaneously. This could be useful if developing a python backend and a typescript frontend, where each server binds to a different port:
  **Example:** `run = "python -m app & npm run start & wait"`

#### Process management

While multiple commands can be simultaneously run with `&`, you may want a better experience distinguishing logs between services. You can [add system dependencies](/replit-workspace/dependency-management#system-dependencies) like [`process-compose`](https://github.com/F1bonacc1/process-compose) to better orchestrate multiple processes.

#### `Build` phase

For some languages or runtimes, there is a separate compilation phase before code can be `run`. This covers both compiled languages like TypeScript, Golang, or Java, or offering a parameter you can use to reset your environment, data, or configuration before the next `run` is invoked.

* **Compiling:**
  In a TypeScript repository, you may find yourself needing to run `tsc` prior to executing your code.
  **Example:**

```toml
build = "tsc app.ts"
run = "node app.js"
```

#### Including environment variables

To supply environment variables to your service before execution, you can expand the `run` property into a [table](https://toml.io/en/v1.0.0#table).

This is a more involved change, and likely requires moving where your `run = "..."` property is located inside your `.replit` file.

The following diff shows supplying the command by way of `[run]`'s `args`, as well as the variable `NAME` supplied in `[run.env]`:

```diff
-run = ["bash", "-c", "echo \"Hello, $NAME!\""]

 modules = ["nodejs-20"]

 hidden = [".pythonlibs"]

+# We need to move our new [run] down past all the
+# top-level properties that do not start with a `[`!
+[run]
+args = ["bash", "-c", "echo \"Hello, $NAME!\""]
+
+[run.env]
+NAME="Replit"

 [nix]
 channel = "stable-23_11"
```

#### Interactivity

Interactive programs can also be launched by way of the `Run` button, offering a way to distinguish your development environment from the terminal where your program is running.
Consider the following tally script:

**Example**

```toml
[run]
args = ["bash", "-c", """
count=0
while read -p "$PROMPT" -r next && [ -n "$next" ]; do
    count=$((count+next))
done
echo "The numbers you entered sum to $count!"
"""]

[run.env]
PROMPT = "Next number ([Enter] to end): "
```

## Advanced configuration options

Explore the detailed configuration options available for your Replit App. You can customize your development environment, manage run commands, integrate language services, and handle dependencies.

| **Configuration** | **Key**                             | **Value/Example**                           | **Description**                                                                  |
| ----------------- | ----------------------------------- | ------------------------------------------- | -------------------------------------------------------------------------------- |
| onBoot            | <a name="onBoot" />`onBoot`         | `onBoot = "npm install"`                    | Command that executes when the Replit App boots up.                              |
| compile           | <a name="compile" />`compile`       | (No default example)                        | Command that runs before the `run` command, used in compiled languages like C++. |
| language          | <a name="language" />`language`     | `language = "javascript"`                   | Specifies the language during a GitHub import or when creating a Replit App.     |
| entrypoint        | <a name="entrypoint" />`entrypoint` | `entrypoint = "index.js"`                   | Main file to run and display when opening the editor.                            |
| hidden            | <a name="hidden" />`hidden`         | `hidden = [".config", "package-lock.json"]` | Files or folders to hide by default in the side file tree.                       |
| audio             | <a name="audio" />`audio`           | `audio = true`                              | Enables System-Wide Audio when set to `true`.                                    |

### Notes about System-Wide Audio

When setting `audio = true` in your `.replit` file, you may need to run `kill 1` in a shell to force the new setting to take effect.

When running a graphical application, you will see a pair of headphones with a checkbox in the lower right of the `Output` pane.
Due to browser restrictions, this will need to be enabled every time you refresh.

```toml
# Ensure this is at the top of your `.replit` file, outside of any `[`-bracketed section
audio = true
```

## Packager configuration

| **Configuration** | **Key**                                           | **Value/Example**                             | **Description**                                                              |
| ----------------- | ------------------------------------------------- | --------------------------------------------- | ---------------------------------------------------------------------------- |
| packager          | <a name="language" />`language`                   | `packager.language = "python3"`               | Language used for package operations.                                        |
| packager features | <a name="guessImports" />`guessImports`           | `packager.features.guessImports = true`       | Automatically guess packages to install prior to running the Replit App.     |
| packager features | <a name="packageSearch" />`packageSearch`         | `packager.features.packageSearch = true`      | Enables support for the packager when set to `true`.                         |
| packager features | <a name="enabledForHosting" />`enabledForHosting` | `packager.features.enabledForHosting = false` | Sets whether hosting the Replit App requires running a package installation. |
| packager          | <a name="afterInstall" />`afterInstall`           | `afterInstall = "echo 'package installed'"`   | Command executed after a new package is installed via the packager.          |
| packager          | <a name="ignoredPaths" />`ignoredPaths`           | `ignoredPaths = [".git"]`                     | Paths to ignore while attempting to guess packages.                          |
| packager          | <a name="ignoredPackages" />`ignoredPackages`     | `ignoredPackages = ["twitter", "discord"]`    | Modules should never attempt to guess a package during installation.         |

### Example `.replit` configuration for packager configuration

```toml
# Define the language for the Replit App
packager.language = "python3"

# Enable features for automatic package management
[packager.features]
guessImports = true
packageSearch = true
enabledForHosting = false

# Command to run after each package installation
packager.afterInstall = "echo 'Package installed successfully'"

# Define paths and packages that should be ignored by the package manager
packager.ignoredPaths = [".git", "node_modules"]
packager.ignoredPackages = ["twitter", "discord"]

# Additional deployment settings
[deployment]
run = ["python3", "app.py"]
```

## Deployment configuration

| **Configuration** | **Key**                               | **Value/Example**                    | **Description**                                                   |
| ----------------- | ------------------------------------- | ------------------------------------ | ----------------------------------------------------------------- |
| deployment        | <a name="run" />`run`                 | `deployment.run = "npm start"`       | Command that executes when a Deployment container starts.         |
| deployment        | <a name="build" />`build`             | `deployment.build = "npm run build"` | Command that executes before running a Deployment.                |
| deployment        | <a name="ignorePorts" />`ignorePorts` | `deployment.ignorePorts = true`      | If `true`, deployment success doesn't require an open port check. |

### Example `.replit` configuration for deployment configuration

```toml

# Specifies the main entry point for the project
entrypoint = "app.js"

# Configuration settings for deploying the application
[deployment]
run = "npm start"
build = "npm run build"
ignorePorts = true
```

<Note>
  **Interpreter configuration** has been deprecated and is no longer available in Replit. Instead, you are encouraged to use the `Run` commands to configure how scripts and applications are executed within your Replit App environment.
</Note>

## Networking and extensions

| **Configuration** | **Key**                                       | **Value/Example**                                      | **Description**                                                                                                       |
| ----------------- | --------------------------------------------- | ------------------------------------------------------ | --------------------------------------------------------------------------------------------------------------------- |
| ports             | <a name="localPort" />`localPort`             | `localPort = 3000`                                     | Port that Replit binds to an external port.                                                                           |
| ports             | <a name="externalPort" />`externalPort`       | `externalPort = 80`                                    | Publicly accessible port linked to the `localPort`.                                                                   |
| extension         | <a name="isExtension" />`isExtension`         | `isExtension = true`                                   | Specifies whether a Replit App is a workspace extension.                                                              |
| extension         | <a name="extensionID" />`extensionID`         | `extensionID = "492a5fcd-f090-4356-ace8-50755e8deb2b"` | Determines if a Replit App is attached to a specific extension. Automatically filled when publishing a new extension. |
| extension         | <a name="buildCommand" />`buildCommand`       | `buildCommand = "npm run build"`                       | Command to bundle the extension into a static directory for uploading.                                                |
| extension         | <a name="outputDirectory" />`outputDirectory` | `outputDirectory = "./dist"`                           | Path to the static directory used to render the Extension relative to the Replit App's root directory.                |

### Example `.replit` configuration file for managing networking and extensions

```toml
# Networking configuration to expose your application on specific ports
[[ports]]
localPort = 3000
externalPort = 80

# Extension settings to define and manage a workspace extension
[extension]
isExtension = true
extensionID = "492a5fcd-f090-4356-ace8-50755e8deb2b"
buildCommand = "npm run build"
outputDirectory = "./dist"
```

## Accessing Replit App environment metadata

### Node.js

To access all environment variables:

`console.log(process.env);`

To access a single variable (REPL\_SLUG):

`console.log(process.env.REPL_SLUG);`

### Python

To access all environment variables:

```python
import os
print(os.environ)
```

To access a single variable (REPL\_SLUG):

```python
import os
variable = os.environ.get('REPL_SLUG')
print(variable)
```

### Rust

To access all environment variables:

```rust
use std::env;
fn main() {
    for (key, value) in env::vars() {
        println!("{}: {}", key, value);
    }
}
```

To access a single variable (REPL\_SLUG):

```rust
use std::env;
fn main() {
    let variable = env::var("REPL_SLUG").unwrap();
    println!("{}", variable);
}
```

## Environment variables

Following are the environment variables accessible from within your Replit App:

| key                                               | description                                                                                                                                                                          |
| ------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| <a name="REPL_OWNER" />`REPL_OWNER`               | The username of the owner of the Replit App. If your Replit App is text-based and has no webserver, `REPL_OWNER` will reflect the value of the current user accessing the Replit App |
| <a name="REPLIT_DB_URL" />`REPLIT_DB_URL`         | The URL of your key-value Replit database                                                                                                                                            |
| <a name="REPL_ID" />`REPL_ID`                     | The unique UUID string of your Replit App                                                                                                                                            |
| <a name="HOME" />`HOME`                           | The home path of your Replit App                                                                                                                                                     |
| <a name="system" />`system`                       | The operating system running on your Replit App                                                                                                                                      |
| <a name="LANG" />`LANG`                           | Sets the language and character encoding for your Replit App, affecting how text is processed and displayed                                                                          |
| <a name="REPL_IMAGE" />`REPL_IMAGE`               | The docker image that corresponds to your Replit App                                                                                                                                 |
| <a name="REPL_LANGUAGE" />`REPL_LANGUAGE`         | The programming language configured for your Replit App, used to determine the runtime environment and tooling                                                                       |
| <a name="REPL_PUBKEYS" />`REPL_PUBKEYS`           | A stringified JSON object containing different public API keys                                                                                                                       |
| <a name="REPL_SLUG" />`REPL_SLUG`                 | A simplified, machine-readable version of the name of the Replit App, suitable for use in URLs and file names                                                                        |
| <a name="PRYBAR_FILE" />`PRYBAR_FILE`             | The main/entrypoint file of your Replit App                                                                                                                                          |
| <a name="REPLIT_DEV_DOMAIN" />`REPLIT_DEV_DOMAIN` | Provides the `replit.dev` URL for your Replit App in the Workspace. Note that this environment variable is not available in Deployments                                              |


# Replit App Visibility
Source: https://docs.replit.com/replit-app/visibility

Learn how to create and manage private Replit Apps with a Core membership or Teams Pro account. Control access to your projects with privacy settings.

With a free Replit account, personal Replit App are public by default.

As an individual, you can make your Replit App private by subscribing to our [Replit Core membership](https://replit.com/pricing) (previously Hacker or Pro) that comes with unlimited private Replit App.

Teams Pro accounts come with the ability to make any Team Replit App private.

Private Replit App can only be accessed by directly invited guests or by team members.

## Creating a private Replit App

You can make a Replit App private by toggling the Replit App to Private when you're making a new Replit App from a Template or forking an existing Replit App.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/power-ups/private-create-repl.png" alt="Creating a Private Replit App" />
</Frame>

## Making an existing Replit App private

### From the Workspace

You can make any public Replit App private by toggling it on from the Workspace.

1. Navigate to your Replit App
2. Open the info panel by clicking on your Replit App's name in the navbar
3. Make your Replit App private by pressing the Private toggle

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/power-ups/private-workspace.png" alt="Making a Replit App private from the Workspace" />
</Frame>

### From the My Replit App page

You can also make any of your public Replit App private from the My Replit App page.

1. Navigate to the My Replit App page from the left sidebar
2. Hover over the "Public" copy on the card of the Replit App you want to make private
3. Press the "Make private" button

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/power-ups/private-my-repls.png" alt="Making a Replit App private from the My Replit App page" />
</Frame>


# Overview
Source: https://docs.replit.com/replit-core/replit-core

Learn about Replit Core membership features including AI coding assistance, powerful workspaces, monthly credits, deployments, and exclusive perks.

export const TeamsCredits = '$40';

export const CoreCredits = '$25';

[Replit Core](https://replit.com/replit-core) is the membership to unlock the full Replit experience.

#### AI-powered tools

Debug code, get intelligent autocomplete suggestions, and convert natural language to code with one click.

#### Lightning-fast and secure workspace

* A high-powered 8 GiB RAM and 4 vCPU cloud development environment with the option to upgrade.
* Generous network bandwidth (100 GiB) and storage (50 GiB), so you'll never run out of resources.
* Additional security capabilities like SSH access and private Replit Apps to control sharing.

#### Monthly credits

* Core / Teams Members have access to {CoreCredits} / {TeamsCredits} in monthly credits per month that they can use on any of our paid services, such as AI, Autoscale Deployments, Reserved VM Deployments, Outbound Data Transfer, and Postgres.

#### One-click Deployments

* Use the included monthly credits to deploy your applications.
* Built-in logging & analytics.

#### Priority support and community events

* Help when you need it with dedicated 1:1 support
* Access to members-only events
* Early access to new features


# Dependency Management
Source: https://docs.replit.com/replit-workspace/dependency-management

Replit supports a variety of languages and dependency management systems through the Dependencies tool. This section will cover the different types of dependencies and how to manage them in your Replit App.

## Imported Packages

Packages imported directly from your code are managed in the `Imports` tab. This tab allows you to view and manage the packages grouped by language. Links are also provided to the appropriate packager file, such as `package.json` for Node.js.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/programming-ide/dependencies/import-tab.png" alt="Imports tab for a project using Node.js and Python" />
</Frame>

### Search and add packages

Clicking on `Add new package` will allow you to search for and install new packages. The language dropdown provides quick access between packagers.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/programming-ide/dependencies/import-tab-search.png" alt="Node.js package search for 'React'" />
</Frame>

You can view installation progress and relevant errors in the `Console` tab.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/programming-ide/dependencies/console-output.png" alt="Example console output for an uninstalled package" />
</Frame>

### The Universal Package Manager

Replit will install most packages using [the universal package manager](https://blog.replit.com/packager). To see which languages and package managers are supported, please check out [UPM: Supported Languages](https://github.com/replit/upm/#supported-languages).

If you prefer using the CLI, you can still use language-specific package managers such as `poetry` or `npm`. Any changes to the packager files will be reflected in the `Dependencies` tool, but require the respective CLI command or using the **Run** button to properly update.

### Import guessing

As your code evolves, we analyze your project for missing dependencies and automatically guess what needs to be installed to get your code to run. For example, if you add `import flask` to `main.py`, the next time you select **Run**, you'll see a section in the **Console** indicating that the latest version of **Flask** is being installed:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/programming-ide/pip-install.png" alt="upm output showing packages being installed" />
</Frame>

### Guessing failures

This section helps you with the command to run a particular version of your package. If there's a particular version that you need, or we guessed the wrong package entirely, you can run `upm` in the shell to resolve the conflict:

```bash
upm add 'flask==2.3.3'
```

To install additional packages in your Workspace, open a new tab by selecting the **+** sign and searching for **Packages**. Select the packages of your choice and select **Install**. Additional options for package guessing can be configured in the [.replit](/replit-app/configuration#replit-file) file.

### Python package managers

When you create a Python Replit App, your package manager will be **poetry** by default. This means that you will not be able to use `pip install` to manage dependencies manually. Instead of running `pip install <package>`, you can instead run `poetry add <package>` or `upm add <package>`, which will do the same thing.

`pip` is one of the earliest, and consequently most popular, package managers for Python. You can use `pip` as your Replit App's package manager instead of `poetry`.
Follow the steps below:

1. In the Tools pane, select the **Shell** tab to add the common `requirements.txt` file using the following command:

```bash
touch requirements.txt
```

2. Delete the `poetry.lock` file.

3. Move your dependencies from `[tool.poetry.dependencies]` to `requirements.txt`. Note that the `flask = "^3.0.2"` in `pyproject.toml`'s `[tool.poetry.dependencies]` section would become `flask>=3.0.2,<4` in `requirements.txt`.

4. Finally, delete the other `[tool.poetry...]` sections from `pyproject.toml`.

After the above changes, the packaging infrastructure will use `pip` for all future operations.

Now, as you add code to your `main.py` file, any time you select **Run**, [upm](https://github.com/replit/upm/) will determine whether there are any missing packages for your imports, find the latest versions of packages that provide those imports, and install them automatically.

## Advanced Configuration

Replit supports all programming languages through integration with [Nix](https://nixos.org/). Nix is a tool for managing software packages and system configurations. The **System (Advanced)** tab provides quick access to Nix support for your Replit App.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/programming-ide/dependencies/system-tab.png" alt="System (Advanced) tab for a project using Node.js and Python" />
</Frame>

### System Modules

Modules combine support for programming languages, formatters, and packagers. These provide the foundation for your Replit App. If you create a Replit App from a template or GitHub repository, we will automatically install the modules that are required for the languages used.

If you want to start with a blank Replit App, you will need to install a module under **System Modules** before you can use the **Imports** tab. You can also add more modules to support additional languages.

You can further customize modules and other Nix settings using the [.replit](replit-app/configuration#replit-file) file.

### System Dependencies

If you need more specific support for a language or other system-level dependencies, you can add [Nix packages](https://search.nixos.org/packages) under **System Dependencies**. These can also be managed in your [replit.nix](/replit-app/configuration#replit-nix-file) file.


# Extensions
Source: https://docs.replit.com/replit-workspace/extensions

Extensions are applications you can develop to enhance the functionality and tools available within the Replit Workspace.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/extensions/extensions.png" alt="Extensions" />
</Frame>

## What can Extensions do?

### Streamline workflows

Extensions are deeply integrated with Replit, so users can automate actions like reading and editing files, formatting or linting code, and more.

### Add custom apps with tools

Tool Extensions lets you interact with custom experiences and products in the Replit Workspace, similar to the apps you install on your phone or computer.

### Extend native functionality

Extensions can extend and improve the existing functionalities within Replit, like formatting code and editor capabilities.

## Reasons to build an Extension

### Consolidate your tools

Developing an Extension allows you to integrate your preferred tools into the Replit environment, serving your specific workflow preferences.

### Personalize your Workspace

Extensions empower you to customize Replit to suit your needs, creating a sense of empowerment and productivity.

### Expand your software reach

Companies can use Extensions to distribute their products directly to Replit's active Community, accessing a targeted audience within a relevant context.

## Extensions store

The Extensions store allows you to view and install from various Workspace Extensions.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/extensions/extensions-store.png" alt="Extensions store" />
</Frame>

## Access the store

In your Replit App, you can access the Extensions store by navigating to the **Tools** section on the sidebar and selecting **Extensions**.

## Install an Extension

In the Extensions store, choose an Extension and select **Activate Extension for your account**.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/extensions/install-extension.png" alt="Install Extensions" />
</Frame>

Select **Accept and Activate** to start using the Extension.

You'll find installed Extensions in the **Installed** tab alongside the **Store**.

You can use the ellipses next to each Extension to manage them, allowing you to uninstall, unlist, un-bless, feature, or delete them from the store.


# Introduction to the Workspace
Source: https://docs.replit.com/replit-workspace/introduction-to-workspace

The Workspace is like an IDE (Integrated Development Environment), providing a comprehensive set of development tools and features for creating, debugging, and managing your software. It helps you quickly and easily create, modify, and collaborate on your code.

<Frame>
  <iframe src="https://www.loom.com/embed/45e8cbc1586f49b5a9ef4a9416ef2a4b?sid=b2e37b91-f66e-40a9-aa5f-221d64abeb46" style={{border: "none", borderRadius: "8px"}} width="100%" height="420px" />
</Frame>

## How to create a Replit App

A Replit App (derived from REPL—"read-eval-print loop") is an interactive programming environment where you can write and execute code in real-time. To create one, navigate to [Replit](https://replit.com) and click the **create** button in the sidebar.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/create-repl.webp" />
</Frame>

Next, give your app a name and choose the Template you want to use. You can also directly [import a GitHub repository](/replit-workspace/using-git-on-replit/import-repository).

To import a GitHub repository, read our docs [here](/replit-workspace/using-git-on-replit/import-repository).

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/choose-lang.webp" />
</Frame>

Congratulations! You've just created a Replit App!

## Workspace dock

The left side of the workspace contains a dock which provides access to your App's files and workspace tools.

### File tree

Quickly locate and access files in your project using the file tree, an organized navigation system that displays the hierarchical structure of your project with each file and folder clearly labeled. The file tree offers a comprehensive view of the structure of your project and lets you modify any file immediately.

<Frame>
  <iframe src="https://www.loom.com/embed/84129671e4fd4346b426b726609a7cae?sid=ea104265-b5ac-4f93-bf50-6136258de174" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen width="100%" height="420px" />
</Frame>

### Tools

You can find Tools in the sidebar, like the Shell, Console, Secrets, and other helpful utilities for your Replit App.

<Frame>
  <iframe src="https://www.loom.com/embed/2fe5ad5b4f644496be84986c088a566e?sid=defcea9c-dd79-453a-a766-4ed06721a694" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen width="100%" height="420px" />
</Frame>

## Tabs and panes

Files and Tools are displayed in the workspace using tabs and panes. A tab is a single file or tool, while a pane can contain multiple files and tools.

<Frame>
  <iframe src="https://www.loom.com/embed/495838f6de3a42a890461572615ad48e?sid=df5d78b9-6d2e-4396-8853-4e3fa2b81db4" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen width="100%" height="420px" />
</Frame>

## Run your code

To execute your code, select the **Run** button. You can also use the Shell to run a custom command or modify the `.replit` file to alter the initial run command. Check out the [Configuring a Replit App](/replit-app/configuration) doc to learn how to customize the way your Replit App runs even further.

<Frame>
  <iframe src="https://www.loom.com/embed/086c8447bf234ca290ad11f0bbb2e13e?sid=1e8597e5-a3c4-4b36-b42e-f3ad97533334" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen width="100%" height="420px" />
</Frame>

## The spotlight page

The spotlight page is how others can view and interact with your Replit App.

<Frame>
  <iframe src="https://www.loom.com/embed/568fa9603a5546919e97b06695ea1da5?sid=cbc2a2f4-ae3f-4a96-85ef-45941f587d35" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen width="100%" height="420px" />
</Frame>

## Multiplayer

Replit's multiplayer feature allows users to collaborate on code simultaneously in real-time.

<Frame>
  <iframe src="https://www.loom.com/embed/9addef3f98584fefa07ef7a875e37440?sid=eccfa666-399f-4272-8f8a-2cdfdb90e3be" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen width="100%" height="420px" />
</Frame>

***

Now you are ready to build. Get started with one of our [templates](https://replit.com/templates). If you need more help, check our [Community Hub](https://replit.com/community) for additional resources.


# Keyboard Shortcuts
Source: https://docs.replit.com/replit-workspace/keyboard-shortcuts

Learn how to view, add, and modify keyboard shortcuts that can boost your productivity in Replit.

Keyboard shortcuts let you run commands, modify text, and navigate the workspace
using configurable key combinations. You can set and use keyboard shortcuts in
the Replit.com web app and desktop app.

## Viewing keyboard shortcuts

<Info>
  The Replit.com web app and desktop apps keep separate shortcut preferences. Changes in one environment don't affect the other.
</Info>

To view your keyboard shortcut settings, follow these steps:

1. Open a Replit App to navigate to the workspace.
2. Open the <img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/shared/settings-icon.svg" alt="gear icon" /> **User Settings** tab from
   <img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/shared/workspace-all-tools-button.svg" alt="all tools icon" /> **All tools** in the dock.
   Alternatively, search for "User Settings" using the
   <img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/shared/workspace-search-icon.svg" alt="magnifying glass icon" /> magnifying glass.
3. Select the **Keyboard shortcuts** tab to view the list of commands and their assigned shortcuts.

## Customizing keyboard shortcuts

To add or modify a keyboard shortcut, follow these steps:

1. Select <img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/shared/buttons/create-app-icon.svg" alt="plus icon" />**Add shortcut**, located next
   to the unassigned command, or the <img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/shared/pencil-icon.svg" alt="pencil icon" /> pencil icon for assigned commands.
2. When "Recording..." appears next to the command, press the key combination you want to assign.
   To cancel recording, click an empty area inside the tab.
3. To revert the shortcut, select the <img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/shared/rollback-icon.svg" alt="rollback icon" /> rollback icon.

## Removing keyboard shortcuts

To remove a keyboard shortcut, select the <img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/shared/trash-icon.svg" alt="trash icon" /> trash icon next to the command.

## Tab navigation

You can use the browser **Tab** key navigation to navigate between the interactive elements
on a page. However, the File Editor, Console, and Shell tools capture the **Tab** key as
input for purposes including indentation.

To continue  cycling through page elements while in these tools, follow these steps:

1. Press **Esc** to release focus from the tools
2. Press **Tab** to move to the next element


# Ports
Source: https://docs.replit.com/replit-workspace/ports

Learn how ports work in Replit's cloud environment, including port forwarding, configuration, and troubleshooting for your web applications.

Because Replit runs your projects on a cloud environment, ports work differently on Replit than on your local computer. (If you need a more basic explanation of what TCP ports are, [start here](https://www.reddit.com/r/explainlikeimfive/comments/1t9s5a/eli5_what_are_ports_ex_tcp_port/).)

On a computer, you only have one layer of port management: your programs define a port that they listen to, and when traffic hits that port on your computer from the internet, they get routed to the appropriate process.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/ports/computer.png" alt="computer" />
</Frame>

The `0.0.0.0` part is the address, or host. If a process is listening on `0.0.0.0`, that means it should listen on every network interface — which means that if another computer (on the internet) sends a request to your computer’s IP address, it will see it. So, listening on 0.0.0.0 means those processes are accessible to the public internet (if your computer is connected.)

Most programming frameworks will *not* listen on `0.0.0.0` when you’re developing, because you don’t necessarily want your work exposed to the public while you’re working on it, for privacy & security. Instead, they’ll listen on a different address — `127.0.0.1`, otherwise known as `localhost`. This means only that computer can make requests to that port.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/ports/computer-localhost.png" alt="Localhost ports are only visible on the computer that is hosting them." />
</Frame>

On Replit, for a process you’re running to be accessible in the webview or via an external request, it has to have an \*\*external port \*\*defined. This is because the “internal port” that processes typically use is only visible from inside the sandboxed cloud environment that Replit provides. We have to connect that internal port to an externally accessible port to send the right traffic to your programs. Even if your process listens on a port typically available to the public like 0.0.0.0, we still need to bind that port to an external port.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/ports/replit.png" alt="External ports forward traffic to internal ports, which programs listen to." />
</Frame>

We do this by binding external ports to specific internal ports — for example, in the diagram above, the external port `:80` is bound to the internal port `:3000`. That means any traffic that Replit App gets on port 80 will go to the internal port 3000.

This configuration is captured in the \[\[ports]] section of the .replit config file.

By default, we will bind the first port you open to the default external port 80, which will allow that process to be available at the domain without a port address (e.g. customdomain.com/ instead of customdomain.com:3000/). Additional internal ports that are opened will be bound to other available external ports (see a full list below.)

## Webview

In the webview, you can change which external port the webview is rendering by clicking the domain and selecting a different port. You can also open the networking tool from the “gear” icon for more details.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/ports/webview_dropdown.png" alt="Clicking the domain in the webview will let you choose what port to view." />
</Frame>

## Default port

Port :80 is the “default port” for http traffic, so http traffic sent to the root domain will automatically be routed to port 80. We don’t show the port path in the url for port 80 for that reason. Ports other than :`80` will show up in the domain path (e.g. customdomain.com:4200/). (We provide TLS by default, so it will technically be over port 443, which is the default port for https. For all intents and purposes, you can treat them as interchangeable.)

## Networking tool

For more details about port config and networking, you can open the networking tool. It shows the status of ports open in your Replit App, what external port they’re bound to, and lets you add or remove configuration.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/ports/networking_tool.png" alt="The networking tool shows your port configuration." />
</Frame>

## Deployments

Autoscale and Reserved DM deployments only support a single external port being exposed, and for the corresponding internal port not to be using `localhost`. If you expose more ports, or expose a single port on localhost, your deployment will fail. An easy way to make sure your Autoscale deployments work as expected is to remove all the `externalPort` entries for the ports in your config *except* the port for the service you want to interact with from the internet.

## Debugging

A common reason something might not be working as you’d expect is that while your port config looks right, your program is actually looking at a different port. For example, if your config is:

```
[[ports]]
internalPort = 3000
externalPort = 80
```

Then internet traffic to port 80 will go to internal port 3000. However, if your program is actually not listening on port 3000, but rather something else (like 8080), it will appear as if no traffic is getting through. This can happen if you switch the port in your code without switching the corresponding port in your config, or copy-paste config from one project to another.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/ports/replit-wrong_port.png" alt="Programs can change the ports they listen to." />
</Frame>

Each framework has different default ports it listens to — for example, Flask is 5000, react is 3000, and laravel is 8000. Make sure the right port is configured!

## Preferences

We will automatically bind ports that are opened in your Replit App to available external ports when they are opened, and record that binding in the .replit config file.

However, we don’t do this by default for internal ports that open on localhost, because services that usually run on localhost typically assume that they will only be accessible on the same computer as the process that’s running (localhost ports are only visible to the same computer running the process.) This means those services are often not as secure as services built under the assumption that they’ll be available to the public internet.

You can always override this by setting the `exposeLocalhost` config option to `true` for the port you want to expose.

If you want to *always* expose localhost ports by default, you can set your “automatic port forwarding” setting in the User Settings tool to “All ports”.

If you want to *never* create config for ports that are opened, and manually control the port config for all your Replit App, you can set that to “never”.

## Supported ports

Replit App will define port 80 as the external port by default when the first port opens. A Replit App can expose 3000, 3001, 3002, 3003, 4200, 5000, 5173, 6000, 6800, 8000, 8008, 8080, 8081, as extra external ports.

Ports 22 and 8283 are not forwardable, as they are used internally.

## `[[ports]]` .replit config

Type: `{localPort, externalPort, exposeLocalhost}`

The `[[ports]]` config Allows you to configure which HTTP port to expose for your web output. By default, any exposed HTTP port with host 0.0.0.0 will be exposed as your Replit App's web output.

Extra ports can be served without overriding the default port by adding a new \[\[ports]] entry to your .replit file. You are required to specify both a localPort and externalPort entry. You can add multiple extra ports by adding multiple \[\[ports]] entries to your .replit file as defined below.

### localPort

Determines which port Replit will bind to an external port.

### externalPort

Determines which port should be exposed for that local port’s publicly accessible port.

```toml
[[ports]]
localPort = 3000
externalPort = 80
```

If you want to *never* expose a particular port, you can leave the `localPort` config but just not add an `externalPort`:

```toml
[[ports]]
localPort = 3000
```

### exposeLocalhost

Determines whether an internal port using `localhost` can be bound to an external port. Can be `true`, `false`, or null.

```toml
[[ports]]
localPort = 3000
externalPort = 80
exposeLocalhost = true
```


# SSH
Source: https://docs.replit.com/replit-workspace/ssh

Learn how to set up and use SSH to connect your local development environment to Replit Apps for secure remote access and file synchronization.

## What is SSH?

SSH, which stands for Secure Shell, is a secure protocol that facilitates remote access to your Replit App's command line interface. With SSH, you can seamlessly transfer files and leverage your preferred local Integrated Development Environment (IDE) for editing code on Replit, enhancing collaboration and productivity in your development workflow.

SSH functionality is available for Core, Teams, and all other paid plans.

Here's an overview of the process:

* Generate a SSH keypair on your local machine
* Add that SSH key to the "SSH" Pane inside any Replit App
* Connect using an SSH client or an editor which can work over SSH (like [VSCode](https://code.visualstudio.com/) or [Cursor](https://www.cursor.com/))

<Note>
  SSH Keys are associated with your your account, not a particular Replit App. This means that you only need to add a public key once, after which you can connect to any Replit App you have access to.
</Note>

## Why use SSH?

* **Automatic updates between Replit App and editor**: Any changes made in the Replit App are reflected in your editor instantly, and any modifications in the editor are updated in the Replit App. This seamless synchronization ensures that your codebase is always up-to-date across platforms.

* **File management synchronization**: Whether you add, delete, or update files, these changes are synchronized in real time between your editor and the Replit App. This feature ensures that your project structure remains consistent, regardless of where the changes are initiated.

* **Folder management and file moving**: Moving files across folders is also synchronized between your editors and the Replit App. This ensures that organizational changes made in one environment are accurately reflected in the other, maintaining the integrity and structure of your project.

## Find or Create a keypair

To configure SSH for your account, you'll need your SSH public key.

### Figuring out if you already have a keypair

You can check if you already have a public key by running the following command in a Terminal on your local computer:

<Tabs>
  <Tab title="Mac/Linux">
    ```sh
    ls -l ~/.ssh
    ```
  </Tab>

  <Tab title="Windows">
    ```sh
    dir %HOMEPATH%\.ssh
    ```
  </Tab>
</Tabs>

If you get an error, that's OK, proceed to [Generating a new keypair](#generating-a-new-keypair).
If you see a file called `replit.pub`, please proceed to [Get the contents of your public key](#get-the-contents-of-your-public-key).

### Generating a new keypair

On your machine, open a Terminal (or Command Prompt) window and paste the following command:

<Tabs>
  <Tab title="Mac/Linux">
    ```bash
    ssh-keygen -t ed25519 -f ~/.ssh/replit -q -N ""
    ```
  </Tab>

  <Tab title="Windows">
    ```sh
    ssh-keygen -t ed25519 -f %HOMEPATH%\.ssh\replit -q -N ""
    ```
  </Tab>
</Tabs>

This command checks if a specific SSH public key file already exists. If not, it creates a new SSH key with some sensible parameters.

### Get the contents of your Public Key

Once you have either confirmed you have a keypair or created one, display the contents of the public key (one of the two similarly named files, suffixed with `.pub`), as we'll need that for later.

<Tabs>
  <Tab title="Mac/Linux">
    ```sh
    cat ~/.ssh/replit.pub
    ```
  </Tab>

  <Tab title="Windows">
    ```sh
    notepad %HOMEPATH%\.ssh\replit.pub
    ```
  </Tab>
</Tabs>

Save the contents of `replit.pub` to use later in this article and proceed to [add the SSH key to your account](#add-the-ssh-key-to-your-account).

## Add the SSH key to your account

<details>
  <summary>Add the public key directly in a Replit App, using the **SSH** Pane</summary>

  1. In your Replit App on any window, select the **+** button, then search for **SSH**.

  <Frame>
    <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/ssh-vscode/ssh-tool.png" alt="ssh-tool" />
  </Frame>

  2. Navigate to the **Keys** tab and select **New SSH key**.
  3. In the popup window, enter a **Label** for your key (e.g., my-ssh-key) and paste the public key you copied into the **Key** section.
     Select the **Add SSH Key** button. Your key has been added and authorized for use.

  <Frame>
    <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/ssh-vscode/add-ssh-key-with-values.png" alt="SSH key with values" />
  </Frame>
</details>

<details>
  <summary>Add the public key directly in your **Account**</summary>

  You can also add an SSH key by navigating to your [**Account**](https://replit.com/account#ssh-keys) and selecting **SSH keys**.

  <Frame>
    <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/ssh-vscode/repl-account.png" alt="Add SSH key from your Replit App account" />
  </Frame>

  Click the **Add SSH key** button and paste in the contents of `replit.pub` that we obtained from the previous section, [Find or Create a keypair](#find-or-create-a-keypair).

  <Frame>
    <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/ssh-vscode/account-ssh-keys.png" alt="Add SSH key to your account" />
  </Frame>
</details>

<Note>
  When you have multiple public keys on your machine, it's important to ensure that you use the correct combination of private and public keys for your SSH configuration.
</Note>

## Connecting to your Replit App

<details>
  <summary>Configure your ssh config</summary>

  1. In a terminal, ensure the `~/.ssh` directory and `~/.ssh/config` file exist:

  <Tabs>
    <Tab title="Mac/Linux">
      ```sh
      mkdir -p ~/.ssh && chmod 700 ~/.ssh && touch ~/.ssh/config && chmod 600 ~/.ssh/config
      open -a 'TextEdit' ~/.ssh/config || nano ~/.ssh/config
      ```
    </Tab>

    <Tab title="Windows">
      ```sh
      if not exist %HOMEPATH%\.ssh mkdir %HOMEPATH%\.ssh && type \NUL > %HOMEPATH%\.ssh\config
      notepad %HOMEPATH%\.ssh\config
      ```
    </Tab>
  </Tabs>

  2. Add a configuration block to use the `replit` keypair for all \*.replit.dev domains:

  <Tabs>
    <Tab title="Mac/Linux/Windows">
      ```
      Host *.replit.dev
          Port 22
          IdentityFile ~/.ssh/replit
          StrictHostKeyChecking accept-new
      ```
    </Tab>
  </Tabs>
</details>

<details>
  <summary>Connect from VSCode or Cursor</summary>

  1. From a Replit App, open the **SSH** pane

  2. In the SSH pane, navigate to the **Connect** tab and select **Launch VS Code**.

  <Tabs>
    <Tab title="Connect with VSCode">
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/ssh-vscode/ssh-connect.png" alt_text="Connect with VSCode" />
    </Tab>
  </Tabs>

  3. If you are prompted to fill out `~/.ssh/config`, enter the following:

     ```
     Host *.replit.dev
         Port 22
         IdentityFile ~/.ssh/replit
         StrictHostKeyChecking accept-new
     ```

     <Note>
       Adding SSH configuration is only prompted the first time you are trying to connect to VS Code or another editor. To return to the configuration file, you will need to click `Configure SSH Hosts...`
     </Note>

  4. If prompted by an external application warning, select **Yes** to confirm you want to open your project in your preferred editor or VS Code.

  5. You may be asked to install or update SSH extensions periodically. Replit will endeavour to be compatible with the latest versions of these IDEs, and you may get important security updates as well.
</details>

<details>
  <summary>Connect manually</summary>

  At the bottom of the **SSH** pane's "Connect" tab, you will find "Connect manually".

  Copy that command, paste it into either a local Terminal (Mac or Linux) or local Command Prompt (Windows) in order to connect directly.

  This is also a good way to debug connection issues with IDEs, as well as to collect valuable "verbose" connection information when reporting bugs to Replit Support.

  **An error indicating we are attempting to connect with a nonexistent private key**:

  ```
  $ ssh -i ~/.ssh/replit -p 22 c96b6ade-d5e4-4f7a-bc5b-52334509b2a3@c96b6ade-d5e4-4f7a-bc5b-52334509b2a3-00-16nh2hskw3ql8.riker.replit.dev
  Warning: Identity file /Users/user/.ssh/replit not accessible: No such file or directory.
  ```

  **Full debug logs of an SSH connection attempt, to include with a bug report**:

  ```
  $ ssh -vvv -i ~/.ssh/replit -p 22 c96b6ade-d5e4-4f7a-bc5b-52334509b2a3@c96b6ade-d5e4-4f7a-bc5b-52334509b2a3-00-16nh2hskw3ql8.riker.replit.dev
  OpenSSH_9.6p1, LibreSSL 3.3.6
  debug1: Reading configuration data /Users/.../.ssh/config
  debug1: /Users/.../.ssh/config line 1: Applying options for *
  debug1: /Users/.../.ssh/config line 4: Applying options for *.replit.dev
  debug3: channel_clear_timeouts: clearing
  debug1: Connecting to c96b6ade-d5e4-4f7a-bc5b-52334509b2a3-00-16nh2hskw3ql8.riker.replit.dev port 22.
  debug1: Connection established.
  debug1: identity file /Users/dstewart/.ssh/replit type 3
  debug1: Local version string SSH-2.0-OpenSSH_9.6
  debug1: Remote protocol version 2.0, remote software version Replit-SSH-Proxy
  debug1: compat_banner: no match: Replit-SSH-Proxy
  debug3: fd 5 is O_NONBLOCK
  ...
  Welcome to the Replit SSH Proxy.

  Visit https:/.replit.com/replit-workspace/ssh to learn more about SSH on Replit.
  debug3: receive packet: type 51
  debug1: Authentications that can continue: password,publickey
  debug3: start over, passed a different list password,publickey
  debug3: preferred publickey,keyboard-interactive,password
  debug3: authmethod_lookup publickey
  debug3: remaining preferred: keyboard-interactive,password
  debug3: authmethod_is_enabled publickey
  debug1: Next authentication method: publickey
  ...
  debug2: we did not send a packet, disable method
  debug3: authmethod_lookup password
  debug3: remaining preferred: ,password
  debug3: authmethod_is_enabled password
  debug1: Next authentication method: password
  ```
</details>

<details>
  <summary>Connect via a tool not listed here</summary>

  There are many SSH clients available for different platforms and operating systems, many offering different features or integrations.

  You can always break down the command displayed in "Connect Manually" into its constituent components to determine how to configure each client:

  ```sh
  ssh -i ~/.ssh/replit -p 22  c96b6ade-d5e4-4f7a-bc5b-52334509b2a3@c96b6ade-d5e4-4f7a-bc5b-52334509b2a3-00-16nh2hskw3ql8.riker.replit.dev
         ^-----v-----^    ^^  ^-----------------v----------------^ ^------------------------------v-------------------------------------^
          Private Key   Port                   User               @                           Hostname
  ```

  **Hostname**: `<your_hostname>.<cluster>.replit.dev`
  **Port**: `<port_number>`
  **User**: `Username`
  **Private Key**: Path to the private key file on your computer. Usually next to `replit.pub`.
</details>


# Templates
Source: https://docs.replit.com/replit-workspace/templates

If your Replit App can be used as a good starting point for other project, you might want to submit it as a template! Let's learn what a Replit template is and how to make a good one.

## What is a template?

Templates are published Replit Apps that can be used to build upon. The official templates, made by Replit, have a checkbox next to the name of the template:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/programming-ide/creating-a-template/template-official.png" alt="Official Replit templates" />
</Frame>

The [HTML, CSS, JS template](https://replit.com/@replit/HTML-CSS-JS?v=1#index.html) template is very popular and can be used as a starting point for creating a vanilla JavaScript project. You can fork the template to use it.

Other templates have been created by community members, like this one:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/programming-ide/creating-a-template/template-community.png" alt="Community templates" />
</Frame>

## Creating a template

Public Replit Apps can be published by checking the "Publish as Template" box in the last step of the Publish this Replit Apps flow.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/programming-ide/creating-a-template/publish-button.png" alt="Publish button" />
</Frame>

Before you publish your template, make sure it's as easy to use as possible. It should include all the boiler plate code that is needed to get a project started, and it should work right away when the "Run" button is pressed.

A good template should always include well-commented code, easily editable variables, and a README file. It's always important to comment your code, but it's even more important when others will be using your code for their own projects. In the `README.md` file, add descriptive details about your template, and information about the variables that the user can change. READMEs help users understand how your template works, and if there are any requirements, licensing, or other factors they should be aware of.

The `.md` in `README.md` stands for Markdown, which is a basic text language. READMEs can be written in any text format, but we'll use Markdown as it's the best practice.

Here's an example outline for a README - feel free to use this for your own templates!

```md
# Template Name

Choose a self-descriptive name, you can also add a simple description about your template.

# Usage

Explain how you can install / use this template. Make sure to provide a detailed explanation and make it easy for people to read. Also, add any code snippets if needed.

# License

This will define how people can use your template. You can visit https://opensource.org/licenses to choose a license.
```

You can also edit your submitted template and share update messages to show how your project has changed over time.


# Themes Explore Page
Source: https://docs.replit.com/replit-workspace/themes/explore

Browse, search, and install custom themes created by the Replit community. Filter by title, author, color scheme, and preview themes before using them.

The [Themes Explore Page](https://replit.com/themes) is a great place to browse and preview Custom Themes created by the community. Publishing your theme allows others to try it out and enjoy Replit through a brand new palette of colors.

## Publish your Theme

To publish one of your Custom Themes to the Community, simply hit the "Publish" button from within the Themes Editor, fill out the title and description, and submit.

Don't worry if your theme isn't perfect yet - you can always publish updates if you decide to make changes in the future!

## Search for Themes

If you're looking for something in particular, you can also filter Themes by title, author, color scheme (light or dark), and even specific hex codes!

For example, a very popular theme from other editors is **Atom One Dark**. Searching for this title brings up
a few results that we can choose from!

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/themes/search-atom.webp" alt="searching for a theme" />
</Frame>

Some creators are particularly enthusiastic about making cool themes! If you want to see all of the themes that someone you like has created, you can even filter by a specific author!

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/themes/search-by-author.webp" alt="searching by user" />
</Frame>

Lastly, you can filter themes by color scheme (light or dark) and even find themes that match a specific color.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/themes/search-color.webp" alt="searching by color" />
</Frame>

## Preview, Install

Once you select a Theme you like, you will be redirected to its Cover Page where you can preview the Theme to see how it looks, install it so that you can apply it across the site.

***

Ready to start searching for and using your favorite Custom Themes? Get started by visiting the [Themes Explore Page](https://replit.com/themes) today!


# Creating your first theme
Source: https://docs.replit.com/replit-workspace/themes/first-theme

Learn how to create and customize your first Replit theme by setting global colors for backgrounds, outlines, buttons, and more to personalize your workspace.

With Custom Themes, you can make Replit truly yours by customizing much of the UI from the background and foreground colors site-wide to your code's syntax highlighting. Let's dive into creating your first theme and get Replit looking just the way you want it to!

Navigate to your [account page](https://replit.com/account) and scroll down to the **Themes** section Create a new theme, fill out the title, select a color scheme, optionally add a description, and hit **Create Theme**.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/themes/creating-theme.png" alt="creating a theme" height="400" />
</Frame>

After creating your theme, you will be redirected to the Themes Editor. Let's first look at the **Global Theme** section and how each color option applies.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/themes/global-theme.png" alt="global-theme" height="400" />
</Frame>

**Background** is the most noticeable color and the easiest one to get right. Notice how the entire page changes color as you edit it. Let's make it a very dark bluish color for this theme.

**Outline** controls the color of borders. I'll choose a nice dark blue color to give off that cyberpunk experience.

**Foreground** mostly controls text and icon colors. We're going to make the foreground a bluish-grey to give a lower contrast with the background, so as to not hurt the eyes through long coding sessions.

**Primary** controls the color of most buttons. Fitting with the other colors we've selected, a more cyan-teal blue should do.

**Positive** controls things like the color of the run button and those confirmation toasts that appear in the lower-right corner of the screen—anything that denotes something "positive". We've chosen a pale green color for this example theme.

**Negative** colors appear when there is an error or if you are about to perform a dangerous action. A nice orange color will do here.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/themes/global-theme-preview.png" alt="global-theme" height="400" />
</Frame>

Finally, hit **Apply Theme** to start using your new theme. If you want to go deeper and style syntax highlighting for your code, let's move on to the [next step](/replit-workspace/themes/syntax-highlighting)


# Port from VSCode
Source: https://docs.replit.com/replit-workspace/themes/port-from-vscode

Learn how to easily import your favorite VS Code theme into Replit with a simple color selection process. Follow along with our video tutorial.

# Port your theme from VS Code

Porting your favorite theme over from VS Code is easier than you'd ever think! All it takes is a couple of clicks to select your colors as part of the themes creation process. In the video below, you can see how just how easy it is to port existing themes from other editors into Replit:

<iframe width="100%" height="400" src="https://www.loom.com/embed/ba4eb90eb3dd4ec7802954bf695b9c82?sid=4a5274a2-cfd7-4f2b-9c11-f54d7a56eb7f" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen />


# Managing installed themes
Source: https://docs.replit.com/replit-workspace/themes/switching-managing-themes

Learn how to switch between themes, edit custom themes, and manage your installed themes in your Replit account settings.

All of your installed themes can be managed from your [account](https://replit.com/account) under the **Themes** section.

## Switching Themes

To switch out your current active theme for another one, simply click on the button next to the theme's title.

## Edit / Delete an existing theme

To edit or delete an existing theme of yours, hit the three dots beside a theme and hit either **Edit** or **Delete**. Note that only custom themes that you have created can be edited or deleted.


# Syntax Highlighting
Source: https://docs.replit.com/replit-workspace/themes/syntax-highlighting

Learn how to customize syntax highlighting colors for different code elements like variables, functions, keywords, and more in your Replit theme.

Syntax highlighting enables you to color specific tokens in your code. Imagine what a life it would be if all of your code was only one color! Thanks to Custom Themes, you can now customize syntax highlighting to your liking!

* ## `Variable Names`
  Usually this color is applied when you use or define a variable in which no declaration keyword is used.

### JavaScript

```javascript
const message = "Hello World";
console.log(message); // "message" on this line gets highlighted
```

### Python

```python
message = "hello python" # no declaration keyword like "const" is used, so 'message' is colored here
print(message) # and during usage
```

* ## `Variable Definitions`
  This color gets put into use when defining a variable with a definition keyword such as `const`, `var`, `int`, etc.

### JavaScript

```javascript
const variableName = "Look Ma, I'm a variable!"; // 'variableName' is highlighted
```

### Java

```java
public class Main {
  public static void main(String[] args) {
    int numericValue = 100; // 'numericValue' is highlighted
  }
}
```

* ## `Function References`
  This color gets applied when you call a function.

### JavaScript

```javascript
function run() {
  console.log("I'm Running!");
}
run(); // 'run' is highlighted
```

### Python

```python
def dog_bark():
  print("Woof!")
dog_bark() # 'dog_bark' is highlighted
```

* ## `Function Definitions`
  When defining a function, this is the color that your function definition will be.

### JavaScript

```javascript
function run() {
  // 'run' is highlighted
  console.log("I'm Running!");
}
```

### Python

```python
def dog_bark(): # 'dog_bark' is highlighted
  print("Woof!")
```

* ## `Keywords`
  This one color highlights the important keywords in your code such as variable definitions, class definitions, imports/exports, and more!

### JavaScript

```javascript
export default async function MyAsyncFunction() {
  // 'export', 'default', 'async', and 'function' get highlighted
  // 'return' and 'new' get highlighted
  return new Promise((resolve, reject) => resolve("hello world"));
}
```

### Python

```python
import string, sys # 'import' gets highlighted
for i in sys.argv[1:]: # 'for' and 'in' get highlighted
  try: # 'try' gets highlighted
    fahrenheit=float(string.atoi(i))
  except string.atoi_error: # 'expect' gets highlighted
    print(repr(i), "not a numeric value") # 'print' gets highlighted
```

* ## `Property Names`
  This color gets applied when accessing a property from a variable.

### JavaScript

```javascript
const person = {
  name: "John",
  job: "Programmer",
};
const { job } = person; // 'job' is highlighted
console.log(person.name, job); // 'name' is highlighted
```

* ## `Property Definitions`
  This color gets applied when defining a method or property.

### JavaScript

```javascript
class Person {
  constructor(name, job) {
    // 'constructor' gets highlighted
    this.name = name;
    this.job = job;
    this.stats = {
      weight: 200, // 'weight' gets highlighted
    };
  }
}
```

* ## `Function Properties`
  This color gets applied when calling a method.

### JavaScript

```javascript
console.log("Hello World"); // 'log' gets highlighted
```

### Python

```python
fahrenheit = float(string.atoi(i)) # 'atoi' gets highlighted
```

* ## `Tag Names`

  This color applies to tags in HTML and JSX.

  ### HTML

  ```html
  <div>This is a test</div>
  <!--'div' gets highlighted in both places-->
  ```

* ## `Type Names`

  This color applies to types in strongly typed languages such as Java, TypeScript, etc.

  ### TypeScript

  ```typescript
  const name: string = "John"; // 'string' gets highlighted
  const allNames: Array<string> = [name]; // 'Array' and 'string' get highlighted
  ```

  ### Java

  ```java
  int N = 100; // 'N' gets highlighted
  boolean[] isPrime = new boolean[N + 1]; // 'boolean' gets highlighted in both cases
  ```

* ## `Class Names`
  When defining or, in some cases, using a class, this is the color that will be used.

### JavaScript

```javascript
class Animal {
  // 'Animal' gets highlighted
  constructor(type) {
    this.type = type;
  }
}
const Fish = new Animal("catfish"); // 'Animal' gets highlighted
```

### Python

```python
class Person: # 'Person' gets highlighted
  def __init__(self, name, age):
    self.name = name
    self.age = age
```

* ## `Attribute Names`
  This color gets usually gets applied in HTML and JSX tag attributes.

### HTML

```html
<div className="dog" id="the-dog"></div>
<!--'className' and 'id' get highlighted-->
```

### JSX

```jsx
const MyComponent = (props) => {
  // 'passedProp' gets highlighted
  return (
    <OtherComponent passedProp={props.prop}>
      <div>{props.children}</div>
    </OtherComponent>
  );
};
```

* ## `Comments`
  This color applies to all code comments.

### JavaScript

```javascript
// This comment gets colored
```

### Python

```python
# This comment gets colored
```

* ## `Strings`
  This color refers to strings in code.

### JavaScript

```javascript
console.log("hello!"); // '"hello"' gets highlighted
```

### Python

```python
print("hi!") // '"hi!"' gets highlighted
```

* ## `Numbers`
  This color refers to all numerical values including integers, floats, doubles, and more.

### JavaScript

```javascript
console.log(12345); // '12345' gets highlighted
```

### Python

```python
print(54321) # '54321' gets highlighted
```

* ## `Booleans`
  This color gets applied to boolean values like `true` and `false`.

### JavaScript

```javascript
const t = true; // 'true' gets highlighted
const f = false; // 'false' gets highlighted
```

### Python

```python
t = True # 'True' is highlighted
f = False # 'False' is highlighted
```

* ## `Regular Expressions`
  This color gets applied for regular expressions.

### JavaScript

```javascript
const str = "ohhh hello world!";
const matchOs = str.match(/o/gi); // '/o/ig' gets highlighted
```

* ## `Operators`
  Operators such as `+`, `-`, `*`, `/`, and more get highlighted with this color.

### JavaScript

```javascript
console.log(5 + (3 % 2)); // '.', '+', and '%' get highlighted
```

### Python

```python
if len("dog") == 3: # '==' gets highlighted
  print("dog is " + "3" + " characters long") # '+' gets highlighted in both cases
```

* ## `Square Brackets`
  This colors square brackets, usually the `[` and `]` characters.

### JavaScript

```javascript
const arr = [0, 1, 2, 3, 4, 5]; // '[' and ']' get highlighted
```

### Python

```python
arr = [0, 1, 2, 3, 4, 5]; # '[' and ']' get highlighted
```

* ## `Angle Brackets`
  This colors angle brackets, usually the `<` and `>` characters, when they aren't being used as part of HTML and JSX tags or other token types.

### HTML

```html
<h1>Hi, World!</h1>
<!--'<' and '>' on both sides of each tag get highlighted-->
```

Congratulations on getting your syntax highlighting colors customized! Now let's learn how to further [improve the design of your theme](/replit-workspace/themes/theme-design).


# Theme Design
Source: https://docs.replit.com/replit-workspace/themes/theme-design

Learn how to create visually appealing themes by optimizing contrast, color palettes, and syntax highlighting for better readability and accessibility.

You can make your theme look even better by considering details like contrast, color palette, and visibility. Let's go over how to do this for your favorite themes.

## Examples of popular existing themes

Let's take a look at some of the most popular VS Code themes and spot some differences between them.

### 1. Atom One Dark

Atom One Dark is one of the most popular themes of all time. Originally made for Atom code editor, this theme has made its way across many different code editors. Take a look at the vibrant color palette used here and how well the colors contrast against each other.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/themes/themes/atom-one-dark.png" alt="atom one dark theme" />
</Frame>

### 2. Nord

The Nord theme is a beautiful, minimalistic theme that uses blue, green, and white hues for syntax highlighting. While it may not use as many colors as the Atom One Dark theme, each color is carefully chosen to complement the others and the foreground.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/themes/themes/nord.png" alt="nord theme" />
</Frame>

### 3. Tokyo Night (Storm)

In Tokyo Night (Storm), the contrast between the foreground text and the background is greater than in the previous two themes. It uses hues of red and purple to color the code.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/themes/themes/tokyo-night-storm.png" alt="tokyo night storm theme" />
</Frame>

### 4. Night Owl

Of all the themes, Night Owl has the highest contrast between the code and the background. Similar to Atom One Dark, this color palette uses a wide range of colors rather than just one.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/themes/themes/night-owl.png" alt="night owl theme" />
</Frame>

### 5. Bluloco Light

Bluloco Light has a playful design and uses a wide range of colors in its syntax highlighting palette. In light mode, the foreground colors are brighter to improve visibility against the background.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/themes/themes/bluloco-light.png" alt="bluloco light theme" />
</Frame>

## Background and Foreground

As you may have noticed, we've been using the terms "background" and "foreground" a lot. Background refers to the color of your theme's background and Foreground refers to the content on top of the background, such as text. To get a better understanding of how this works, there is a blog post on how many of Replit's theme tokens work located here:
[https://blog.replit.com/rui-tokens](https://blog.replit.com/rui-tokens).

To choose a background color for your theme, it's best to pick a color that is close to black or white, with a hint of a colorful hue. If you take a look back at the popular themes we featured above, notice how none of the backgrounds use sharp colors like **hot pink** or **lime green**.

## Accent Colors

Accent colors should typically have a medium-high contrast relative to the background but not as high as the foreground.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/themes/accents.png" alt="accent colors" />
</Frame>

## Syntax Highlighting

Notice how the code syntax colors in the screenshots above look nice next to each other and contrast well against the background. To have legible syntax highlighting in your theme, try your best to:

* Make sure your colors don't clash visually.
* Enforce a range of brightness for your color palette.
* Make sure your colors aren't hard to see against the background.
* Make sure your colors don't appear with such a large contrast difference against your background.

If you can nail those four points, your theme's going to look awesome. Here are some examples of bad code syntax highlighting colors:

### 1. Large Brightness Difference

Notice the two circled elements in the code with different colors. In this case, `app` is quite dark while the string is very bright. When the brightness of selected colors varies too much, code becomes a lot harder to read.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/themes/syntax-brightness-bad.png" alt="bad code syntax highlighting colors in brightness" />
</Frame>

### 2. Poor Color Matching

Although most of the colors in this example fall within a similar brightness range, they don't look great together. It's best to choose similar colors for different areas rather than painting a rainbow all over your code. [Color Hunt](https://colorhunt.co) has some cool palettes that you can use to color different areas of your code if you need some inspiration.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/themes/bad-color-matching.png" alt="bad color matching" />
</Frame>

### 3. Low Contrast

If you have to squint to see your code, that is not good. Make sure your code has enough contrast so that it can be easily read, especially by those with impaired visibility.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/themes/super-low-contrast.png" alt="super low contrast" />
</Frame>

***

Awesome! Keep building great themes and you'll become a pro in no time! If you're wondering how to get your favorite theme from VS Code ported over to Replit, check out the [next tutorial](/replit-workspace/themes/port-from-vscode)!


# Connecting Replit to GitHub
Source: https://docs.replit.com/replit-workspace/using-git-on-replit/connect-github-to-replit

Learn how to connect your GitHub account to Replit to import and edit repositories directly in the Replit workspace.

To import and edit GitHub repositories on Replit, first connect your Replit account to GitHub.

<iframe width="100%" height="400" src="https://www.loom.com/embed/9d8c3eb731c14e369e73edb12bc6d539?sid=751c0435-63f3-4787-a7d5-74cc090f8aec" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen />

Navigate to your [Replit account](https://replit.com/account), scroll down to **Connected Services**, and click the GitHub "Connect" button.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/gh/images/connected-services.png" alt="linking connected services" />
</Frame>

You should then be prompted to allow access to Replit. Follow the steps on GitHub and after that, your Replit account should be successfully linked. If at first the Connected Services section under your account is not showing that your account is linked, refresh the page and it should work now.

If all goes well, you should be ready to [import your first repository](/replit-workspace/using-git-on-replit/import-repository)! 👏


# Git workflows and commands
Source: https://docs.replit.com/replit-workspace/using-git-on-replit/git-commands

The most crucial features of Git to learn are the basic Git workflow and commands, such as cloning a repository, creating and switching between branches, committing changes, and pushing and pulling from a remote repository. Understanding these basic concepts and commands will enable you to use Git effectivelv for your Replit projects.

Here's a guide of common Git workflows and example commands for them:

## Cloning a repository

This creates a local copy of a remote Git repository.

Example command: `git clone <repository url>`

## Creating and switching between branches

This allows you to work on multiple versions of a project.

Example commands: `git branch branch name>` and `git checkout <branch name>`

## Committing changes

This saves your progress on a project.

Example command: `git commit -m ‹commit message>`

## Pushing and pulling from a remote repository

This synchronizes your local repository with the remote repository.

Example commands: `git push` and `git pull`.

## Branching and merging

This allows you to create separate branches of a project and merge your changes back into the main branch.

Example commands: `git branch <new branch name>` and `git merge <branch to merge>`

## Resolving merge conflicts

This is the process of resolving conflicts that can arise when multiple users make changes to the same file in a repository.

Example commands: `git merge --abort` and `git merge --continue`


# Using Git with the Shell
Source: https://docs.replit.com/replit-workspace/using-git-on-replit/git-shell

Learn how to clone repositories, make changes, and push code using Git commands in the Replit shell. Includes authentication and credential management.

## Cloning an existing repository from the shell

Using Git in the shell allows you to do the same things as the graphical Version Control tool and much more, leveraging the full power of Git. You can use Git in the Shell on Replit the same as you would on your local terminal.

To clone a repository, use `git clone <url-to-your-repository>`. The URL should start with `https` so that you don't need to configure an SSH client on your replit app. If the repository is public, it will immediately be cloned into your Replit Workspace, and you'll see the new directory appear in your files bar.

If the repository is private, you'll be prompted for your username and password. Note that GitHub no longer accepts passwords on the command line, so if you are cloning a private repository for GitHub you should rather put in a [personal access token](https:/.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token) when prompted for your password.

In the example shown below, we run `git clone https://github.com/ritza-co/git-demo.git` and can see the new files appear in a subdirectory on the left called `git-demo`.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/programming-ide/git-with-replit/git-clone.png" alt="Git Clone" />
</Frame>

## Making changes on Replit and pushing back to a remote Git host

Once you've cloned a repository, you can make changes to your files in the Workspace. Once you're happy with the changes, you can add new files, commit your changes, and push everything back up to your Git hosting provider (e.g. GitHub) by running a few commands.

Before running any of the below, make sure you're in the correct directory. For example, if you cloned your repository using `git clone` as described above, you'll first have to change into the sub-directory, e.g. `cd git-demo` in the example we are using.

1. First, check the status of your repository by running the following command. This will show you any new files, changed files, or removed files:

```
git status
```

If you are happy with all of your changes, you can add them all with the following command:

```
git add .
```

Once you've added the files, you can run `git status` again to see that all the changes are listed in green now, showing that they're tracked by Git. In the example below, we see that we changed one file (`READEME.md`) and removed another one (The `git-demo` subdirectory). We also added a new file called `newfile.md` which is shown under "untracked files".

After running `git add .`, all files and changes are tracked by Git, so they appear under "Changes to be committed".

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/programming-ide/git-with-replit/git-status-git-add.png" alt="Git Status and Git Add" />
</Frame>

Before we can commit the files, we'll have to tell Git who we are by configuring a name and email address. Run the following commands, using your own name and email address:

```
git config --global user.name "Jane Doe"
git config --global user.email "jane@example.com"
```

Now you can commit and push your changes as follows. You may have to change the branch name `main` to whatever your branch is called, e.g. `git push origin master` or `git push origin develop` are some common names.

```
git commit -m "add newfile and some fixes"
git push origin main
```

You'll be prompted for your username and password, whether or not the repository is public. Remember to use your GitHub access token instead of your password if you are using GitHub.

If everything works out, you should see a "Writing Objects..." message, followed by "done", as shown below.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/programming-ide/git-with-replit/git-config-commit-push.png" alt="Git Commit Git Push" />
</Frame>

## Pushing without typing in your password or access token

There's always a tradeoff between convenience and security. If you are dealing with sensitive code or information, it's best to store your password or access token in a password manager, and paste it in each time you push changes.

If you prefer, you can store your credentials as part of the remote Git URL as environment variables, using Replit secrets. This means you won't have to type your username and password each time, but it also means that anyone with access to your replit app will be able to find your password or token.

Under the secrets tab in the sidebar, add a new secret. Put `GIT_URL` as the key and the URL to your Git repository with your credentials as the value. For example, on GitHub you use the format `https://<username>:<github-access-token>@github.com/<user-or-organization>/<repository>`. Click 'Add Secret'. You may have to restart your shell before this secret becomes available, which you can do by typing `exit` in the shell.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/programming-ide/git-with-replit/add-secret.png" alt="Add secret" />
</Frame>

Now you can use `git push $GIT_URL` to push up to your remote Git host without needing to type in your credentials.

For more advanced use of Git, including branching, rebasing, cherry-picking, and more, see our [Git commands reference guide](/replit-workspace/using-git-on-replit/git-commands).


# GitHub Authentication Errors in Replit
Source: https://docs.replit.com/replit-workspace/using-git-on-replit/github-auth-errors

Learn how to resolve common GitHub authentication errors when using Git in Replit, including push, fetch, and clone permission issues.

While interacting with our Git-based Version Control tool in the Workspace and our GitHub integration, you may run into error messages that look like this:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/programming-ide/github-auth-errors/generic-autherror-modal.png" alt="An error modal reading 'unable to connect to this GitHub repository'" />
</Frame>

This is usually the result of permission issues with the GitHub integration. To grant replit permission to read and write to your repositories, learn how to connect to personal repos [here](/replit-workspace/using-git-on-replit/private-repo)

## Push errors

Push errors commonly occur when trying to push to a repository that you don't have collaboration permissions for.

Try contacting the repository owner to add you as a collaborator. On GitHub, this can be done through navigating to the Repo, clicking `Settings`, then `Collaborators`, and adding an account under `Manage Access`.

### Branch Protection

If this modal appears with the message 'confirm that you have permission to push to \[repo]', another reason could be [GitHub's branch protection feature](https:/.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/about-protected-branches).

This feature allows repository admins to set restrictions on who and what can be pushed to certain branches: for example, only allowing PRs that have been reviewed to be pushed to a branch.

If the repository you're working with has enabled this feature, talk with your repository admin about allowing the Replit GitHub app as an exception. [The GitHub docs announcement](https://github.blog/changelog/2022-05-17-consistently-allow-github-apps-as-exceptions-to-branch-protection-rules/) has more information on how to set this up.

## Fetch and Clone errors

Fetch and Clone errors usually occur when trying to interact with a private repository, or one that you don't have view access to.

This can occur when you haven't signed into GitHub through Replit - click the 'Connect Replit to your GitHub account' first, and ensure that you allow Replit's GitHub App to have access to all the repositories that you want to edit.

Alternatively, try contacting the repository owner to add you as a collaborator on GitHub (see Push errors section for instructions.)


# Import your first Repository
Source: https://docs.replit.com/replit-workspace/using-git-on-replit/import-repository

Learn how to import your GitHub repositories into Replit and start coding. Follow these simple steps to bring your code from GitHub to Replit.

Now that you've linked your github account to replit, it's time to import some code from github!

<iframe src="https://www.loom.com/embed/16ab07218e984f408e61778e369a325a?sid=158def66-677c-4627-8030-086cc57000ef" width="100%" height="400" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen />

Click on the **Create replit app** button from the sidebar.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/gh/images/sidebar.png" alt="creating a replit app from the sidebar" />
</Frame>

After opening the menu to create a new replit app, press the **Import from Github** button in the top-right corner.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/gh/images/import-repo-button.png" alt="importing a repository" />
</Frame>

Copy the URL of a public GitHub repository and paste it into the text field. After you've finished, press the **Import** button.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/gh/images/import-final.png" alt="finalizing import configuration" />
</Frame>

Depending on the language you've selected, you might have to configure the run command for your Replit App. If you are unsure about how to properly run your Replit App, you can read about how to [configure your Replit App](/replit-app/configuration/).


# Private & Personal Repositories
Source: https://docs.replit.com/replit-workspace/using-git-on-replit/private-repo

Learn how to authorize Replit to access your private GitHub repositories and import them into your workspace for seamless development.

Once you've imported a GitHub repository, you will need to grant Replit permission so you can make changes tracked by your remote repository.

<iframe src="https://www.loom.com/embed/f3908dfd60274dba90b1b1c0c20450e2?sid=58be771b-16c3-496d-a22d-f71393fecb74" width="100%" height="400" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen />

***

Let's start by creating a new Replit App from scratch and opening the **Version Control** tab.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/gh/images/version-control-pane.png" alt="version control tab" />
</Frame>

The next step is to click the **Existing Git Repo** button. You should get a popup asking to access your GitHub repositories. Simply authorize GitHub by clicking the link "Connect GitHub to import your private repos".

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/gh/images/authing-github.png" alt="authorizing github" />
</Frame>

The final step is to install Replit on your personal GitHub account. Allow access to all repositories and hit **Install & Authorize**.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/gh/images/install-replit-on-github.png" alt="Installing github" />
</Frame>

After you've finished this step, the popup should update and allow you to import all of your GitHub repositories! Choose one and hit **Pull changes**.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/gh/images/pull-changes.png" alt="pulling changes" />
</Frame>

Your repository's code should now be successfully imported. Let's learn about how to [use the GUI](/replit-workspace/using-git-on-replit/use-gui) in the next tutorial!


# Running GitHub repositories on Replit
Source: https://docs.replit.com/replit-workspace/using-git-on-replit/running-github-repositories-replit

Learn how to import, configure, and run GitHub repositories on Replit, including setting up run commands and adding "Run on Replit" badges to your projects.

GitHub repositories can be run automatically on Replit. Head to [https://replit.com/github](https://replit.com/github) to import a repository. You can unlock private repositories after authenticating with GitHub and purchasing the [Replit Core membership](https://replit.com/pricing).

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/programming-ide/running-github-repositories-replit/XOFmfO94Du.png" alt="import modal" />
</Frame>

From the modal above, you can select the repo, language, and owner of the Replit App. We will automatically detect the language if your GitHub repository already has a `.replit` file!

## Configuring a Cloned Repo

When you clone a repository without a `.replit` file, we automatically show the visual `.replit` editor:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/programming-ide/running-github-repositories-replit/2QlSkG7YCB.png" alt="Visual config editor" />
</Frame>

This will automatically create the `.replit` file and make it possible to customize how the Replit App will run.

You can use the shell to run any command and then set the "Run" button once you've decided what it should do.

Clicking "done" will finalize the Replit App's configuration and close the visual editor.

Adding a `.replit` file to a repository makes cloning fast with no configuration necessary. The configuration file can always be changed at any time. For more information on how to configure your Replit App, see the documentation on [Configuring your Replit App](/replit-app/configuration/).

## Adding a "Run on Replit" Badge

<Frame>
  <img src="https://replit.com/badge/github/replit/clui" alt="" />
</Frame>

After configuring a run command for your Replit App, you can add a badge to your repository README that will allow anyone to run your project automatically!

### Generate a badge

<iframe style={{ border: 0, width: '100%', height: 280 }} src="https://replit.com/@util/icons" />


# Using the Git Pane
Source: https://docs.replit.com/replit-workspace/using-git-on-replit/use-gui

The Git pane serves as a powerful tool for effortless code tracking, management, branch navigation, and collaborative work within your workspace.

## Getting Started

While you are in your Replit App, navigate to the Tools section where you see `Console` and `Shell`. Select `+` sign to add `Git` into your Tools section.

A pane will open prompting you to initialize a Git Repository. Select **Initialize Git Repository** to get started.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/gh/pane/01-git-pane.png" alt="Initialize your Repository" />
</Frame>

### Connect to GitHub

After initializing the repository, select the gear icon in the upper-right corner.

You will see two commit authors, one pointing to a default generated profile and another pointing to your personal GitHub account.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/gh/pane/02-settings.png" alt="settings" />
</Frame>

1. Select the **Connect to GitHub** button, which opens up a new window for you to login to your GitHub account using your credentials. If you are already logged in, select **Configure** next to your name.
2. Once you are logged into your GitHub account, navigate to the **Repository access** section located at the center of the page, choose **All repositories** and then **Save**.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/gh/pane/03-git-pane-repo-access.png" alt="Allowing access to all repositories" height="500" />
</Frame>

3. In your Replit workspace, fill in the GitHub metadata - **Repository name**, **Repository description**, choose the privacy setting between **Public** and **Private**. Then, select **Create Repository on GitHub**.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/gh/pane/04-git-pane-metadata-remote-url.png" alt="Filling out repo metadata" height="500" />
</Frame>

4. Once the repository is created, you will see the **Remote** field is populated with your GitHub remote URL. You can verify that a repository is created in your GitHub and it is empty.

Go back to your Git pane by selecting the back arrow in the **Settings** section.

### Push your first commit

In your Replit App, make modifications to some files and see the modified files appear in the **Review Changes** section in the Git pane.

<Note>
  You can use our Generative AI tool, ask questions and generate code in your file you wish to modify.
</Note>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/gh/pane/05-review-changes.png" alt="Review Changes" />
</Frame>

Add a commit message in the **Message** field describing about your change(s).

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/gh/pane/06-stage-commit-changes.png" alt="commit everything" />
</Frame>

Select **Stage and commit all changes**.

Select **Push branch as 'origin/main'** and your repository will be populated with the files from your Replit App.

You will be prompted to confirm your GitHub credentials; you can select **Confirm for this session**.
You will see that your changes are published to your GitHub repository main branch.

### Stage and commit all files

To add and commit **all** changed files to your commit, Provide a commit message and select **Stage and commit all changes**.

### Stage files

To stage a single file, click the **"+"** icon on the right-hand-side of the specific file. This action is equivalent to running `git add <file-name>`.

To stage all changed files, select **Stage All**. This action is equivalent to `git add .`

Then, select **Stage and commit all changes** to commit your changes to the branch.

You will see **1 commit to push** in the **Remote Updates** section.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/gh/pane/07-commit-to-push.png" alt="stage a single file" />
</Frame>

Now, use the **Push** button to push the changes to your remote repository.

### Discard one or all files

To undo the changes for a file, select the discard changes icon located on the right side of the specific file. This action is equivalent to `git reset <file>`.

To discard the changes from all the files, select **Discard All**. This action is equivalent to `git reset .`

<Warning>
  This action will reset the file to its state when last tracked by Git. If the file did not exist in the latest version of your branch, the file will be deleted.
</Warning>

## Branches

The Git pane allows you to easily create and switch between branches.

### Create or switch to a branch

You can create a new branch or even select an existing branch to push your commits.

Select the arrow beside the main branch which opens up a window to search from existing branches or create a new branch with a name of your choice.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/gh/pane/08-new-branch.png" alt="branches" />
</Frame>

1. After creating the new branch, you will be prompted to publish it. Select **Publish branch as 'origin/`<branch>`'**.
2. Once published, your new branch is readily available.

## Pulling Changes

If you have changes in your remote repository and you wish to pull them to your Replit workspace, you can use the **Pull** button.

Alternatively, you can use the **Sync with Remote** button to pull the latest from the remote repository.

If you have uncommitted changes, you can't pull the latest changes from the current branch. Stage and commit those changes first, and then you can pull from your remote repository.

## Merge Conflicts

A merge conflict happens when two different sets of code changes try to combine, but they both have edits in the same part of the code. This means you have to manually figure out which changes to keep.

Here is a common example of a merge conflict:

1. John changes line 1 of `script.js` to `console.log("Hi Developers!")` and pushes these changes to the `main` branch.
2. Kevin changes line one of `script.js` to `console.log("Hello Programmers")` **after** John has made his changes.
3. Kevin tries to push his changes to the `main` branch.
4. A merge conflict occurs because Git isn't sure which changes in the code to keep.

If you try to push your changes during an active merge conflict, you will see a Git error as shown in the screenshot below.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/gh/pane/09-conflict-pull-message.png" alt="conflict message" />
</Frame>

On the other hand, if you try to pull changes when a merge conflict is active, you will see some warnings in the Git UI.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/gh/pane/10-push-pull-conflict.png" alt="conflict pull message" />
</Frame>

To resolve the merge conflict, you'll need to manually edit the code to make the different changes work together. This means finding the conflicting changes and deciding which ones to keep before you can update your code.

### Resolving a Merge Conflict

When a merge conflict arises, the Git Pane shows a warning saying the changes cannot be pushed before resolving the merge conflict. In the upstream section, select the **Pull** button.

The UI will then highlight the conflicting files.

Navigate to each of the conflicting files. You will see some conflict markers. A typical conflict marker looks like this:

```
<<<<<<< HEAD
=======
## Overview
>>>>>>> <commitID> (<Conflicting change>)
```

The **Current change** is your code and the **Incoming change** is the conflicting code. You can do three things:

1. Keep your code
2. Keep the incoming change
3. Manually edit the two changes to make the code behave in the desired way

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/gh/pane/11-merge-conflict.png" alt="conflicted code" />
</Frame>

After resolving a conflicted file, you can remove the conflict markers by removing the lines starting with **{"<<<"}**, **==** and **>>>** and save the file.

After the conflict has been resolved, select **Pull**. Now, you will see that the latest changes have been updated in the code and the latest commit is shown in the Commit section.

Your code is now ready to be pushed. Select **Push** to update the branch with your latest changes.

Your local changes are now in sync with the remote changes.


# Workflows
Source: https://docs.replit.com/replit-workspace/workflows

A Workflow is a easily configurable 'Run' button that can run any command(s) you'd like.

It is a reusable, customizable sequence of steps that can be executed within your replit app. They can be as simple as running `python main.py` or as complex as executing a multi-step procedure.

Example Use Cases:

* Run multiple services in parallel (e.g., frontend + backend)
* Execute files or commands sequentially (e.g., run linter → run tests, compile → execute code)

To start [creating workflows](#creating-workflows), go to the Workflows pane by using the tools sidebar menu, or search for the Workflows pane using `Command + K`.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/workflows/workflows-pane.png" alt="image" />
</Frame>

## Available Task Types

There are current 3 type of tasks available, `Execute Shell Command`, `Install Packages`, and `Run Workflow`.

### Execute Shell Command

`Execute Shell Command` stores a shell command and executes it using the same environment as the Shell pane. This task type offers a wide range of use-cases, from running individual files:

```text
python main.py
```

to executing complex stored database query commands:

```text
psql -h 0.0.0.0 -U your_username -d your_database -c "SELECT * FROM your_table;"
```

Example use case:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/workflows/shellExec-task-example.gif" alt="image" />
</Frame>

### Install Packages

`Install Packages` utilizes Replit's built-in dependency management system, automatically detecting your project dependencies and installing the necessary packages for your project. See [Dependency Management](../replit-workspace/dependency-management.md#the-universal-package-manager) for more details on how UPM guesses packages to install for your project under the hood.

Example use case:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/workflows/packager-task-example.webp" alt="image" />
</Frame>

### Run Workflow

`Run Workflow` allows you to run another workflow from the current workflow. This allows for reusing workflows and combining them to create more complex workflows.

Example use case:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/workflows/example-run-workflow.webp" alt="image" />
</Frame>

By using this task type for creating dependencies between workflows, you can edit one workflow and have other workflows referencing it automatically use the latest changes. Note that there is a depth limit placed on deeply nested workflow calls.

## Workflow Execution Mode

Workflows offer two different modes of execution: sequential and parallel.

### Sequential

Sequential execution will run each task in the defined order, waiting for each task to finish before moving on to the next step, and stopping execution of the sequence if a task within the workflow failed.

An example of using this mode is for defining commands that are logically connected, such as git commands for fetching the latest changes from your main branch, then rebasing your current branch on the main branch:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/workflows/example-sequential-workflow.png" alt="image" />
</Frame>

### Parallel

Parallel execution will run each task in parallel, such that each task is started and runs independently of other tasks within the workflow. One task failing does not stop the execution of other tasks.

An example of using this mode is running a fullstack project that needs to start both the frontend and the backend server:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/workflows/example-parallel-workflow.png" alt="image" />
</Frame>

## Creating Workflows

Workflows can be created using the workflows pane by clicking on the `+ New Workflow` button. Start by giving your workflow a descriptive name, chose a suitable mode of execution, and start adding tasks. Tasks can be re-ordered by dragging and dropping them into the desired order.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/workflows/example-workflow-setup.webp" alt="image" />
</Frame>

## Assign Workflow to Run Button

A workflow can also be assigned to the run button to replace the default run button behavior (see [Configure a Replit App](/replit-app/configuration)). To keep the default run command configured within `.replit`, select the default "Run Replit App" option within the dropdown.

The selected workflow within the dropdown menu next to the run button will be run when the run button is clicked. Click on your desired workflow within the dropdown menu to change which workflow should be run by the run button.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/workflows/configure-run-button-workflow.gif" alt="image" />
</Frame>

## Viewing Workflow Outputs

Workflow outputs will be displayed in the `Console` pane. You can toggle the display to only display latest outputs and clear the console altogether.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/workflows/workflow-output-view.gif" alt="image" />
</Frame>


# Console & Shell
Source: https://docs.replit.com/replit-workspace/workspace-features/console-shell

Every Replit App has both a Console and a Shell.

The console shows the output your Replit App when it is run while the shell allows you to execute any bash command at any time within your Replit App.

## Stop a process

To stop a process in the Shell or the Console, use the `CTRL+C` shortcut on your keyboard. Performing this action in the Console will stop the Replit App and performing it in the Shell will stop the current process running in the particular Shell tab.

## Searching

When either the Console or the Shell is focused, you will see a search button.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/programming-ide/console-shell-search.png" alt="Search" />
</Frame>

Once you start searching, you will see an input and three options.

1. Enter a search term in the input
2. Hit "Next" to jump to the next match
3. Hit "Back" to jump to the previous match
4. Hit "Exit" to exit Search mode

## Clear the Console/Shell

To clear all the existing content on either the console or the shell, hit the Trash icon in the top-right corner of either one. Alternatively, you can run the `clear` command if you are using the Shell.

## Multiple Shell instances

You can open up any number of Shell instances in a Replit App, but only one console. The console will only ever show the output of the Replit App in realtime.

You can open up multiple Shell instances by opening a new tab and selecting the Shell tool multiple times, or by dragging the Shell tool from the Tools section of the sidebar into multiple different areas.

## FAQs

### Why is my JavaScript output not showing?

Ensure that your Replit App is in NodeJS and not HTML/CSS/JS. To see the javascript output in an HTML/CSS/JS Replit App, you will need to use the [Devtools](/replit-workspace/workspace-features/webview) instead.

### Why is my app in recovery mode?

You may see an error such as:

```
The nix environment failed to build. Check if your replit.nix is configured properly. For more information look into /run/replit/env/error.
```

This happens when the app's environment fails to build, often because of misconfiguration in `.replit` or `replit.nix`. For more information on the cause, run `cat /run/replit/env/error` in the Shell.

If the error is something along the lines of `couldn't get nix env building nix env: exit status 1`, this means either something is misconfigured in `replit.nix`, or your Nix packages are corrupted and need to be reset.

To reset, press on the resources button, press "Additional usage", and then select "Delete Nix packages".

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/misc/delete-nix.png" alt="Delete Nix packages" />
</Frame>


# Expandable Storage
Source: https://docs.replit.com/replit-workspace/workspace-features/expandable-storage

Expandable Storage provides you with account-wide storage, where your Replit App can take up as much space as you have on your account. This is great for storing large amounts of data.

## Viewing Your Storage Usage

To monitor your storage usage, visit the usage page at [https://replit.com/usage](https://replit.com/usage). You'll see your current storage quota and the amount you've used.

## Storage Quota Based On Plan

Your storage quotas are determined by your chosen subscription plan:

* **Free:** 10GiB
* **Replit Core:** 50GiB

Visit our [pricing page](https://replit.com/pricing) to learn about each plan's features.

<summary>
  Previous 1GiB storage limitation is no longer enforced.

  <details>
    Storage limits are now account-wide. Each Replit App can use any amount of your available account storage without the previous 1GiB restriction.
  </details>
</summary>

## What If I Go Over My Storage Limit?

If you are a Replit Core member you will be charged based on the amount of excess storage you use during the billing period.

If you are a Starter plan user, you will have to upgrade to [Replit Core](https://replit.com/replit-core) to use additional storage.

Upgrading your plan increases your account-wide storage limit, providing more storage for your Replit App.

## Managing Storage

If you've reached your storage limit, consider upgrading your plan as described above, or free up space by deleting files from your Replit App or removing individual Replit App.

## Scratch Disk

Every Replit App also has a separate filesystem attached to it called the Scratch Disk. Scratch Disk storage is temporary storage used for package installation or to store temporary files. It is reset regularly.

Every Replit App has a base Scratch Disk quota of 2 GiB, though using space beyond that will consume account storage while you're using the Replit App.


# File History
Source: https://docs.replit.com/replit-workspace/workspace-features/file-history

To make sure you never lose any of your work, Replit auto-saves your code as you write. If you ever lose an edit to your code that you'd like to recover, rewind back in time with File History.

Get started by opening a text file in the Workspace and pressing the **History** button in the bottom-right corner.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/programming-ide/history-button.png" alt="opening history" />
</Frame>

## Viewing previous versions of a file

Once you've opened up File History, you can view previous versions of a file by using the scroll bar, the arrow buttons, or the **left** and **right** arrow keys.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/animations/history-versioning.gif" alt="scroll bar demo" />
</Frame>

## Comparing previous versions to the current file

Press the Compare Latest toggle in the bottom left hand of the File History pane to see in-line comparisons of your file at that point in time and the latest version.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/animations/compare-history.gif" alt="compare latest image" />
</Frame>

## Restoring a previous version of a file

If you want to restore a file to a previous version, just press the `Restore` button, which will restore. Don't worry, you won't erase any history. When you restore to a previous version, it is added as a new version to the file's history.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/animations/restore-history.webp" alt="restore history image" />
</Frame>

## Viewing File History playback

You can use the playback feature of File History to watch your file change over time like a movie. This can be useful for creating videos of your programming sessions.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/animations/history-replay.webp" alt="replay history video" />
</Frame>


# Inline Threads
Source: https://docs.replit.com/replit-workspace/workspace-features/inline-threads

Learn how to use Inline Threads to collaborate and discuss code directly within your Replit workspace with team members and collaborators.

# Inline Threads

With Inline Threads, you can make comments and discuss topics with collaborators directly in your code.

<iframe src="https://www.loom.com/embed/5135855b46244145abd7a2c1531d9606?sid=b584652c-4dad-452b-9e10-e3cadcf72f17" width="100%" height="400" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen />

## Threads

To create a thread, highlight some code, right-click it, and hit **Start Thread**. Next, start off the conversation by sending the first message.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/animations/thread-preview.gif" alt="creating a thread" />
</Frame>

Open a thread by clicking on the chat icon in a code file. Type in the text box and hit the **Enter** key to send a message.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/animations/commenting-in-threads.gif" alt="commenting in a thread" />
</Frame>

## The Thread Inbox

To open the Thread inbox, enter a multiplayer or team Replit App, open the Tools section on the sidebar, and hit **Threads**.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/animations/open-thread-inbox.webp" alt="open the threads inbox" />
</Frame>


# Multiplayer
Source: https://docs.replit.com/replit-workspace/workspace-features/multiplayer

Learn how to code in real-time with others using Replit's multiplayer features, including observation mode, chat, and inline threads.

# Multiplayer

Multiplayer in Replit allows two or more users to code together in real-time.

<iframe src="https://www.loom.com/embed/2415fb8aaf9a468c9c355cefe1c080f1?sid=83121fb3-20e1-4912-b5aa-6007b24286fa" width="100%" height="400" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen />

## Invite someone to Multiplayer

Hit the **Invite** button in the top-right corner of the Workspace, and add someone by their username or email. Alternatively, you can generate an join link and send it to the person you want to invite.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/animations/invite-multiplayer.webp" alt="inviting a multiplayer" />
</Frame>

To remove someone from your Replit App, hit the **Invite** button in the top-right corner and click the **X** button beside the user's name.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/programming-ide/remove-member.png" alt="removing a multiplayer" />
</Frame>

## Observation Mode

Observation mode enables you to view what someone else in your Replit App is doing and follows them around as they code and switch to different files.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/animations/observation.webp" alt="observation mode" />
</Frame>

## Threads & Chat

[Inline Threads](/replit-workspace/workspace-features/inline-threads) and Chat allow you to communicate both synchronously and asynchronously with others in Multiplayer.

To start talking with collaborators in your Replit App, open the Chat pane from the Tools section of the sidebar.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/animations/open-chat.webp" alt="open the chat" />
</Frame>

Threads provide you with the ability to make comments and discuss topics directly in the code.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/animations/thread-preview.gif" alt="thread preview functionality" />
</Frame>

For more information on how threads work and how to use them to their full extent, check out the corresponding [documentation](/replit-workspace/workspace-features/inline-threads).


# Preferences
Source: https://docs.replit.com/replit-workspace/workspace-features/preferences

Configure your Replit workspace with custom settings for layout, editor behavior, keyboard shortcuts, and accessibility options to optimize your coding experience.

You can customize your coding experience by opening up the Settings tool in the Tools section.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/programming-ide/tools-settings.png" alt="Settings" />
</Frame>

## General

### Default layout

The initial layout of the workspace when you enter a new Replit App.

### Font size

The font size of the code editor.

### Indent type

Whether your code uses tabs or spaces for indentation.

### Indent size

The number of tabs/spaces each indentation level consists of.

### Wrapping

Determines whether your code should wrap or scroll horizontally within the editor.

### Keybinds

The type of keybinds you use while coding. Options include **default**, **emacs**, and **vim**.

### Multiselect modifier key

The modifier key used for selecting multiple items in the filetree.\\

### Automatically open Webview when a port is open

Determines whether the Webview tool should open whenever your Replit App serves an HTTP webserver on any port.

### Theme

Allows you to control the site-wide [theme](../themes/explore).

### Code intelligence

Determines whether autocomplete/suggestions/intellisense should be enabled.

### Replit AI Complete Code

Determines whether Replit AI's Complete Code feature should be enabled. Exclusive to Replit AI subscribers.

## Accessibility

### Accessible Terminal Output

Allows screen readers to access the contents of the Shell and the Console. If enabled, this setting has the
potential to negatively affect performance.

## Keyboard Shortcuts

Allows you to customize keybinds for specific functions in the workspace.

### Toggle sidebar

Opens or closes the sidebar

### Toggle Commandbar

Opens or closes the command bar

### Toggle pane context menu

Opens or closes the options for the currently-focused Workspace Pane.

### Switch to next tab

Switches you to the next Tab in the currently-focused Pane.

### Switch to previous tab

Switches you to the previous Tab in the currently-focused Pane.

### New tab

Creates a new empty Tab.

### Close tab

Closes the currently-focused Tab.

### Find file

Opens up a file search.

### Search file contents

Opens up a tool to search contents across all files with a single text query.

### Run Replit App

Runs the Replit App.

### See multiplayers

Shows all multiplayers in the Replit App.

### Show shell

Switches focus to the shell if it exists as a tab in the workspace. If no shell tab is exists in the workspace, opens and focuses a new one.

### Show console

Switches focus to the console if it exists as a tab in the workspace. If no console tab exists in the workspace, opens and focuses a new one.

### Show docs

Switches focus to the Replit documentation if it exists as a tab in the workspace. If no docs tab exists in the workspace, opens and focuses a new one.

### Show Replit AI

Switches focus to Replit AI Chat if it exists as a tab in the workspace. If no Replit AI Chat tab exists in the workspace, opens and focuses a new one.

### Show settings

Switches focus to settings if it exists as a tab in the workspcae. If no settings tab exists in the workspace, opens and focuses a new one.

### Show git

Switches focus to the Git tool if it exists as a tab in the workspace. If no Git tab exists in the workspace, opens and focuses a new one.

### Toggle float group

Toggles whether the currently-focused Pane is floating or not.

### Toggle maximize group

Toggles whether the currently-focused Pane is maximized or not.

### Close group

Closes the currently-focused Pane, including all files in tools located in it.

### Close other tabs in group

Closes all other Tabs in the currently-focused Pane, except for the currently-focused one

### Insert group above

Inserts and focuses a Pane above the currently-focused Pane.

### Insert group right

Inserts and focuses a Pane to the right of the currently-focused Pane.

### Insert group left

Inserts and focuses a Pane to the left of the currently-focused Pane.

### Insert group below

Inserts and focuses a Pane below the currently-focused Pane.

### Move tab into group above

Moves the currently-focused Tab into the Pane located above the currently-focused Pane.

### Move tab into group left

Moves the currently-focused Tab into the Pane located to the left of the currently-focused Pane.

### Move tab into group right

Moves the currently-focused Tab into the Pane located to the right of the currently-focused Pane.

### Move tab into group below

Moves the currently-focused Tab into the Pane located below the currently-focused Pane.

### Move focus to group above

Switches focus from the currently-focused Tool or File to the open Tool or File in the Pane located above.

### Move focus to group left

Switches focus from the currently-focused Tool or File to the open Tool or File in the Pane located to the left.

### Move focus to group right

Switches focus from the currently-focused Tool or File to the open Tool or File in the Pane located to the right.

### Move focus to group below

Switches focus from the currently-focused Tool or File to the open Tool or File in the Pane located below.

### Move cursor left

Moves the cursor position one character to the left.

### Move cursor left across one group

Moves the cursor position one keyword to the left.

### Move selection left

Moves the current selection left by one character.

### Move selection left across one group

Moves the current selection left by one keyword.

### Move cursor right

Moves the cursor position one character to the right.

### Move cursor right across one group

Moves the cursor position one keyword to the right.

### Move selection right

Moves the current selection right by one character.

### Move selection right across one group

Moves the current selection right by one keyword.

### Move cursor up

Moves the cursor up by one line.

### Move cursor down

Moves the cursor down by one line.

### Move selection up

Moves the current selection up by one line.

### Move selection down

Moves the current selection down by one line.

### Go to line

Opens and focuses an input. Upon confirmation, jumps you to the specified line.

### Select next selection occurrence

Selects the next occurrence of a matched term in a search operation.

### Select all selection matches

Selects all occurrences of a matched term in a search operation.

### Fold all

Folds all code blocks in the current file.

### Unfold all

Unfolds all code blocks in the current file.

### Add line comment

Adds a line comment in the current file, in the current file's language.

### Remove line comment

Removes the line comment on the current line of the current file.


# Replit App Resources
Source: https://docs.replit.com/replit-workspace/workspace-features/resources-panel

Monitor and manage RAM, CPU, and storage usage for your Replit App through the resources panel to ensure optimal performance and efficiency.

You can find the current resource usage of your Replit App in the workspace header. This includes the amount of **RAM**, **CPU**, and **Storage** currently being used by your Replit App to run your code, the LSP, and other background services.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/programming-ide/repl-resources/resources.png" alt="opening the Resources panel" />
</Frame>

## Why Monitor Replit App Resources?

It's important to monitor your resource usage to ensure that your Replit App has enough resources to run smoothly. If you notice that your resource usage is consistently high, it may make sense to use a Boost to increase the resources your Replit App can use, or make changes to your code so your program uses less resources.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/programming-ide/repl-resources/near-limit.png" alt="Resources panel when near limit" />
</Frame>

## High Resource Usage

If your Replit App's performance is suffering due to high resource usage, try optimizing your code for better efficiency by adjusting your computational approach.


# Secrets
Source: https://docs.replit.com/replit-workspace/workspace-features/secrets

In the world of software development, safeguarding sensitive information is critical. Whether you're dealing with API keys, authentication tokens, or other confidential data, **secrets** play an important role in maintaining application security. In this article, you'll learn how to add and manage your secrets and how Replit handles secrets in a collaborative environment.

## What are Secrets?

**Secrets** are encrypted variables you can store within your Replit App to keep sensitive information safe. With APIs, databases, or other external services, secrets allow you to securely pass authentication credentials without exposing them directly in your code.

Login to [Replit](https://replit.com) and create a Replit App or open an existing one. In your workspace, navigate to the **Tools** pane and select **Secrets**, or in any pane, you can select the **+** and type **Secrets**. Now, you can create, edit, and manage your secrets here.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/programming-ide/workspace-features/tools-secrets.png" alt="secrets icon" />
</Frame>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/programming-ide/workspace-features/add-secrets-tab.png" alt="secrets icon" />
</Frame>

## Encryption of Secrets

This section helps you understand how secrets are encrypted in Replit.

* Secrets data is encrypted with AES-256 at rest, and encryption keys are stored in a secure location that is protected by multiple layers of security.
* To help protect against key compromise, encryption keys are rotated regularly.
* Data in transit is encrypted using TLS. These measures safeguard your Secrets against breaches and vulnerabilities to ensure secure storage and protection.

## Manage Secrets

This section helps you add new secrets, edit existing secrets, and access your secrets in your code. In your Replit App workspace, navigate to the **Tools** pane and select **Secrets**.

### Add Secrets

Use the **+ New Secret** button to add new Secrets to your Replit App. You can add the **Secret Key**, and **Value** of your choice and select **Add Secret**.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/programming-ide/workspace-features/create-secret.png" alt="secrets tab" />
</Frame>

### Edit Secrets

While you're on the Secrets tab, you can edit your secrets in two ways:

* **Using the Ellipsis**: Select the three dots next to the secret you want to change. Then, choose **Edit** to update the key or value.
* **Edit as JSON**: Select the **Edit as JSON** button at the top of the Secrets tab. This lets you edit multiple secrets at once. Once you're done, select **Save**.

<Note>
  If you don't see your secrets updated in your Replit App, try reloading the page to ensure they appear.
</Note>

### Accessing Secrets

**Secrets** are accessed in your code as [Environment Variables](https://en.wikipedia.org/wiki/Environment_variable). Here are some examples of widely used programming languages:

### Python

```python
import os
print(os.getenv("MY_SECRET"))
```

### JavaScript

```javascript
console.log(process.env.MY_SECRET);
```

### Java

```java
System.out.println(System.getenv("MY_SECRET"))
```

<Warning>
  The `HTML/CSS/JS` Replit App don't have Secrets since they are [statically hosted](https://blog.hubspot.com/website/static-vs-dynamic-website).
</Warning>

## Handling Secrets in a collaborative environment

This section helps you understand how secrets work when you're collaborating with others. Here's what you need to know:

### Collaborators

If you invite a collaborator using a Join link, the collaborator will be able to see your Secret keys and also its values. This makes it easier for everyone to work together and share information.

If a member of your Organization joins your Replit App as a collaborator, they will be able to see the secret values if they have the `Owner` role on the Replit App. If they are not an `Owner`, the secret values will be hidden. While they are hidden from the UI, secrets are implemented as environment variables, so they are still accessible via commands.

### Cover page visibility

Secrets are kept hidden on the Replit App's cover page to protect your privacy and keep your information safe—only people you trust and give permission to can access and manage secrets within the Replit App.

### Fork from the cover page

When you fork a Replit App from the cover page, you'll see the keys of the secrets but not their values.

### Fork a Replit App

When you fork a Replit App that you own or are a collaborator on, you'll see the secret keys and values copied to the new Replit App.

When you fork a Replit App that you are not an owner or collaborator of, you'll receive the secret keys but not their corresponding values from the original Replit App.

When you remix a Replit App in your Organization, if you have the `Owner` role, you'll receive the secret keys and values. If you do not have the `Owner` role, you'll receive the secret keys but not their corresponding values from the original Replit App.


# The Webview
Source: https://docs.replit.com/replit-workspace/workspace-features/webview

Learn how to preview and debug web applications using Replit's Webview tool, including developer tools, domain linking, and troubleshooting common issues.

The Webview is a specialized Tool for previewing and debugging your web application.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/programming-ide/webview.png" alt="Webview" />
</Frame>

By default, when your Replit App exposes an HTTP server, Webview automatically opens. If you don't want this intrusive behavior, there is a setting to [turn it off](/replit-workspace/workspace-features/preferences).

## Developer tools

Click on the Wrench icon to open the developer tools in Webview. The developer tools will allow you to see console logs, inspect elements, view network requests, and more.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/programming-ide/webview-devtools.png" alt="image of the Developer tools" />
</Frame>

## FAQs

### Why can't I edit the URL in Webview?

The URL shown in Webview is read-only and points to the root route of your Replit App's web output through the [`<iframe>`](https://developer.mozilla.org/en-US/Web/HTML/Element/iframe) HTML element. To test a different route, click the button on the far right to open your project's web output in a new browser tab.

### What's the difference between the Webview and an [Extension](../extensions)?

The Webview is a normal iframe whereas an Extension establishes a special handshake with the Replit workspace. Read more [here](https:/.replit.com/extensions/faq).


# Replit Agent
Source: https://docs.replit.com/replitai/agent

Replit Agent uses AI to set up and create apps from scratch. Describe your app in everyday language, and it can set up and create your Replit App in minutes.

export const AgentModelV2 = 'Claude 3.7 Sonnet';

export const AgentModelV1 = 'Claude 3.5 Sonnet';

export const TeamsCredits = '$40';

export const CoreCredits = '$25';

export const AssistantCheckpointCost = '$0.05';

export const AgentCheckpointCost = '$0.25';

Agent uses powerful AI technology to transform your ideas into applications
and seamlessly add new features by describing what you want.

<Note>
  **Agent v2**, now in early access preview, offers the following improvements:

  * Improved ability to identify necessary changes before making them
  * Less likely to get stuck in a loop when addressing a bug
  * Improved process for creating high-quality user interfaces, including displaying previews at an earlier stage

  To use Agent v2, you must be a Core or Teams user and enable the Explorer role in your <a href="https://replit.com/account#roles" target="_blank">Account settings</a>.
</Note>

<Frame>
  <iframe src="https://www.youtube.com/embed/IYiVPrxY8-Y?si" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen />
</Frame>

## Features

<Info>
  Agent uses several industry-leading AI models to create your apps. The core technology uses the following models:

  * **Agent v1**: {AgentModelV1}
  * **Agent v2**: {AgentModelV2}
</Info>

Chat with Agent in your Replit App to receive the following support:

* Create full-stack apps from scratch
* Add advanced features and integrate complex APIs
* Design, create, and modify database structures
* Streamline environment setup and dependency management

## Usage

<Note>
  Agent is available only in Replit Apps created from an Agent prompt.
</Note>

You can access Agent in your Replit App workspace by selecting the Agent tool.

<Accordion title="How to access Agent">
  From the **Create a new App** screen, select the **Replit Agent** tab to enter a description of the app you want as shown in the following animation:

  <Frame>
    <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/replitai/agent-start-building.avif" alt="animation showing Agent in the Create a new App screen" />
  </Frame>

  If viewing a Replit App started by Agent, you can locate the Agent tool in your workspace in one of the following locations:

  From the left tool dock, select <img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/replitai/agent_icon.svg" alt="Agent icon" /> **Agent** as shown
  in the following animation:

  <Frame>
    <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/replitai/agent-from-dock.avif" alt="animation showing Agent selection from the dock" />
  </Frame>

  From the **Search bar**:

  1. Select the <img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/shared/workspace-search-icon.svg" alt="magnifying glass icon" /> magnifying glass at the top to open the search tool
  2. Type "Agent" to locate the Agent tool and select it from the results
</Accordion>

From the Agent tool, you can perform the following actions:

* **Chat**: Describe your app or feature in the text area and respond to Agent's follow-up questions
* **Add detailed requests**: Upload files or import content from URLs to give Agent more information
* **Manage conversations**: Select **New chat** or select previous conversations from the <img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/shared/manage-chats-menu.svg" alt="menu icon" /> menu icon to start or resume a conversation
* **Track usage**: Select the <img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/shared/usage-icon.svg" alt="usage icon" /> usage icon at the top right to view your billing page
* **Reverse changes**: Undo changes made by Agent by selecting <img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/shared/rollback-icon.svg" alt="rollback icon" /> **Rollback to here**

### Chat prompts

<img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/replitai/agent-text-area.webp" alt="Agent text area" />

To communicate your request to Agent, enter a **prompt** in the text area.
A prompt is a natural language instruction that describes the task you want Agent to perform.

In addition to text, you can include the following data in your prompt:

* **File attachments**: Drag a file into the text area or select the
  <img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/shared/paperclip-icon.svg" alt="Paperclip icon" /> paperclip icon
* **Web content**: Include text data from a webpage by entering a URL and selecting **Copy page content**
* **Webpage screenshots**: Include a screenshot of a webpage by entering a URL and selecting **Take screenshot**

<Tip>
  When you select **Take screenshot**, Agent captures only the top of the webpage. If you must capture a different part,
  use a screenshot tool to capture the content and attach the image or images.
</Tip>

You can access attachments from your prompts by opening the
<img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/shared/files-icon.svg" alt="Files tab icon" /> **Files** tab
and navigating to the `attached_assets` directory.

You can also perform the following actions in the Agent prompt area:

* **Prompt refinement**: Let AI add detail to your first prompt by selecting <img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/shared/improve-prompt.svg" alt="Improve prompt icon" /> **Improve prompt**
* **Feedback**: After Agent finishes processing a prompt, you can select **Have feedback?** to send feedback to Replit
* **Pause**: Stop Agent by selecting <Icon icon="pause" color="black" iconType="sharp-solid" /> **Pause** above the text area

<Tip>
  Your feedback helps Replit improve Agent. Use the feedback link to report issues, suggest improvements, or share your experience.
</Tip>

### Checkpoints

<img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/replitai/agent-checkpoint.webp" alt="Agent checkpoint" />

A **checkpoint** is a saved snapshot of the state of your Replit App.
Agent automatically creates checkpoints at logical points while working on your request.
Complex tasks can generate multiple checkpoints.

Each checkpoint lets you perform the following actions:

* **Rollback**: Undo changes made by Agent and return to the state of the previous checkpoint.
* **Track usage**: Hover over the <img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/shared/usage-icon.svg" alt="usage icon" /> usage icon
  in a checkpoint to view the amount billed for that checkpoint.

When Agent receives your initial prompt to setup and create an app, it presents an implementation plan for your review.
Select **Approve plan & start** to let Agent start building your app.

<Note>
  Replit charges a fee for each checkpoint except when proposing initial plans.
  To learn more about pricing, see [Replit AI Billing](/billing/ai-billing#agent-billing).
</Note>

### Progress tab

<Accordion title="How to access the Progress tab">
  1. Select <img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/shared/workspace-all-tools-button.svg" alt="All tools icon" /> **All tools** in the dock on the left
  2. Select <img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/shared/progress-icon.svg" alt="Progress icon" /> **Progress**

  From the **Tools dock**, select **Progress** from the dock on the left.

  From the **Search bar**:

  1. Select the <img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/shared/workspace-search-icon.svg" alt="magnifying glass icon" /> magnifying glass at the top to open the search tool
  2. Type "Progress" to locate the Progress tool and select it from the results
</Accordion>

The **Progress** tab shows a record of Agent's actions. You can use it to view the following:

* **Real-time updates**: monitor Agent's progress and navigate directly to relevant files by selecting the <img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/shared/progress-link.svg" alt="link icon" /> link icon
* **Chronological history**: review Agent's activities to understand the details of the changes and troubleshoot issues when needed

The following animation shows the Progress tab in action:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/replitai/agent-from-dock.avif" alt="animation showing Agent in the dock" />
</Frame>


# Replit Assistant
Source: https://docs.replit.com/replitai/assistant

Replit Assistant uses AI to help you create and polish your app quickly. Type what you want in everyday language, and it can add new features or fix problems for you. Assistant can also analyze your code to explain what it does and suggest the next lines as you type.

export const AssistantAdvanced = 'Claude Sonnet 3.7';

export const AssistantBasic = 'GPT-4o mini';

export const TeamsCredits = '$40';

export const CoreCredits = '$25';

export const AssistantCheckpointCost = '$0.05';

export const AssistantEditRequestPrice = '$0.05';

Assistant uses powerful AI technology to understand your Replit App and make improvements.

<Frame>
  <iframe src="https://www.youtube.com/embed/1FBv1PhrCaA?si=qkbNp8KNOCK_h0V-" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen />
</Frame>

## Features

Assistant offers **Basic** and **Advanced** modes to help you build your app efficiently and according to your needs.

<Info>
  Assistant uses the following industry-leading AI models:

  * <Icon icon="bolt" /> **Basic**: {AssistantBasic}
  * <Icon icon="sparkle" /> **Advanced**: {AssistantAdvanced}
</Info>

### Basic mode

Chat with Assistant about your Replit App to receive the following support:

* Clear explanations of your code
* Intelligent autocomplete suggestions
* Recommendations to improve your app

This mode is completely free for all users.

### Advanced mode

Take your development to the next level with Assistant's ability to directly interact with and modify your Replit App.
In addition to Basic mode features, Advanced mode can perform the following actions:

* Update code automatically for adding features and fixing bugs
* Undo any of Assistant's changes in one click
* Install and set up packages to support added features
* Create and update Workflows
* Update your database structure

<Info>
  For your security, Assistant cannot access or modify data in Secrets, Replit's secrets manager.
</Info>

## Usage

You can use Assistant in any Replit App from your Replit workspace.
Access Assistant's AI-powered features from the Assistant tool or the File editor.

### Assistant tool

<Accordion title="How to access the Assistant tool">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/replitai/assistant-dock.avif" alt="animation showing selection of Assistant in the tools dock" />

  From the **Tools dock**:

  1. Select <img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/shared/workspace-all-tools-button.svg" alt="All tools icon" /> **All tools** in the dock on the left
  2. Select the <img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/shared/assistant-icon.svg" alt="Assistant icon" /> **Assistant** icon

  From the **Search bar**:

  1. Select the <img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/shared/workspace-search-icon.svg" alt="magnifying glass icon" /> magnifying glass at the top to open the search tool
  2. Type "Assistant" to locate the Assistant tool and select it from the results

  You should see a screen that resembles the following screenshot:

  <Frame>
    <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/replitai/assistant-tab.png" alt="image of the Assistant tool in a tab" />
  </Frame>
</Accordion>

From the Assistant tool, you can perform the following actions:

* **Chat**: Type your instructions or questions in the text area or select one of the pre-created prompts
* **Switch modes**: Select **Basic** or **Advanced** mode
* **Manage conversations**: Select **New chat** or select previous conversations from the <img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/shared/buttons/assistant-menu.svg" alt="menu icon" /> menu icon to start or resume a conversation
* **Track usage**: Select the <img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/shared/buttons/usage-icon.svg" alt="usage icon" /> usage icon to view your billing page
* **Customize settings**: Select the <img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/shared/buttons/assistant-gear-icon.svg" alt="gear icon" /> gear icon to configure Assistant settings
* **Reverse changes**: Select **Undo these changes** to roll back Assistant's modifications or select **Go to this checkpoint** to reset your code to that specific revision

To switch between **Basic** and **Advanced** mode, select the <Icon icon="angle-down" /> dropdown arrow and select the mode.

You should see a menu that resembles the following image:

<img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/replitai/assistant-mode-select.png" alt="Assistant mode selection dialog" />

#### Chat prompts

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/replitai/assistant-text-area.png" alt="Assistant tool text area" />
</Frame>

To communicate your request in the Assistant tool, enter a **prompt** in the text area.
A prompt is a natural language instruction that tells the Assistant what you need.
Assistant analyzes the files in your Replit App and your prompt to create its response.

In addition to the text prompt, you can include the following to add context:

* Attach a file by dragging it into the text area or by selecting the
  <img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/shared/paperclip-icon.svg" alt="Paperclip icon" />  paperclip icon
* Specify files from your Replit App related to your request by selecting **Add file context**.

While Assistant intelligently determines which files are relevant to your request,
identifying the files can help it create a more accurate solution.

#### Edit requests

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/replitai/assistant-edit-request.png" alt="Assistant edit request" />
</Frame>

In Advanced mode, Assistant creates **edit requests** when proposing changes to your Replit App.
Edit requests contain all the code and configuration modifications it intends to make.
These requests let Assistant perform the following actions:

* Display a preview of the proposed changes
* Let you review and approve the changes before applying them
* Automatically create a version control checkpoint for approved changes
* Undo changes or restore your project to a previous state

When Assistant suggests changes, select
<img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/shared/preview-code-changes.svg" alt="Preview code changes icon" /> **Preview code changes**
to view the proposed changes.

To approve the edit request, select **Apply all** to implement the changes.

<Note>
  Replit charges a fee for each approved edit request.

  To learn more about pricing, see [Replit AI Billing](/billing/ai-billing#assistant-billing).
</Note>

### File editor

<Accordion title="How to access the Assistant from the file editor">
  From the left tool dock:

  1. Select <img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/shared/workspace-all-tools-button.svg" alt="All tools icon" /> **All tools** in the dock on the left
  2. Select <img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/shared/buttons/files-folder-icon.svg" alt="Open files icon" /> **Open files**
  3. Select a file to view the contents in a file editor tab
  4. Select relevant lines of text in the file
  5. Either right-click the selected text to open a menu or select from the icons that appear at the top of the selected text

  The following image shows the **Explain with Assistant** and **Modify with Assistant** menu items:

  <Frame>
    <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/replitai/assistant-explain.jpg" alt="Explain with Assistant menu item" />
  </Frame>

  The following animation shows an example of using the **Modify with Assistant** function:

  <Frame>
    <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/replitai/assistant-select-modify.avif" alt="animation that shows usage of the Modify with Assistant function" />
  </Frame>
</Accordion>

When viewing content in the File editor, you can access the following Assistant-powered actions:

* **Get explanations**: Highlight the code and select the <img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/shared/buttons/assistant-explain-icon.svg" alt="Assistant explain icon" /> explain icon to receive a detailed breakdown.
* **Improve your code**: Highlight the code and select the <img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/shared/buttons/assistant-modify-icon.svg" alt="Assistant modify icon" /> modify icon to have Assistant improve or rewrite your code.
* **Fix errors**: Hover over squiggly underlined code, which indicates Assistant detects possible issues, and select "Debug with AI" to get fix suggestions. Request automatic changes or continue your conversation in the Assistant tool.

### Assistant settings

<Frame>
  <iframe src="https://www.youtube.com/embed/1qxOcsj1TAg?si=hNuLKAhGQuwpgnTo" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen />
</Frame>

<Accordion title="How to access the Assistant settings">
  To access settings, select the <img class="icon-svg" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/shared/buttons/assistant-gear-icon.svg" alt="gear icon" /> gear icon in the **Assistant** tab.

  You should see a screen that resembles the following screenshot:

  <Frame>
    <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/replitai/assistant-settings.png" alt="Assistant settings dialog" />
  </Frame>
</Accordion>

From the Assistant settings, you can set the following preferences:

* **Append instructions**: Add instructions automatically included in all your prompts
* **Select AI models**: Choose specific AI models to process your prompts
* **Streamline changes**: Skip the confirmation step for edit requests
* **Manage workflow restarts**: Control whether Assistant code modifications restart the workflow


# Agent integrations
Source: https://docs.replit.com/replitai/integrations

Agent supports numerous integrations that are enabled automatically when your prompt contains specific keywords.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/replitai/agent-logo.png" alt="Agent logo with integration connections illustrated around it" />
</Frame>

Agent comes with powerful built-in integrations that help you quickly build full-featured apps. These integrations activate automatically when your prompt includes keywords related to their functionality.

## Getting started with integrations

To use an integration in your Agent prompt, simply mention the service or functionality you need. For example:

```
Create a web app that uses Stripe to accept payments and Sendgrid to send confirmation emails
```

Agent will automatically detect these keywords and implement the necessary code to integrate these services into your application.

## AI services

<AccordionGroup>
  <Accordion title="OpenAI" icon="brain">
    Powers AI features using GPT models for text generation, content creation, summarization, and intelligent assistants within your application.
  </Accordion>

  <Accordion title="Anthropic" icon="robot">
    Incorporates Claude models (claude-3-7-sonnet-latest) for natural language understanding, content generation, and conversational interfaces.
  </Accordion>

  <Accordion title="xAI" icon="brain-circuit">
    Incorporates advanced AI models to power intelligent features like content generation and personalized recommendations.
  </Accordion>

  <Accordion title="Perplexity" icon="magnifying-glass">
    Integrates AI-powered search and answer generation, allowing users to ask questions and receive comprehensive, citation-backed responses.
  </Accordion>
</AccordionGroup>

## Authentication, security, and payment

<AccordionGroup>
  <Accordion title="Replit Auth" icon="key">
    Replit Auth allows users to sign into your app using their Replit Account credentials.  This integrates natively with Replit and is the fastest and simplest way to add Auth to your Replit apps.
  </Accordion>

  <Accordion title="Firebase Auth" icon="lock">
    Provides authentication supporting email/password login, social media authentication, and secure user management with ready-made UI components.
  </Accordion>

  <Accordion title="Google OAuth" icon="google">
    Enables quick and secure single sign-on using Google accounts.
  </Accordion>

  <Accordion title="Stripe" icon="stripe">
    Handles secure payment processing, subscriptions, invoicing, and complex billing scenarios with comprehensive transaction reporting.
  </Accordion>
</AccordionGroup>

## Communication, notifications, & messaging

<AccordionGroup>
  <Accordion title="Sendgrid" icon="envelope">
    Sends transactional emails, marketing campaigns, and automated notifications to users.
  </Accordion>

  <Accordion title="Slack" icon="slack">
    Enables real-time notifications and alerts from your app directly to team channels for instant communication.
  </Accordion>

  <Accordion title="Twilio" icon="mobile">
    Enables SMS notifications, verification codes, alerts, and two-factor authentication through text messaging.
  </Accordion>

  <Accordion title="Telegram" icon="telegram">
    Sends notifications and messages to users through Telegram's messaging platform.
  </Accordion>
</AccordionGroup>

## Data storage & management

<AccordionGroup>
  <Accordion title="Database" icon="database">
    Provides a robust, scalable relational database built into Agent for storing structured data with support for queries, transactions, and data relationships.
  </Accordion>

  <Accordion title="Airtable" icon="table">
    Connects your app to Airtable for organizing and displaying structured content.
  </Accordion>
</AccordionGroup>

## Workspace integrations

<AccordionGroup>
  <Accordion title="Google Calendar" icon="calendar">
    Allows users to view, create, and manage events and schedules directly from your app.
  </Accordion>

  <Accordion title="Google Drive" icon="google-drive">
    Provides access to cloud storage for files with options to upload and download documents within your app.
  </Accordion>

  <Accordion title="Google Sheets" icon="table-cells">
    Integrates spreadsheet functionality for data tracking, calculations, and visualizations.
  </Accordion>

  <Accordion title="Dropbox" icon="dropbox">
    Enables file storage, sharing, and syncing capabilities within your application.
  </Accordion>
</AccordionGroup>


# Collaboration on Replit
Source: https://docs.replit.com/teams/collaboration-on-replit

Learn how to transfer personal and Legacy Teams Replit Apps to your Organization using the CLUI tool, with steps to ensure a smooth transition.

## Transferring Replit Apps to Organizations

You can transfer personal and Legacy Teams Replit Apps to your Organization using the CLUI tool.

<Note>
  * Transferring a Replit App to an Organization is irreversible.
  * If your Replit App is deployed you should experience zero downtime, the deployed service will not change, and the URLs to your deployment will not change.
</Note>

You will only be able to transfer the Replit App if:

* you have permission to **view** and **delete** the Replit App
* you have permission to **create** Replit Apps in the target Organization
* you have permission to **deploy** Replit Apps in the target Organization

### Steps

* Get your Organization ID by visiting your Org's profile settings page:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/teams/finding-org-id.png" alt="Finding Org ID" />
</Frame>

* Copy the URL(s) of the Replit App(s) you want to transfer.
* Go to the [`org transfer-repls`](https://replit.com/~/cli/org/transfer-repls) CLUI tool.
* Provide the Organization ID and Replit App(s) (space separated) and submit the request.
* The output will indicate whether the transfer was successful. Visit your Organization homepage, Replit App and Deployments to verify the transfer. You might need to refresh the page for it to update.

Occasionally, a Replit App might fail to redeploy. This will not cause downtime for your deployment. You can rerun the transfer on the Replit App again or redeploy from the Deployments pane.

Contact us at [support@replit.com](mailto:support@replit.com) with any questions or concerns.


# Groups and Permissions
Source: https://docs.replit.com/teams/identity-and-access-management/groups-and-permissions

Groups are a way to organize team members and control what permissions they have inside of the organization. There are two types of groups available in Replit Teams: default groups and custom groups.

## Group types

The default groups are Admins, Members, and Guests. Every member of the organization belongs to one (and only one) of these three groups. The permissions available to these groups can be configured, but they are generally laid out where:

* **Admins** are the most privileged users and have access to every action available inside of Replit Teams.
* **Members** are able to edit Replit Apps and interact with other resources, but do not have access to sensitive actions like deleting the organization or editing billing information.
* **Guests** have the lowest level of access and cannot see much information about other members of the organization. This group is useful for managing external contractors or using Replit Teams for interviewing.

If finer-grained access control is required, custom groups can be created to grant additional privileges to specific sets of users.

The list of groups is available under the “Groups” option in the sidebar. Users will only see groups to which they have at least viewer access. Default groups are displayed at the top, and custom groups (if any) underneath. Each group card shows the name of the group, an icon with its color, and the number of group members.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/teams/identity-and-access-management/groups-view.png" alt="Viewing groups" />
</Frame>

## Creating a custom group

Users with at least manager access to the organization can create new custom groups. From the groups page, click the Add button in the top right corner. This will open a modal with the information needed to create the group. The group name is the only required field for Admins. Non-admins will need to select another group to which they have access that will act as an owner on their behalf.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/teams/identity-and-access-management/creating-a-custom-group.png" alt="Creating a custom group" />
</Frame>

After creating the group, the group details view will load. From here, members may be added to the group and the group permissions updated.

## Managing a group

The details of a group are accessed by clicking on the group card. There are three sections under the group details: members, permissions, and settings.

### Members

The members screen shows a list of the group members, and has functionality for adding or removing members, if the current user is permitted to do so. It is also possible to remove members from the organization.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/teams/identity-and-access-management/group-members-view.png" alt="View group members" />
</Frame>

#### Adding a group member

To add a member to the group, click the “Add” button in the top right corner. This action may be disabled if person being added is not part of the organization and there are not enough seats available.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/teams/identity-and-access-management/adding-a-group-member.png" alt="Adding a group member" />
</Frame>

New members can be searched for by username, or by email. If the new member is not part of the organization, a warning appears.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/teams/identity-and-access-management/non-member-warning.png" alt="Non-member warning" />
</Frame>

After adding the new member, they will appear in the list of group members and are immediately granted access to Replit Apps and other resources available to the group.

#### Removing a group member

To remove a group member, click the trash can on the right side of the member row, or open the actions menu using the triple dot button and select “Remove from group”. This will open a modal requesting confirmation of the action. Group removal behaves a little differently between default and custom groups.

For default groups, since organization members must belong to one default group, the options are to move the member to another default group, or remove them from the organization. Removing members from the organization is immediate. They will lose access to any Replit Apps that they created or had access to as part of the organization.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/teams/identity-and-access-management/removing-a-group-member.png" alt="Removing a group member" />
</Frame>

For custom groups, the member does not need to be transferred to another group and may simply be removed.

### Permissions

The group permissions section supports viewing and managing the actions that group members may take on specific resources. There are three sections: the organization, groups, and Replit Apps. The permissions available to default groups are specific to that group type, while custom groups have more flexibility over the permissions granted.

#### Organization permissions

Permissions at the organization level allow members to perform general actions that aren’t tied to a specific resource like a Replit App.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/teams/identity-and-access-management/organization-permissions.png" alt="Organization permissions" />
</Frame>

The roles are progressive, e.g. editors can do everything that viewers can do. There are five organization roles:

* **Viewers** can see basic information about the existence of the organization, including its name. Users with this level of access cannot create new Replit Apps.
* **Editors** can create new Replit Apps and Object Storage buckets, and see information about usage. They can also use advanced AI features and SSH.
* **Managers** are able to create and manage groups, add members to the organization when seats are available, remove members from the organization, and view information related to billing.
* **Billing managers** are able to update the organization’s billing information, including adding seats to or removing seats from the plan, and editing the payment method or billing email.
* **Owners** are members of the Admins group. They are able to perform all actions on the organization, including deletion of the organization itself.

The organization role available to a user depends on the group type to which the user belongs. Custom group permissions are additive. For example, a Guest who is a member of a custom group with “Manager” access will grant them those permissions. Granting a custom group “Viewer” access where one member is an Admin will have no impact for that user.

| Role            | Admins  | Members   | Guests    | Custom    |
| --------------- | ------- | --------- | --------- | --------- |
| Viewer          |         | Available | Default   | Default   |
| Editor          |         | Default   | Available | Available |
| Manager         |         | Available |           | Available |
| Billing manager |         | Available |           | Available |
| Owner           | Default |           |           |           |

#### Group permissions

Permissions for groups define the abilities of a group (e.g. Group A) toward another group (e.g. Group B).

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/teams/identity-and-access-management/group-permissions.png" alt="Group permissions" />
</Frame>

These roles are progressive (e.g. managers can do everything that viewers can do). There are five roles that can be applied to these relationships:

* **No access** means that members of the group cannot see anything about the other group (e.g. its name or members).
* **Restricted** is a special level of access for Guests. It allows these users to see the group name, but not the other members, and can be useful for organizations with many external contractors, or for organizations using Replit Teams to conduct interviews.
* **Viewers** can see the group name and the list of group members.
* **Managers** can add and remove members from the group, control the group permissions, and change the group color.
* **Owners** can edit the group name or delete the group.

The potential roles for a group relationship are dependent on both the source and target group types. The matrix of available roles is defined below, where the rows represent the source group type and the columns the target type. The default roles are in bold.

| Target → | Admins           | Members                   | Guests                    | Custom                           |
| -------- | ---------------- | ------------------------- | ------------------------- | -------------------------------- |
| Admins   | **Manager**      | **Manager**               | **Manager**               | **Owner**                        |
| Members  | **Viewer**       | **Viewer**, Manager       | **Viewer**, Manager       | **None**, Viewer, Manager, Owner |
| Guests   | **None**, Viewer | **None**, Viewer          | **Restricted**, Viewer    | **None**, Viewer, Manager        |
| Custom   | **None**, Viewer | **None**, Viewer, Manager | **None**, Viewer, Manager | **None**, Viewer, Manager, Owner |

#### Replit App permissions

Permissions between groups and Replit Apps can be managed either from the group permissions interface, or from the Replit App workspace.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/teams/identity-and-access-management/repl-permissions.png" alt="Replit App permissions" />
</Frame>

These roles are progressive, e.g. editors can do everything that viewers can do. There are five roles that control Replit App access:

* **No access** means that group members cannot see that the Replit App exists, unless they have higher permission through another group, or if the Replit App is public.
* **Viewers** can see the Replit App cover page, even if the Replit App is not publicly available.
* **Editors** have access to open the Replit App in the workspace and make changes to the code. They may also view existing deployments, interact with Object Storage, and use advanced AI features.
* **Deployers** can redeploy existing deployments. They cannot incur more cost from a deployment, e.g. upgrading it to a larger machine, but they can pause / resume the deployment.
* **Owners** can create new deployments or Neon databases. They can also edit the Replit App permissions, switch the visibility between public and private, and view and edit Replit App secrets. Owners are able to delete resources attached to the Replit App (e.g. deployments, databases, and Object Storage resources) and the Replit App itself.

<Note>
  While only `Owners` can view and update secrets in the workspace through our panes system, anyone with `Editors` access can execute code that will output secret values. For more information on secret visibility, see  [Handling Secrets in a collaborative environment](/replit-workspace/workspace-features/secrets#handling-secrets-in-a-collaborative-environment).
</Note>

The Replit App roles available to a group are dependent on the group type, and are defined in the matrix below:

| Role     | Admins  | Members   | Guests    | Custom    |
| -------- | ------- | --------- | --------- | --------- |
| None     |         | Available | Default   | Default   |
| Viewer   |         | Available | Available | Available |
| Editor   |         | Default   | Available | Available |
| Deployer |         | Available | Available | Available |
| Owner    | Default | Available | Available | Available |

### Settings

The group settings section allows eligible users to edit the group’s name and color, or delete the group. The permissions available on default groups are more limited: their names cannot be changed and they may not be deleted.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/teams/identity-and-access-management/group-settings.png" alt="Group settings" />
</Frame>


# Managing Members
Source: https://docs.replit.com/teams/identity-and-access-management/managing-members

One of the most important functions of Replit Teams is adding collaborators to your organization.

## Viewing members

The “Members” option in the sidebar shows a list of current organization members, with some information about their default group and recent activity.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/teams/identity-and-access-management/members-view.png" alt="Viewing members" />
</Frame>

This view also supports removing users from the organization (using the trash icon), or adding new ones via the add button in the top right corner. This action may be disabled if there are [not enough seats](/billing/teams-billing/managing-seats) available for new members, or if the user does not have permission to add new organization members.

## Adding members

Clicking the “Add” button in the corner of the Members page will open a modal with a search input. Existing Replit users can be found via username or email, while non-Replit users can be added by email. Options for the new member’s default group will appear after the user has been selected or the email address is complete.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/teams/identity-and-access-management/adding-a-member.png" alt="Adding a member" />
</Frame>

Existing users will be added immediately, and the seat will be consumed immediately. Non-Replit users will be added to the organization after creating an account. The seat won’t be consumed until this happens. The invitation sent via email expires after seven days.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/teams/identity-and-access-management/invitation-email.png" alt="Invitation email" />
</Frame>

## Removing members

Eligible users can remove users from the organization using either the trash can icon or the context menu opened from the triple dot to the right of each member row.

Removing a user from the organization requires a confirmation step. After the user is removed, a seat is freed up immediately and may be used to invite a new organization member.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/teams/identity-and-access-management/removing-a-member.png" alt="Removing a member" />
</Frame>


# Replit App Access Management
Source: https://docs.replit.com/teams/identity-and-access-management/repl-access-management

Learn how to control access and visibility settings for Replit Apps through the workspace interface, including group permissions and user roles.

Replit App access may be managed either from the [group permissions interface](/teams/identity-and-access-management/groups-and-permissions#repl-permissions), or from the workspace using the “Access” button in the header. Users with edit access can change the role for existing groups or individuals, or add roles to new groups or users. All users with access to the Replit App workspace are able to see who has access to the Replit App, even if they can't manage it.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/teams/identity-and-access-management/access-popover.png" alt="Access popover" />
</Frame>

To grant access to a group or member, use the search to locate them by name or username.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/teams/identity-and-access-management/access-popover-search.png" alt="Access popover search" />
</Frame>

After selecting the result, a dropdown for the role selection will appear. After choosing the role, the group or user will be added to the "Groups with access" or "People with access" sections below.

This popover also controls whether the Replit App is private or public, using selector in the bottom left corner. If the Replit App is marked as internal, it is private within the organization. Only users with access can see that it exists. If the Replit App is public, anyone on Replit (regardless of whether they are logged in) can see, but not edit, the Replit App.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/teams/identity-and-access-management/access-visibility-toggle.png" alt="Access popover visibility toggle" />
</Frame>


# SAML
Source: https://docs.replit.com/teams/identity-and-access-management/saml

Learn how to set up and manage SAML single sign-on authentication for your Replit Enterprise Team, including domain configuration and Identity Provider setup.

## Introduction

<Note>
  Only Teams with an Enterprise subscription are able to use SAML SSO. Contact us to get started with Enterprise at [teams@replit.com](mailto:teams@replit.com).
</Note>

[SAML](https://en.wikipedia.org/wiki/Security_Assertion_Markup_Language) SSO allows you to use your Identity Provider to authenticate users logging into replit.com. Your Organization's users will be directed to your Identity Provider to authenticate, and your Identity Provider will provide an response back to Replit verifying the user's identity, which Replit uses to log the user into replit.com.

Setting up SAML requires communication with the Replit team. Once you’re familiar with what’s required below, reach out to us at [teams@replit.com](mailto:teams@replit.com) to get started.

## Set up SAML SSO

### Choose your email domains

You can claim multiple email domains and subdomains for your Organization. Any user that attempts to sign up with an email domain that matches your claimed domain will be required to use SAML SSO. Your claimed domains should match what your Identity Provider will report for your users. If you use email domain aliases, you should provide them to Replit as well to prevent your users from signing up without using SAML.

For example, if your company uses email domains matching `acmeco.com`, `foo.acmeco.com`, and `acmebiz.com` you should provide all of these to Replit.

Replit must be able to verify that your organization owns these domains. If you need to add additional domains in the future you can contact us at [support@replit.com](mailto:support@replit.com).

### Setup Replit in your Identity provider

Create a new application or service in your Identity Provider using the following

* **Service Provider (SP) Entity ID**: Your Replit representative will provide this.
* **SSO URL**: `https://replit.com/__/auth/handler`

### Replit enables your SAML SSO

Once you’ve setup Replit in your Identity Provider, please provide your Replit representative with the following:

* **Identity Provider (IdP) entity ID**: This identifies your IdP to Replit
* **IdP SSO URL**: This is the URL Replit will send users to when authenticating with your IdP
* **Signature Certificate**: An X509 certificate that Replit uses to verify authentication responses from your IdP.

Once we have confirmed setup completion, your Organization is ready to use SAML SSO.

## Using SAML SSO

Once SAML SSO is configured, your users can log in to [replit.com](http://replit.com) using the “Continue with SSO” button. They will receive an invitation to your Organization upon their first login and will be prompted to join your Organization in Replit.

## FAQ

### What happens to users who already have accounts on replit.com before SAML SSO was setup?

SAML SSO is opt-in for existing users, meaning they can continue to use their existing authentication methods (email or social login). They will not be automatically added to your Organization.

### Are users automatically deprovisioned in Replit when my IdP removes access?

No, however Replit is working on supporting SCIM 2. Reach out to us if you’re interested in early access.

### Are Organization seats automatically consumed when users are given access in our IdP?

No, seats are only consumed once a user accepts the invitation to your Organization.


# Information Security
Source: https://docs.replit.com/teams/information-security/overview

Learn about Replit's security practices, data protection, and compliance standards

Replit provides an AI-powered, cloud-based development environment used by millions of developers worldwide. Security is fundamental to our platform, ensuring users can confidently build, collaborate, and deploy applications across multiple devices and platforms.

## Data protection

Data protection is a top priority at Replit. We implement comprehensive security measures to protect your data and ensure the integrity of our platform.

### Hosting and infrastructure

Replit hosts data primarily in Google Cloud Platform (GCP) data centers in the United States, with an optional hosting region in India for users who opt in. We leverage GCP's enterprise-grade backup and recovery tools to ensure:

<CardGroup cols={2}>
  <Card title="High Availability" icon="server">
    Redundant systems and automated failover mechanisms protect against service interruptions and data loss
  </Card>

  <Card title="Data Segregation" icon="layer-group">
    Strong logical separation prevents unauthorized access between different users and organizations
  </Card>
</CardGroup>

GCP is an industry-leading cloud provider, certified for compliance with **ISO 27001** and **SOC 2 Type 2**. Additionally, **Replit has achieved SOC 2 Type 2 Attestation of Compliance**, demonstrating our ongoing commitment to security best practices and controls.

Every client request must be rigorously **authenticated and authorized** before accessing any private information.

### Encryption standards

<Note>
  Replit implements comprehensive encryption across all data states to ensure the confidentiality, integrity, and security of your information.
</Note>

<AccordionGroup>
  <Accordion title="Transit encryption" icon="shield-halved">
    Industry-standard **TLS 1.2+** encryption secures all communications between clients and our servers, protecting data as it moves across networks. This includes all API calls, web traffic, real-time collaboration data, and other communications.
  </Accordion>

  <Accordion title="Data at rest" icon="database">
    Data stored in GCP is protected using [**AES-256 server-side encryption**](https://cloud.google.com/docs/security/encryption/default-encryption). This military-grade encryption standard safeguards all stored data, including code, configurations, user information, and system metadata.
  </Accordion>

  <Accordion title="Database security" icon="lock">
    We use **Google Cloud SQL** for [database encryption](https://cloud.google.com/sql/faq#encryption-manage-rest) and [secure key management](https://cloud.google.com/secret-manager), ensuring that sensitive data remains protected with automatic encryption, regular key rotation, and granular access controls.
  </Accordion>
</AccordionGroup>

## Infrastructure security

All data-processing components operate in Replit's **private network** within a secure cloud environment, protected by:

<CardGroup cols={3}>
  <Card title="Load Balancing" icon="server">
    Intelligent traffic distribution for optimal performance and reliability
  </Card>

  <Card title="WAF Protection" icon="shield">
    Advanced web application firewall prevents malicious traffic and sophisticated attacks
  </Card>

  <Card title="Vendor Security" icon="user-check">
    Rigorous subprocessor standards with regular security assessments and monitoring
  </Card>
</CardGroup>

We conduct thorough **due diligence** on all subprocessors to ensure they meet our strict security standards and compliance requirements.

## Security teams

<CardGroup cols={2}>
  <Card title="Security Team" icon="shield-halved">
    Dedicated in-house team that continuously monitors, assesses, and strengthens our platform's security across infrastructure, product features, and operational processes
  </Card>

  <Card title="Trust & Safety Team" icon="users-gear">
    Ensures compliance with our **Terms of Service** and community guidelines, fostering a safe and respectful environment for all users
  </Card>
</CardGroup>

Security is a fundamental priority at the executive level, with direct oversight and engagement from company leadership.

## Legal framework

Our security and data handling practices are governed by these key documents:

<CardGroup cols={3}>
  <Card title="Terms of Service" icon="file-contract" href="https://replit.com/terms-of-service" className="hover:bg-gray-50 dark:hover:bg-gray-800">
    For Free and Core users
  </Card>

  <Card title="Teams Agreement" icon="users" href="https://replit.com/teams-agreement" className="hover:bg-gray-50 dark:hover:bg-gray-800">
    For Teams users
  </Card>

  <Card title="Privacy Policy" icon="shield-check" href="https://replit.com/privacy-policy" className="hover:bg-gray-50 dark:hover:bg-gray-800">
    For all users
  </Card>
</CardGroup>

## Additional resources

For more detailed information about our security policies, certifications, and best practices, visit our [**Trust Center**](http://trust.replit.com).

At Replit, we believe that security is not just a requirement—it's a core part of delivering an exceptional developer experience. By maintaining rigorous security standards, we empower individuals and teams to build with complete confidence.

<Warning>
  If you discover a security vulnerability, please report it immediately following our [responsible disclosure policy](/legal-and-security-info/security).
</Warning>


# Projects Overview
Source: https://docs.replit.com/teams/projects/overview

Learn how to use Projects in Replit Teams for collaborative development, version control, and managing multiple Replit Apps with git-based workflows.

<Frame>
  <div style={{ position: 'relative', width: '100%', paddingTop: '56.25%' }}>
    <iframe
      style={{
    position: 'absolute',
    top: 0,
    left: 0,
    width: '100%',
    height: '100%',
  }}
      src="https://www.youtube.com/embed/0oysaUMLMFk"
      title="YouTube video player"
      frameborder="0"
      allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
      allowfullscreen
    />
  </div>
</Frame>

## Introduction

Projects are currently a beta feature available to Teams. A Project is a set of connected, Replit Apps for better collaborative development and versioning. Within a Project, you can:

* "Fork" a Replit App (i.e. make a copy) to work on a feature in isolation, and merge your changes back in when ready
* View all ongoing development in one place

Projects leverage a technology called [git](https://git-scm.com/) to manage version control, but you don't need to know anything about git to use Projects!

## Advantages of Projects

Projects are a great option:

* When you are collaborating with a team where you each need your own copy of the code when working on features
* When you want an easy way to leverage version control. Using a version control system has many advantages: you can trace the history of all files in your codebase to see what changed and why, you experiment and collaborate using branching & merging, you can rollback to a previous version easily when something breaks, etc.

## Project Structure

Every Project is organized around having a main Replit App that is the source of truth. In this example Project, "AnvilWebServer" is the main Replit App. Each team member has their own fork where they can work, e.g. "MadisonFitch-07-03" is a fork off of the main Replit App.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/projects/projects-project-dashboard.png" alt="Project Dashboard" />
</Frame>

The best practice for working within a Project is to:

* Make changes in a fork, e.g. "MadisonFitch-07-03"
* Use the Project tool in the workspace to preview your changes
* Use that tool to merge your changes into the main Replit App when they are ready

## Creating a Project

To get started, fork any Replit App in your organization and you'll be prompted to turn it into a Project:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/projects/projects-create-project-fork.png" alt="Create Project Fork" />
</Frame>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/projects/projects-create-project-prompt-to-convert.png" alt="Create Project Prompt to Convert" />
</Frame>

If you choose the "Fork & start a Project" option, the Replit App you are in will become your main Replit App for the Project and you will be moved to a new fork where you can work on a feature.

## Previewing and merging changes

When you open the fork in the workspace, you'll see a Project tool open which informs you that you have no changes from the main Replit App yet:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/projects/projects-create-project-no-changes.png" alt="Create Project No Changes" />
</Frame>

If you were to make some changes, you would see them previewed in the Project tool. You can create a basic express server and see the changes:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/projects/projects-create-project-changes-in-WS.png" alt="Create Project Changes in Workspace" />
</Frame>

You can run your Replit App and test your changes. When you are ready, you can click the "Merge changes..." button, and your changes will be pulled into the main Replit App. In the main AnvilWebServer Replit App, you would be able to now see the express server changes, and you can run the Replit App to see the server in action:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/projects/projects-run-main-repl.png" alt="Run Main Replit App" />
</Frame>

## Using `git`

In the previous section, the "Merge changes..." button did some magic by executing a few git commands. You don't need to know anything about git to use Projects, but if you are familiar with git, you can take more control over how changes are made in a Project.

If you modify you fork again to add a joke endpoint, you'll see changes in the Project tool:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/projects/projects-git-changes.png" alt="Git Changes" />
</Frame>

Instead of hitting "Merge," you can use the git tool (or use the `git` command in the shell) to commit specific changes when merging:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/projects/projects-git-staging.png" alt="Git Staging" />
</Frame>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/projects/projects-git-committed.png" alt="Git Committed" />
</Frame>

If you switch back to the Projects tool, you will see "Committed" changes and now can click the "Merge" button to pull only your committed changes into the main Replit App.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/projects/projects-git-merging.png" alt="Git Merging" />
</Frame>

## Project Navigation in the Workspace

When in the workspace, the header bar will provide some extra navigation options and controls:

* Switch to other Replit Apps in the Project
* Go to the dashboard
* Create a new fork

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/projects/projects-ws-header.png" alt="Workspace Header" />
</Frame>

## Project Dashboard

You can visit the Project's dashboard from the sidebar, or via the workspace header link. You'll see:

* The main replit app
* All forks
* Everyone who is online currently in the Project
* Settings

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/projects/projects-project-dashboard.png" alt="Project Dashboard" />
</Frame>


# Conflict Resolution in Projects
Source: https://docs.replit.com/teams/projects/resolving-conflicts

Learn how to handle and resolve merge conflicts when multiple team members make changes to the same files in a Replit Project.

## Overview

When two teammates make changes to the same files in a Project, it is possible to end up with a [merge conflict](https://www.atlassian.com/git/tutorials/using-branches/merge-conflicts).

## Resolving a merge conflict

In this example, the main Replit App has a change to the joke endpoint. In your Replit App, if you also change the joke endpoint and attempt to sync or merge your changes, you'll hit a merge warning:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/projects/projects-merge-conflict-on-pull.png" alt="Merge Conflict on Pull" />
</Frame>

If you click the "resolve manually" button, the git tool will open up in conflict resolution mode to help you resolve the conflict:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/projects/projects-merge-conflict-view-conflict.png" alt="Merge Conflict View Conflict" />
</Frame>

You will see conflict markers `<<<<<<< HEAD`, `=======` and `>>>>>>> dd936daa...`. This is git's way of showing you the conflict it encountered and the two different version of the code it found. The bit between `<<<<<<< HEAD` and `=======` is the version of the joke endpoint found in the main Replit App (which was merged in between the time when you created your fork and the time you attempted to merge your fork), and the bit between `=======` and `>>>>>>> dd936daa...` is your change to the joke endpoint.

Resolving a merge conflict simply means editing the file to remove the conflict markers. Sometimes this means picking one change or the other. Other times this means picking parts of each version to create a blended version. In this situation, you can pick your version of the change:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/projects/projects-merge-conflict-resolve-conflict.png" alt="Merge Conflict Resolve Conflict" />
</Frame>

The "Complete merge and commit" button will be enabled when you have resolved all the conflicts. When you click it, you'll end up with a new commit that resolves the conflict:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/projects/projects-merge-conflict-commit.png" alt="Merge Conflict Commit" />
</Frame>

You will now be able to merge your changes back into the main Replit App.


# Public Profiles
Source: https://docs.replit.com/teams/public_profiles

Learn how to create and customize your organization's public profile on Replit to showcase your brand, products, and public Replit Apps to the community.

## Overview

Public profiles on Replit enable Organizations to showcase their brand, products, libraries, or templates to a broader audience. Here are some key use cases for public profiles:

* **Developer Relations**: Developer-centric companies can share documentation, examples, demos, and self-hosted solutions.
* **Pre-Sales and Sales Flows**: Organizations can share content with clients or customers to demonstrate how something works during introductory calls.
* **Building Brand Awareness**: Companies can tap into Replit’s community by promoting their content and increasing visibility.

## Creating a public profile

Each Organization has a public profile, which will not have any information other than the Organization name by default.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/teams/public-profiles/private-profile.png" alt="Private Profile" />
</Frame>

To enable the profile page, an Organization admin needs to navigate to the Organization profile settings page and switch the profile visibility to public. This allows them to manage the contents of the public profile.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/teams/public-profiles/private-profile-settings.png" alt="Private Profile Settings" />
</Frame>

Once the profile visibility is set to public, admins can update the contents of the public profile.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/teams/public-profiles/public-profile-settings.png" alt="Public Profile Settings" />
</Frame>

## Profile page content

* **Avatar** - Upload your brand logo image to represent your organization.
* **Social Links** - Promote your website and cross-link to your social profiles.
* **Bio** - Describe your organization to give visitors a clear understanding of who you are.
* **Public Replit Apps** - Showcase all the Replit Apps your organization has made public to the Replit community.

## Accessing the profile

Once you create public Replit Apps, each Replit App has its own cover page, which is publicly accessible.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/teams/public-profiles/repl-cover-page.png" alt="Replit App Cover Page" />
</Frame>

Users can navigate to your Organization's public profile by hovering over the organization name and selecting the logo or name. This is how the finalized public profile will appear.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/teams/public-profiles/public-profile.png" alt="Public Profile" />
</Frame>

## Creating public Replit Apps

In the Replit App creation modal, you will find two options:

* **Internal to (Organization Name)** - Creates a private Replit App that is accessible only within the organization, based on the defined access rules.
* **Public to Replit** - Creates a public Replit App that is accessible to anyone.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/teams/public-profiles/public-repl-creation.png" alt="Public Replit App Creation" />
</Frame>

* Public visibility can also be managed from the Access modal within the workspace.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/teams/public-profiles/public-access-repl.png" alt="Public Replit App Access" />
</Frame>


# Replit Core Sponsorships
Source: https://docs.replit.com/teams/replit-core-sponsorships

Learn how to gift Replit Core subscriptions to developers outside your organization through sponsorships for hackathons, bootcamps, and other events.

# Replit Core sponsorships

## Overview

Sponsorships allow you to gift Replit Core to users outside of your Organization. Sponsorships can be a great fit for situations like Developer Relations teams and coding bootcamps. Example use cases:

* hosting a hackaton or contest and giving away Replit Core as a prize for participants
* running a bootcamp where each student should get their own Replit Core account

Sponsored users will not have any direct access to your Organization, and you won't have any direct access to the sponsored user's content. A sponsorship is simply a way to gift Replit Core to users and give them [the benefits of Replit Core](https://replit.com/pricing) (e.g. more powerful workspaces, private Replit Apps and monthly credits).

## Sponsorships flow

### Purchasing sponsorships

Reach out to [teams@replit.com](mailto:teams@replit.com) to enable this feature for your Organization.

### Granting a sponsorship

Once sponsorships have been enabled for your Organization, you can grant sponsorships from the settings page:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/teams/sponsorships/sponsorships-page.png" alt="Sponsorships page" />
</Frame>

Click the "Add" button, enter an email (or multiple emails) and choose how many months of Replit Core you would like to grant (e.g. in this case, we are granting 2 months):

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/teams/sponsorships/sponsorships-invite.png" alt="Sponsorships Invite Page" />
</Frame>

They will receive an email with a link to claim the sponsorship:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/teams/sponsorships/sponsorships-email.png" alt="Sponsorships Email Page" />
</Frame>

The sponsorship invite link will expire after 7 days. If the recipient claims the sponsorship, they will receive Replit Core automatically. When the sponsorship ends (e.g. in our example, after 2 months), the recipient can decide whether or not they want to pay for Replit Core or not.


# December 13, 2024
Source: https://docs.replit.com/updates/2024/12/13/changelog

Assistant launch, improved Agent, usage updates, and more.

export const AuthorCard = ({img, href, name, role}) => {
  return <a href={href} target="_blank" className="card block not-prose font-normal group relative my-2 ring-2 ring-transparent rounded-xl bg-white/50 dark:bg-codeblock/50 border border-gray-100 shadow-md dark:shadow-none shadow-gray-300/10 dark:border-gray-800/50 overflow-hidden cursor-pointer hover:!border-primary dark:hover:!border-primary-light">
      <div className="flex items-center gap-2 p-4">
        <div className="flex-shrink-0">
          <img src={img} alt={name} className="w-12 h-12 rounded-full object-cover" />
        </div>
        <div className="flex-grow">
          <h3 className="text-base font-semibold mb-0.5 text-inherit">{name}</h3>
          <p className="text-sm text-gray-600 dark:text-gray-400 m-0">{role}</p>
        </div>
      </div>
    </a>;
};

<AuthorCard img="https://replit.com/cdn-cgi/image/width=256,quality=80,format=auto/https://storage.googleapis.com/replit/images/1730840970400_e885f16578bbbb227adbfeb7b979be34.jpeg" href="https://x.com/mattppal" name="Matt Palmer" role="Head of Developer Relations" />

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2024-12-13/assistant-title.jpg" alt="Assistant" />
</Frame>

This week, we launched Assistant, a new AI tool that allows you to edit multiple files and apply changes directly.

Assistant is optimized for chat and quick edits. Often, we find ourselves creating an MVP with Agent, then performing quick edits with Assistant.

Here are some of our favorite parts of Assistant:

* **Lightweight:** Assistant is optimized for chat and quick edits, now with the ability to edit multiple files and apply changes directly.
* **Mentions and screenshots:** Mention files or URLs in your prompts. We can scrape the URL or take a screenshot for you.
* **Rollbacks:** Assistant automatically creates checkpoints, allowing you to easily preview edits as diff and roll back with a single click.
* **Flexibility:** Assistant works in any Replit App, regardless of the tech stack. Bring your existing projects or start fresh with Agent.
* **More Beautiful Apps:** Improved support for responsive React apps allows you to create stunning apps.
* **Billings Updates:** We've removed all usage limits for Agents. We've also increased the credits included in your subscription.

### Assistant Features

Replit Assistant is a lightweight AI tool built for chat and quick edits. It can edit multiple files and apply them directly on it's own.

We find Assistant excels when you give it context—that might mean specific features, files (mention them with `@file`), or URLs (just paste them in).

Assistant can help you iterate faster and uses about 5x less credits than Agent.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2024-12-13/2-enter-assistant.webp" alt="Intro to Assistant" />
</Frame>

### Rollback with Ease

Assistant automatically creates checkpoints, allowing you to easily preview edits as diffs and roll back with a single click if anything looks off.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2024-12-13/5-b-apply.gif" alt="Apply Edits" />
</Frame>

### Build Beautiful Apps

We've improved support for **React apps**, ensuring your apps appear and function at their best.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2024-12-13/6-b-react.gif" alt="Beautiful Apps with React" />
</Frame>

### Rapid Scraping / Screenshots

Screenshot or scrape the contents of any site directly into your prompts with **Assistant** or **Agent**.

Simply paste a URL and we'll offer to take a screenshot or scrape the contents of the page.

As always, you can always attach images to your prompts or mention files with `@file`.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2024-12-13/8-scrape.gif" alt="Scraping" />
</Frame>

### Usage Updates You’ll Love

* **No More Usage Quotas:** Say goodbye to limits for Agent usage.
* **More Credits for Subscribers:** Core subscribers now receive increased credits.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2024-12-13/billing.png" alt="Billing" />
</Frame>

We're also introducing billing tools to allow you to monitor and limit your spend. Head over to the "usage" tab in Replit to see your usage and set limits.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2024-12-13/billing-1.png" alt="Billing" />
</Frame>

### What's Next

We're working on some amazing new features for Agent + Assistant. Here's what you can expect in the coming weeks.

#### Smart Integrations

We're cooking up some amazing new integrations for Agent. We'll be adding more tools to Agent, including Stripe, OpenAI, and more. We'll also be improving how you interact with them.

#### More Beautiful Apps

We're adding GUI tools to help you edit your apps. You'll be able to change UI elements with the click of a button.

#### Custom Prompts

We're adding a new way to create custom prompts. You'll be able to reuse prompts and persist them across sessions.


# December 20, 2024
Source: https://docs.replit.com/updates/2024/12/20/changelog

Snow Mode, custom Assistant prompts, package installs, Agent updates, and platform improvements.

export const AuthorCard = ({img, href, name, role}) => {
  return <a href={href} target="_blank" className="card block not-prose font-normal group relative my-2 ring-2 ring-transparent rounded-xl bg-white/50 dark:bg-codeblock/50 border border-gray-100 shadow-md dark:shadow-none shadow-gray-300/10 dark:border-gray-800/50 overflow-hidden cursor-pointer hover:!border-primary dark:hover:!border-primary-light">
      <div className="flex items-center gap-2 p-4">
        <div className="flex-shrink-0">
          <img src={img} alt={name} className="w-12 h-12 rounded-full object-cover" />
        </div>
        <div className="flex-grow">
          <h3 className="text-base font-semibold mb-0.5 text-inherit">{name}</h3>
          <p className="text-sm text-gray-600 dark:text-gray-400 m-0">{role}</p>
        </div>
      </div>
    </a>;
};

<AuthorCard img="https://replit.com/cdn-cgi/image/width=256,quality=80,format=auto/https://storage.googleapis.com/replit/images/1730840970400_e885f16578bbbb227adbfeb7b979be34.jpeg" href="https://x.com/mattppal" name="Matt Palmer" role="Head of Developer Relations" />

We have been *shipping* for y'all straight into the holiday season. Before we get into product updates, we're bringing the cheer with *Snow Mode*. Try it out today!

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2024-12-20/snowmode.webp" alt="Snow Mode animation showing falling snow effect in the Replit IDE" />
</Frame>

This week’s updates:

* [Assistant](#assistant)
  * [Custom Prompts](#custom-prompts)
  * [Package installs](#package-installs)
* [Agent](#agent)
  * [Replit App Theming](#repl-theming)
  * [Database notifications](#database-notifications)
  * [Recommendation System](#recommendation-system)
  * [Integration visibility](#integration-visibility)
* [Platform](#platform)
  * [Workflows](#workflows)
  * [Bounties](#bounties)

## Assistant

### Custom Prompts

Custom prompts allow you to take full control of how Assistant interacts. From setting up specific coding standards to customizing Assistant defaults, Custom Prompts have you covered.

You might add things like:

* A specific coding style or framework
* Specific problem solving techniques
* Package management preferences

For example, you might add:

```
use pnpm for package management
use motion/react instead of framer-motion
always use claude-3-5-sonnet-20241022 as your model
```

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2024-12-20/custom-prompt.png" alt="Screenshot of Custom Prompts interface showing prompt configuration options" />
</Frame>

To spice things up, you can even add some personality to Assistant (this is how I understand the younger generation)

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2024-12-20/genz.png" alt="Screenshot showing Gen Z style conversation with Assistant" />
</Frame>

### Package installs

Assistant can now install your packages for you in a single click.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2024-12-20/installpackages.gif" alt="Animation demonstrating one-click package installation feature" />
</Frame>

## Agent

### Replit App Theming

Your projects just got a major glow-up. No code required 💅

Now, you can ask Agent to build a React Replit App and customize it effortlessly with no-code theming tools:

* Change the primary color
* Switch between light and dark modes
* Personalize your app’s aesthetics to be truly yours

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2024-12-20/theme.webp" alt="Animation demonstrating the Bounties feature interface" />
</Frame>

Copy paste this prompt to Agent to try it out!

```
Build me a todo list app in React
```

### Database notifications

We now let you know when Agent adds a database to your Replit App, keep an eye out for a notification in the bottom left.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2024-12-20/dbtour.png" alt="Screenshot showing database notification interface in Replit" />
</Frame>

### Recommendation System

Agent now suggests the next cool features to build in your app, acting as your creative brainstorming partner.

It works like an infinite idea generator that helps guide you from idea to ship-ready software, fast.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2024-12-20/features.webp" alt="Animation showing feature recommendations and suggestions" />
</Frame>

### Integration visibility

Agent now features enhanced integration visibility, allowing you to better use integrations during your usage. This includes improved tracking for both users and internal teams.

Supported integrations include OpenAI, Stripe, Firebase, and more!

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2024-12-20/integrations.gif" alt="Animation showing integration visibility features and options" />
</Frame>

## Platform

### Workflows

A Workflow is an easily configurable "Run" button that can run any command(s) you'd like.

It is a reusable, customizable sequence of steps that can be executed within your Replit App. They can be as simple as running **`python main.py`** or as complex as executing a multi-step procedure.

Example Use Cases:

* Run multiple services in parallel (e.g., frontend + backend)
* Execute files or commands sequentially (e.g., run linter → run tests, compile → execute code)

To start [creating workflows](https:/.replit.com/replit-workspace/workflows#creating-workflows), go to the Workflows pane by using the tools sidebar menu, or search for the Workflows pane using **`Command + K`**.

Check it out [here](https:/.replit.com/replit-workspace/workflows).

### Bounties

Even AI-first developments can benefit from a human touch for that final input and polish.

Check out Bounties Services to connect with vetted developers who help ship your idea today.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2024-12-20/bounties.webp" alt="Animation demonstrating the Bounties feature interface" />
</Frame>


# December 27, 2024
Source: https://docs.replit.com/updates/2024/12/27/changelog

Integrations improvements, Replit Teams updates, build notifications, and database polish.

export const AuthorCard = ({img, href, name, role}) => {
  return <a href={href} target="_blank" className="card block not-prose font-normal group relative my-2 ring-2 ring-transparent rounded-xl bg-white/50 dark:bg-codeblock/50 border border-gray-100 shadow-md dark:shadow-none shadow-gray-300/10 dark:border-gray-800/50 overflow-hidden cursor-pointer hover:!border-primary dark:hover:!border-primary-light">
      <div className="flex items-center gap-2 p-4">
        <div className="flex-shrink-0">
          <img src={img} alt={name} className="w-12 h-12 rounded-full object-cover" />
        </div>
        <div className="flex-grow">
          <h3 className="text-base font-semibold mb-0.5 text-inherit">{name}</h3>
          <p className="text-sm text-gray-600 dark:text-gray-400 m-0">{role}</p>
        </div>
      </div>
    </a>;
};

<AuthorCard img="https://replit.com/cdn-cgi/image/width=256,quality=80,format=auto/https://storage.googleapis.com/replit/images/1730840970400_e885f16578bbbb227adbfeb7b979be34.jpeg" href="https://x.com/mattppal" name="Matt Palmer" role="Head of Developer Relations" />

Happy Holidays! This week's updates:

* [Integrations](#integrations)
* [Replit Teams updates](#replit-teams-updates)
* [Build notifications](#build-notifications)
* [Database polish](#database-polish)

## Integrations

Integrations are now *front and center* in the Agent UI. You can easily add your favorite services to your Agent apps. We've also launched and polished quite a few new integrations, so you should check them out. Some of our favorites:

* Perplexity
* Firebase
* OpenAI
* Anthropic
* Google Services

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2024-12-27/integrations.webp" alt="Animation showing how to access and add integrations in the Agent UI" />
</Frame>

## Replit Teams updates

We've shipped a few exciting updates for Teams users:

* Teams may now customize Replit App icons and cover images
* Solid color covers have been replaced with custom images
* Replit Teams is now available on Mobile!

Now you can create shareholder value from practically anywhere 🤯

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2024-12-27/teams-mobile.png" alt="Screenshot of Replit Teams interface on a mobile device" />
</Frame>

## Build notifications

Agent now sends you notifications when it's done working—listen for the audio notification.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2024-12-27/audio-notifications.jpeg" alt="Screenshot showing the audio notification feature for Agent build completion" />
</Frame>

If you're a more visual person, check out the favicon of the browser tab for status updates.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2024-12-27/favicons.jpeg" alt="Screenshot showing different favicon states indicating Agent build status" />
</Frame>

## Database polish

The PostgreSQL pane has been renamed to "Database." The Database pane has been renamed to "Replit Key-Value Store." This should simplify accessing all your favorite databases.

We've also added a new database notification to the dock when Agent adds a database to your project.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2024-12-27/database.jpeg" alt="Screenshot showing the database notification in the dock" />
</Frame>

## Agent improvements

Agent now pauses immediately when requested, rather than completing its current execution. This should make it easier to stop Agent when you've changed your mind.

You might also notice some fancy new "Run" buttons in the Agent UI. Let us know what you think!

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2024-12-27/running.png" alt="Screenshot showing the database notification in the dock" />
</Frame>


# January 3, 2025
Source: https://docs.replit.com/updates/2025/01/03/changelog

2 min read

export const AuthorCard = ({img, href, name, role}) => {
  return <a href={href} target="_blank" className="card block not-prose font-normal group relative my-2 ring-2 ring-transparent rounded-xl bg-white/50 dark:bg-codeblock/50 border border-gray-100 shadow-md dark:shadow-none shadow-gray-300/10 dark:border-gray-800/50 overflow-hidden cursor-pointer hover:!border-primary dark:hover:!border-primary-light">
      <div className="flex items-center gap-2 p-4">
        <div className="flex-shrink-0">
          <img src={img} alt={name} className="w-12 h-12 rounded-full object-cover" />
        </div>
        <div className="flex-grow">
          <h3 className="text-base font-semibold mb-0.5 text-inherit">{name}</h3>
          <p className="text-sm text-gray-600 dark:text-gray-400 m-0">{role}</p>
        </div>
      </div>
    </a>;
};

<AuthorCard img="https://replit.com/cdn-cgi/image/width=256,quality=80,format=auto/https://storage.googleapis.com/replit/images/1730840970400_e885f16578bbbb227adbfeb7b979be34.jpeg" href="https://x.com/mattppal" name="Matt Palmer" role="Head of Developer Relations" />

🎆 Happy New Year!

We've taken some time to recharge, but we're still shipping updates. Here's what's new:

* [xAI integration](#xai-integration)
* [Replit Teams login](#replit-teams-login)
* [Custom domain error handling](#custom-domain-error-handling)
* [Menu search feature](#menu-search-feature)
* [Neon database improvements](#neon-database-improvements)
* [React by default](#react-by-default)

### xAI integration

Agent can now add xAI directly to your apps.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2025-01-03/xai-announce.jpeg" alt="xAI integration announcement" />
</Frame>

Add Grok to your projects and deploy them in seconds. Just mention "add AI features with xAI" in your prompts or select xAI from integrations—we'll build with the API.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2025-01-03/xai-in-product.jpeg" alt="xAI in product" />
</Frame>

We're hard at work bringing your favorite integrations to Agent & Assistant.

### Replit Teams login

We've updated the Teams login flow to make it easier to get started. This includes a new login experience with team context selection page and improved account switching for Teams customers.

### Custom domain error handling

We added specific error messages for custom domain verification failures, this should help you debug issues faster.

### Menu search feature

You can now search the menu items in the sidebar in your Replit Apps.

### Neon database improvements

We've optimized our Neon database integration! Databases added with Agent are now more cost friendly and performant.

### React by default

We've updated the default template for new frontend Replit Apps to use React. Your projects will now be more beautiful and functional out of the box.


# January 10, 2025
Source: https://docs.replit.com/updates/2025/01/10/changelog

2 min read

export const AuthorCard = ({img, href, name, role}) => {
  return <a href={href} target="_blank" className="card block not-prose font-normal group relative my-2 ring-2 ring-transparent rounded-xl bg-white/50 dark:bg-codeblock/50 border border-gray-100 shadow-md dark:shadow-none shadow-gray-300/10 dark:border-gray-800/50 overflow-hidden cursor-pointer hover:!border-primary dark:hover:!border-primary-light">
      <div className="flex items-center gap-2 p-4">
        <div className="flex-shrink-0">
          <img src={img} alt={name} className="w-12 h-12 rounded-full object-cover" />
        </div>
        <div className="flex-grow">
          <h3 className="text-base font-semibold mb-0.5 text-inherit">{name}</h3>
          <p className="text-sm text-gray-600 dark:text-gray-400 m-0">{role}</p>
        </div>
      </div>
    </a>;
};

<AuthorCard img="https://replit.com/cdn-cgi/image/width=256,quality=80,format=auto/https://storage.googleapis.com/replit/images/1730840970400_e885f16578bbbb227adbfeb7b979be34.jpeg" href="https://x.com/mattppal" name="Matt Palmer" role="Head of Developer Relations" />

We've got another great week of updates for you! Here's what's new:

* [Agent & Assistant](#agent--assistant)
  * [Slack Integration](#slack-integration)
  * [Improvements](#improvements)
* [Teams](#teams)
  * [Enhanced Project Featuring Controls](#enhanced-project-featuring-controls)
  * [Teams Mobile Search](#teams-mobile-search)
* [Workspace](#workspace)
  * [Shell Bash Completion](#shell-bash-completion)
  * [Elixir Ecosystem Fix](#elixir-ecosystem-fix)
  * [Custom Domain UX Improvement](#custom-domain-ux-improvement)

## Agent & Assistant

### Slack Integration

We've added Agent integrations with the Slack API. That means you can now use Agent to build apps that:

* Post messages
* Read history

from/to all your favorite Slack channels.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2025-01-10/slack-integration.png" alt="Slack integration" />
</Frame>

We'd love to see what you build! You can submit your deployment to the [Agent Showcase](https://forms.gle/qxpfr82wNpKsCdok9).

### Improvements

* Agent now loads faster from the homepage so you can get to building faster.
* We've added a floating popup for quick access to Assistant when selecting text in console and shell. Simply select text and click the Assistant icon to ask a question.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2025-01-10/ask-assistant.png" alt="Ask assistant" />
</Frame>

## Teams

### Enhanced Project Featuring Controls

We've made it easier to feature and un-feature your organization's public projects!

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2025-01-10/feature-on-profile.png" alt="Featured project on profile" />
</Frame>

Now you can control a project's featured state directly from the workspace via the project info modal and from the projects index table.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2025-01-10/profile-preview.png" alt="Profile preview" />
</Frame>

Plus, when you feature a project, you'll get a sneak peek of how it will appear on your public profile.

### Teams Mobile Search

You can now search for your Teams Replit Apps on mobile.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2025-01-10/teams-search.png" alt="Teams search" />
</Frame>

## Workspace

### Shell Bash Completion

Shell now has autocomplete! Hit tab twice to autocomplete a command.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2025-01-10/tab-tab.webp" alt="Tab tab" />
</Frame>

### Elixir Ecosystem Fix

Resolved issues with Elixir's mix tooling, the language now works as expected.

### Custom Domain UX Improvement

You can now paste a URL into the custom domain input and we'll automatically extract the domain for you.


# January 17, 2025
Source: https://docs.replit.com/updates/2025/01/17/changelog

2 min read

export const AuthorCard = ({img, href, name, role}) => {
  return <a href={href} target="_blank" className="card block not-prose font-normal group relative my-2 ring-2 ring-transparent rounded-xl bg-white/50 dark:bg-codeblock/50 border border-gray-100 shadow-md dark:shadow-none shadow-gray-300/10 dark:border-gray-800/50 overflow-hidden cursor-pointer hover:!border-primary dark:hover:!border-primary-light">
      <div className="flex items-center gap-2 p-4">
        <div className="flex-shrink-0">
          <img src={img} alt={name} className="w-12 h-12 rounded-full object-cover" />
        </div>
        <div className="flex-grow">
          <h3 className="text-base font-semibold mb-0.5 text-inherit">{name}</h3>
          <p className="text-sm text-gray-600 dark:text-gray-400 m-0">{role}</p>
        </div>
      </div>
    </a>;
};

<AuthorCard img="https://replit.com/cdn-cgi/image/width=256,quality=80,format=auto/https://storage.googleapis.com/replit/images/1730840970400_e885f16578bbbb227adbfeb7b979be34.jpeg" href="https://x.com/mattppal" name="Matt Palmer" role="Head of Developer Relations" />

## What's new

* [SendGrid integration](#sendgrid-integration)
* [Web view mobile support](#web-view-mobile-support)
* [DNS record format update](#dns-record-format-update)
* [Flask deployment upgrade](#flask-deployment-upgrade)
* [Assistant inline shell commands](#assistant-inline-shell-commands)

### SendGrid integration

You can now build email integrations with Agent. This allows you to send emails from your new Agent projects using the SendGrid API.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2025-01-17/sendgrid-2.png" alt="SendGrid integration" />
</Frame>

### Web view mobile support

We've added the ability to scale web view to common mobile screen sizes. In addition, we've added a QR code in the URL dropdown and networking pane for easier mobile device testing.

As a reminder—even while you're building your project, it's accessible from the internet. Just visit the dev URL from any device.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2025-01-17/mobile-preview.gif" height="500px" width="400px" />
</Frame>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2025-01-17/qr-mobile.png" alt="Mobile QR code" />
</Frame>

### DNS record format update

We've modified how custom domain DNS records are formatted to match industry standards.

This should make it easier to configure custom domains.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2025-01-17/dns-record-format.png" alt="DNS record format" />
</Frame>

### Flask deployment upgrade

gunicorn is now the default web server for Flask stack deployments.

This resulted in a 40x performance improvement over previous Flask deployments.

### Assistant inline shell commands

Assistant can now execute shell commands directly in the chat pane. Save time by running commands without leaving the chat!

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2025-01-17/shell-commands.png" alt="Assistant inline shell commands" />
</Frame>

We've also added warnings for potentially dangerous shell commands and revamped the UI for installing packages.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2025-01-17/shell-warning.png" alt="Shell commands UI" />
</Frame>


# January 24, 2025
Source: https://docs.replit.com/updates/2025/01/24/changelog

2 min read

export const AuthorCard = ({img, href, name, role}) => {
  return <a href={href} target="_blank" className="card block not-prose font-normal group relative my-2 ring-2 ring-transparent rounded-xl bg-white/50 dark:bg-codeblock/50 border border-gray-100 shadow-md dark:shadow-none shadow-gray-300/10 dark:border-gray-800/50 overflow-hidden cursor-pointer hover:!border-primary dark:hover:!border-primary-light">
      <div className="flex items-center gap-2 p-4">
        <div className="flex-shrink-0">
          <img src={img} alt={name} className="w-12 h-12 rounded-full object-cover" />
        </div>
        <div className="flex-grow">
          <h3 className="text-base font-semibold mb-0.5 text-inherit">{name}</h3>
          <p className="text-sm text-gray-600 dark:text-gray-400 m-0">{role}</p>
        </div>
      </div>
    </a>;
};

<AuthorCard img="https://replit.com/cdn-cgi/image/width=256,quality=80,format=auto/https://storage.googleapis.com/replit/images/1730840970400_e885f16578bbbb227adbfeb7b979be34.jpeg" href="https://x.com/mattppal" name="Matt Palmer" role="Head of Developer Relations" />

## What's new

* [Assistant + Workflows](#assistant-workflows)
* [Better Zips](#better-zips)
* [Autoscale Deployment Optimizations](#autoscale-deployment-optimizations)

### Assistant + Workflows

Assistant now integrates with "Workflows." That means you can chat with Assistant to configure how your Replit Apps run.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2025-01-24/assistant-workflows.png" alt="Assistant + Workflows" />
</Frame>

If you haven't used Workflows before, they're really cool and can take your Replit Apps to the next level.

You can learn more [here](/replit-workspace/workflows).

### Better Zips

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2025-01-24/zip.webp" alt="Better Zips" />
</Frame>

We've improved the speed and reliability of zipping Replit Apps. You'll notice "export as zip" is now lightning fast.

### Autoscale Deployment Optimizations

Autoscale deployments are now more reliable and faster thanks to some behind-the-scenes improvements on cold-start times.


# January 31, 2025
Source: https://docs.replit.com/updates/2025/01/31/changelog

2 min read

export const AuthorCard = ({img, href, name, role}) => {
  return <a href={href} target="_blank" className="card block not-prose font-normal group relative my-2 ring-2 ring-transparent rounded-xl bg-white/50 dark:bg-codeblock/50 border border-gray-100 shadow-md dark:shadow-none shadow-gray-300/10 dark:border-gray-800/50 overflow-hidden cursor-pointer hover:!border-primary dark:hover:!border-primary-light">
      <div className="flex items-center gap-2 p-4">
        <div className="flex-shrink-0">
          <img src={img} alt={name} className="w-12 h-12 rounded-full object-cover" />
        </div>
        <div className="flex-grow">
          <h3 className="text-base font-semibold mb-0.5 text-inherit">{name}</h3>
          <p className="text-sm text-gray-600 dark:text-gray-400 m-0">{role}</p>
        </div>
      </div>
    </a>;
};

<AuthorCard img="https://replit.com/cdn-cgi/image/width=256,quality=80,format=auto/https://storage.googleapis.com/replit/images/1730840970400_e885f16578bbbb227adbfeb7b979be34.jpeg" href="https://x.com/mattppal" name="Matt Palmer" role="Head of Developer Relations" />

## What's new

* [Repl -> App](#repl-app)
* [Enhanced notifications](#enhanced-notifications)
* [Object Storage improvements](#object-storage-improvements)
* [De-cluttered diffs](#de-cluttered-diffs)
* [More performant Agent in Asia](#more-performant-agent-in-asia)
* [X login](#x-login)
* [Rapid repo import](#rapid-repo-import)

### Repl -> App

Repls are now "Apps." We like simplicity around here.

### Enhanced notifications

We've improved how we communicate payment failures and invoice issues. You'll now receive a 24-hour grace period before your App is suspended, along with more transparency throughout the process.

We hope this update will help you avoid any disruptions to your Replit experience.

### Object Storage improvements

We've added search functionality and pagination (pages) to the Object Storage pane, making it easier to browse your files.

### De-cluttered diffs

Assistant file changes now open temporary diff panes. This makes it easier to see the changes you're making without bogging down your workspace with endless tabs.

The panes automatically close when you apply the changes.

### More performant Agent in Asia

We've optimized our cloud services for Agent users in Asia. You'll notice snappier responses and a much smoother experience.

### X login

You can now register and sign-in to Replit with X. Welcome to the future.

### Rapid repo import

Want to bring your favorite GitHub repo to Replit?

You can now do so instantly.

Just type `replit.com/YOUR_REPO_URL` into your browser, for example:

`https://replit.com/github.com/mattppal/magnetic-feel`


# February 7, 2025
Source: https://docs.replit.com/updates/2025/02/07/changelog

2 min read

export const AuthorCard = ({img, href, name, role}) => {
  return <a href={href} target="_blank" className="card block not-prose font-normal group relative my-2 ring-2 ring-transparent rounded-xl bg-white/50 dark:bg-codeblock/50 border border-gray-100 shadow-md dark:shadow-none shadow-gray-300/10 dark:border-gray-800/50 overflow-hidden cursor-pointer hover:!border-primary dark:hover:!border-primary-light">
      <div className="flex items-center gap-2 p-4">
        <div className="flex-shrink-0">
          <img src={img} alt={name} className="w-12 h-12 rounded-full object-cover" />
        </div>
        <div className="flex-grow">
          <h3 className="text-base font-semibold mb-0.5 text-inherit">{name}</h3>
          <p className="text-sm text-gray-600 dark:text-gray-400 m-0">{role}</p>
        </div>
      </div>
    </a>;
};

<AuthorCard img="https://replit.com/cdn-cgi/image/width=256,quality=80,format=auto/https://storage.googleapis.com/replit/images/1730840970400_e885f16578bbbb227adbfeb7b979be34.jpeg" href="https://x.com/mattppal" name="Matt Palmer" role="Head of Developer Relations" />

## What's new:

* [Agent is now free to try](#agent-is-now-free-to-try)
* [Replit Mobile](#replit-mobile)
* [New Replit App cover pages](#new-replit-app-cover-pages)
* [Documentation migration to Mintlify](#documentation-migration)
* [Drizzle Studio release](#improved-database-viewer)
* [Input box actions update](#agent-actions)

<div align="center">
  <img width="50%" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2025-02-07/replit-mobile.webp" alt="Screenshot of the redesigned Replit Mobile app interface" />
</div>

### Agent is now free to try

Agent and Assistant are now free to try! Whether you're a seasoned Replit developer or just starting out, you can now experiment with these powerful tools without any restrictions.

Your first 10 checkpoints are on us (that includes existing, paid developers too). Select [https://replit.com](https://replit.com) to give them a shot.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2025-02-07/homepage.png" alt="Screenshot of Assistant and Agent free to try" />
</Frame>

### Replit Mobile

We've completely rebuilt Replit Mobile from the ground up! Our new mobile app delivers a faster, more intuitive coding experience on the go.

Select [https://replit.com/mobile](https://replit.com/mobile) to try it.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2025-02-07/replit-mobile.png" alt="Launch announcement image for the rebuilt Replit Mobile app" />
</Frame>

### New Replit App cover pages

Your cover pages got a major upgrade. They're now more developer-friendly and feature the starting prompt for any app built with Agent.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2025-02-07/cover-page.png" alt="Example of the redesigned Replit App cover page showing Agent prompt" />
</Frame>

### Documentation migration

We've upgraded our documentation platform to Mintlify, making it easier than ever to navigate and access information.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2025-02-07/replit-docs.webp" alt="Demonstration of the new Mintlify documentation navigation and features" />
</Frame>

A huge thank you to the Mintlify team for their help in migrating our documentation.

### Improved database viewer

Our database viewer now uses **Drizzle Studio**, providing a more robust and developer-friendly experience for interacting with your data.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2025-02-07/drizzle-kit.png" alt="Screenshot of the new Drizzle Studio database interface" />
</Frame>

Try it out and let us know what you think!

### Agent actions

Your Agent input box just got smarter with new integrated actions for additional changes. This is just the beginning—we're working on more seamless integrations to make your development experience even smoother.

<div align="center">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2025-02-07/options-agent.gif" alt="Demo of the new smart input box actions in action" />
</div>


# February 14, 2025
Source: https://docs.replit.com/updates/2025/02/14/changelog

2 min read

export const SocialContestPrizePool = '$10,000';

export const AuthorCard = ({img, href, name, role}) => {
  return <a href={href} target="_blank" className="card block not-prose font-normal group relative my-2 ring-2 ring-transparent rounded-xl bg-white/50 dark:bg-codeblock/50 border border-gray-100 shadow-md dark:shadow-none shadow-gray-300/10 dark:border-gray-800/50 overflow-hidden cursor-pointer hover:!border-primary dark:hover:!border-primary-light">
      <div className="flex items-center gap-2 p-4">
        <div className="flex-shrink-0">
          <img src={img} alt={name} className="w-12 h-12 rounded-full object-cover" />
        </div>
        <div className="flex-grow">
          <h3 className="text-base font-semibold mb-0.5 text-inherit">{name}</h3>
          <p className="text-sm text-gray-600 dark:text-gray-400 m-0">{role}</p>
        </div>
      </div>
    </a>;
};

<AuthorCard img="https://replit.com/cdn-cgi/image/width=256,quality=80,format=auto/https://storage.googleapis.com/replit/images/1730840970400_e885f16578bbbb227adbfeb7b979be34.jpeg" href="https://x.com/mattppal" name="Matt Palmer" role="Head of Developer Relations" />

## What's New:

* [Mobile Development](#mobile-development)
* [Social Coding Challenges](#social-coding-challenges)
* [Agent Updates](#agent-updates)
* [Object Storage](#object-storage)
* [App Management](#app-management)

### Mobile Development

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2025-02-14/expo-ios.gif" />
</Frame>

We've introduced React Native and Expo support to help you build and test iOS and Android apps directly in Replit.

This includes:

* Enhanced iOS and Android development capabilities
* Integrated mobile preview and debugging tools
* Streamlined app store deployment via Expo EAS

Checkout our [tutorial](https://www.youtube.com/playlist?list=PLto9KpJAqHMRuHwQ9OUjkVgZ69efpvslM) to get started.

### Social Coding Challenges

Our newest challenge features a { SocialContestPrizePool } prize pool!

We're taking over TikTok with exciting challenges and amazing prizes for developers of all skill levels.

Visit [replit.com/contest](https://replit.com/contest) to participate.

### Agent Updates

Agent and Assistant continue to improve with under-the-hood optimizations for performance and reliability.

This includes improvements to stack selection as well as support for the latest OpenAI reasoning models.

### Object Storage

Object Storage now loads and handles large file collections faster and more efficiently.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2025-02-14/screenshot-2025-02-14-at-145225png-114226.png" />
</Frame>

### App Management

Small change, big impact. You can now rename your app without having to reload the window.


# February 21, 2025
Source: https://docs.replit.com/updates/2025/02/21/changelog

2 min read

export const AuthorCard = ({img, href, name, role}) => {
  return <a href={href} target="_blank" className="card block not-prose font-normal group relative my-2 ring-2 ring-transparent rounded-xl bg-white/50 dark:bg-codeblock/50 border border-gray-100 shadow-md dark:shadow-none shadow-gray-300/10 dark:border-gray-800/50 overflow-hidden cursor-pointer hover:!border-primary dark:hover:!border-primary-light">
      <div className="flex items-center gap-2 p-4">
        <div className="flex-shrink-0">
          <img src={img} alt={name} className="w-12 h-12 rounded-full object-cover" />
        </div>
        <div className="flex-grow">
          <h3 className="text-base font-semibold mb-0.5 text-inherit">{name}</h3>
          <p className="text-sm text-gray-600 dark:text-gray-400 m-0">{role}</p>
        </div>
      </div>
    </a>;
};

<AuthorCard img="https://replit.com/cdn-cgi/image/width=256,quality=80,format=auto/https://storage.googleapis.com/replit/images/1730840970400_e885f16578bbbb227adbfeb7b979be34.jpeg" href="https://x.com/mattppal" name="Matt Palmer" role="Head of Developer Relations" />

## What's New:

* [Replit 🤝 Grok](#replit--grok)
* [One-Click Deploy for Assistant](#one-click-deploy-for-assistant)
* [Replit 🤝 Expo](#replit--expo)
* [Improved International Character Support](#improved-international-character-support-in-screenshots)

### Replit 🤝 Grok

Create and deploy Grok 3 apps in seconds with Assistant and one-click deployments. Watch the video to see how it works.

<Frame>
  <iframe width="560" height="315" src="https://www.youtube.com/embed/pvOsDB3xUWg" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen />
</Frame>

### One-Click Deploy for Assistant

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2025-02-21/screenshot-2025-02-19-at-1327572xpng-160154.png" alt="One-click deployment interface" />
</Frame>

Assistant now helps you deploy your apps with a single click.

### Replit 🤝 Expo

Our partnership with Expo continues to bring you powerful mobile development tools.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2025-02-14/expo-ios.gif" />
</Frame>

Read our [blog post](https://expo.dev/blog/from-idea-to-app-with-replit-and-expo) about how this partnership helps you build mobile apps faster.

If you missed it last week, get started with our new [mobile development tutorial](https://www.youtube.com/playlist?list=PLto9KpJAqHMRuHwQ9OUjkVgZ69efpvslM).

### Improved International Character Support in Screenshots

Agent now handles international text with ease.

We've enhanced Agent's screenshot capabilities with full support for Chinese, Japanese, and Korean (CJK) characters. Screenshots now display all characters clearly and accurately in your native language.

<Frame>
  <img height="300" src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2025-02-21/screenshot_20250215-032627png-160217.png" alt="After: Proper CJK character display" />
</Frame>


# February 28, 2025
Source: https://docs.replit.com/updates/2025/02/28/changelog

2 min read

export const AuthorCard = ({img, href, name, role}) => {
  return <a href={href} target="_blank" className="card block not-prose font-normal group relative my-2 ring-2 ring-transparent rounded-xl bg-white/50 dark:bg-codeblock/50 border border-gray-100 shadow-md dark:shadow-none shadow-gray-300/10 dark:border-gray-800/50 overflow-hidden cursor-pointer hover:!border-primary dark:hover:!border-primary-light">
      <div className="flex items-center gap-2 p-4">
        <div className="flex-shrink-0">
          <img src={img} alt={name} className="w-12 h-12 rounded-full object-cover" />
        </div>
        <div className="flex-grow">
          <h3 className="text-base font-semibold mb-0.5 text-inherit">{name}</h3>
          <p className="text-sm text-gray-600 dark:text-gray-400 m-0">{role}</p>
        </div>
      </div>
    </a>;
};

<AuthorCard img="https://replit.com/cdn-cgi/image/width=256,quality=80,format=auto/https://storage.googleapis.com/replit/images/1730840970400_e885f16578bbbb227adbfeb7b979be34.jpeg" href="https://x.com/mattppal" name="Matt Palmer" role="Head of Developer Relations" />

## What's New

* [Agent v2](#agent-v2)
* [Deployment Improvements](#deployment-improvements)
* [Claude 3.7 Sonnet Release](#claude-37-sonnet-release)
* [Database Performance Improvement](#database-performance-improvement)
* [Better Documentation](#better-documentation)

### Agent v2

![Agent v2](https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2025-02-28/agent-web.webp)

We've launched a new Agent experience that is now available to all users. This new Agent is faster, more accurate, and more capable than the previous version.

It's now powered by Claude 3.7 Sonnet, Anthropic's most advanced model yet.

You can try it out by joining the Explorer Program. Find instructions [here](https://youtu.be/pE_XT2TaXCA).

### Deployment Improvements

We've added AI suggestions for users selecting static deployment for dynamic apps, improving Agent behavior when handling deployment requests.

![Deployment debugger improvements](https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2025-02-28/deployments-debugger-will-now---non-static-app-220824.png)

### Claude 3.7 Sonnet Release

We've upgraded Advanced Assistant mode with Claude 3.7 Sonnet for all paid users. This means improved accuracy and capability for complex requests.

![Claude 3.7 interface](https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2025-02-28/50526c4ea4d114b4cd8268425398dd4ed3c2d736_bc521d9780846c35d990a72459794dd81370515f_twitter.jpeg)

### Database Performance Improvement

Database operations are now faster than ever, with the most expensive operation reduced from 200ms to under 1ms.

### Better Documentation

![Docs redesign](https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2025-02-28/cleanshot-2025-02-27-at-1042282xpng-220848.png)

We've redesigned our documentation to be easier to understand and use, making it completely LLM-friendly.

The documentation now features a "Copy Page" button, which allows you to copy the entire page as markdown. You can also index our documentation with `llms.txt` and `llms-full.txt` to use with your own LLMs.

* [https://docs.replit.com/llms.txt](https://docs.replit.com/llms.txt)
* [https://docs.replit.com/llms-full.txt](https://docs.replit.com/llms-full.txt)


# March 7, 2025
Source: https://docs.replit.com/updates/2025/03/07/changelog

2 min read

export const AuthorCard = ({img, href, name, role}) => {
  return <a href={href} target="_blank" className="card block not-prose font-normal group relative my-2 ring-2 ring-transparent rounded-xl bg-white/50 dark:bg-codeblock/50 border border-gray-100 shadow-md dark:shadow-none shadow-gray-300/10 dark:border-gray-800/50 overflow-hidden cursor-pointer hover:!border-primary dark:hover:!border-primary-light">
      <div className="flex items-center gap-2 p-4">
        <div className="flex-shrink-0">
          <img src={img} alt={name} className="w-12 h-12 rounded-full object-cover" />
        </div>
        <div className="flex-grow">
          <h3 className="text-base font-semibold mb-0.5 text-inherit">{name}</h3>
          <p className="text-sm text-gray-600 dark:text-gray-400 m-0">{role}</p>
        </div>
      </div>
    </a>;
};

<AuthorCard img="https://replit.com/cdn-cgi/image/width=256,quality=80,format=auto/https://storage.googleapis.com/replit/images/1730840970400_e885f16578bbbb227adbfeb7b979be34.jpeg" href="https://x.com/mattppal" name="Matt Palmer" role="Head of Developer Relations" />

## What's new

* [Mobile App Webview improvements](#mobile-app-webview-improvements)
* [Additional Webview improvements](#additional-webview-improvements)
* [First look at the new mobile app](#first-look-at-the-new-mobile-app)

### Mobile App Webview improvements

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2025-03-07/mobile-ezgif.com-video-to-avif-converter.avif" />
</Frame>

The Mobile App Webview just got a whole lot better.

* Added streaming HTML support in PIP Webview
* Implemented native Webview on all iOS devices with proper cookie handling
* Consolidated Webview implementations by removing two redundant pane versions

### Additional Webview improvements

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2025-03-07/webview.png" />
</Frame>

Improvements have been made for a more consistent Webview experience across all devices.

* Added warning banner in Webview for blocked third-party cookies
* Includes call-to-action button to test web app in new tab
* Helps developers identify issues caused by strict browser settings

### First look at the new mobile app

<Frame>
  <iframe src="https://www.youtube.com/embed/_yQmQMCoYb0" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen />
</Frame>

Haven't tried the Mobile App yet? Check out our latest video for a first look.


# March 14, 2025
Source: https://docs.replit.com/updates/2025/03/14/changelog

2 min read

export const AuthorCard = ({img, href, name, role}) => {
  return <a href={href} target="_blank" className="card block not-prose font-normal group relative my-2 ring-2 ring-transparent rounded-xl bg-white/50 dark:bg-codeblock/50 border border-gray-100 shadow-md dark:shadow-none shadow-gray-300/10 dark:border-gray-800/50 overflow-hidden cursor-pointer hover:!border-primary dark:hover:!border-primary-light">
      <div className="flex items-center gap-2 p-4">
        <div className="flex-shrink-0">
          <img src={img} alt={name} className="w-12 h-12 rounded-full object-cover" />
        </div>
        <div className="flex-grow">
          <h3 className="text-base font-semibold mb-0.5 text-inherit">{name}</h3>
          <p className="text-sm text-gray-600 dark:text-gray-400 m-0">{role}</p>
        </div>
      </div>
    </a>;
};

<AuthorCard img="https://replit.com/cdn-cgi/image/width=256,quality=80,format=auto/https://storage.googleapis.com/replit/images/1730840970400_e885f16578bbbb227adbfeb7b979be34.jpeg" href="https://x.com/mattppal" name="Matt Palmer" role="Head of Developer Relations" />

## What's new

* [Neon DB History Retention](#neon-db-history-retention)
* [Enhanced Link Context Features](#enhanced-link-context-features)
* [Assistant Model Selection](#assistant-model-selection)
* [Web View Performance Improvements](#web-view-performance-improvements)

### [Neon DB History Retention](#neon-db-history-retention)

We've added configurable history retention for Neon databases to help you manage costs more effectively. This directly addresses your feedback about database cost management.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2025-03-14/screenshot-2025-03-12-at-182358png-150200.webp" alt="Neon DB history retention interface" />
</Frame>

### [Enhanced Link Context Features](#enhanced-link-context-features)

You can now see live previews of link content (screenshots and text) in both Assistant and Agent. We've also extended this feature to our Mobile App.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2025-03-14/link-context.gif" alt="Link context feature" />
</Frame>

### [Assistant Model Selection](#assistant-model-selection)

For our Advanced users, we've added the option to switch back to Claude 3.5 Sonnet v2 in Assistant settings. We're continuously working on performance improvements for Claude 3.7 Sonnet.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2025-03-14/cleanshot-2025-03-07-at-152044png-150249.webp" alt="Model selection interface" />
</Frame>

### [Web View Performance Improvements](#web-view-performance-improvements)

Enjoy smoother iframe navigation and better compatibility with secure websites in Web View. We've enhanced our proxy system to handle security headers more intelligently, eliminating those frustrating navigation blocks you may have encountered previously.


# March 21, 2025
Source: https://docs.replit.com/updates/2025/03/21/changelog

2 min read

export const AuthorCard = ({img, href, name, role}) => {
  return <a href={href} target="_blank" className="card block not-prose font-normal group relative my-2 ring-2 ring-transparent rounded-xl bg-white/50 dark:bg-codeblock/50 border border-gray-100 shadow-md dark:shadow-none shadow-gray-300/10 dark:border-gray-800/50 overflow-hidden cursor-pointer hover:!border-primary dark:hover:!border-primary-light">
      <div className="flex items-center gap-2 p-4">
        <div className="flex-shrink-0">
          <img src={img} alt={name} className="w-12 h-12 rounded-full object-cover" />
        </div>
        <div className="flex-grow">
          <h3 className="text-base font-semibold mb-0.5 text-inherit">{name}</h3>
          <p className="text-sm text-gray-600 dark:text-gray-400 m-0">{role}</p>
        </div>
      </div>
    </a>;
};

<AuthorCard img="https://replit.com/cdn-cgi/image/width=256,quality=80,format=auto/https://storage.googleapis.com/replit/images/1730840970400_e885f16578bbbb227adbfeb7b979be34.jpeg" href="https://x.com/mattppal" name="Matt Palmer" role="Head of Developer Relations" />

## What's New

* [Visual Editor for JS Stack](#visual-editor)
* [Agent timeline messages](#agent-timeline-messages)

### Visual Editor

Agent just got eyes - click. describe. done.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2025-03-21/demo-assistant.webp" alt="Visual Editor" />
</Frame>

We've just launched an exciting new feature—you can now click and select elements directly in your projects for JavaScript apps!

This makes building and editing your UI more intuitive than ever. Want to learn more? Check out our detailed walkthrough on the blog at [https://blog.replit.com/cartographer](https://blog.replit.com/cartographer).

### Agent timeline messages

You'll now see a visual indicator whenever Agent sets up a Blueprint for your project. This makes it easier to follow along with what Agent is doing and understand the development process.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/replit/images/changelog/2025-03-21/imagepng-150258.png" alt="Agent Blueprint timeline messages" />
</Frame>

We've also enhanced our analytics to better track how you're using Blueprints, helping us make smarter improvements in the future.


# March 28, 2025
Source: https://docs.replit.com/updates/2025/03/28/changelog

2 min read

export const NewInvoiceThreshold = '$50';

export const OldInvoiceThreshold = '$10';

export const AuthorCard = ({img, href, name, role}) => {
  return <a href={href} target="_blank" className="card block not-prose font-normal group relative my-2 ring-2 ring-transparent rounded-xl bg-white/50 dark:bg-codeblock/50 border border-gray-100 shadow-md dark:shadow-none shadow-gray-300/10 dark:border-gray-800/50 overflow-hidden cursor-pointer hover:!border-primary dark:hover:!border-primary-light">
      <div className="flex items-center gap-2 p-4">
        <div className="flex-shrink-0">
          <img src={img} alt={name} className="w-12 h-12 rounded-full object-cover" />
        </div>
        <div className="flex-grow">
          <h3 className="text-base font-semibold mb-0.5 text-inherit">{name}</h3>
          <p className="text-sm text-gray-600 dark:text-gray-400 m-0">{role}</p>
        </div>
      </div>
    </a>;
};

<AuthorCard img="https://replit.com/cdn-cgi/image/width=256,quality=80,format=auto/https://storage.googleapis.com/replit/images/1730840970400_e885f16578bbbb227adbfeb7b979be34.jpeg" href="https://x.com/mattppal" name="Matt Palmer" role="Head of Developer Relations" />

## What's new

* [Agent v2 is now available](#agent-v2-is-now-available)
* [DeepLearning.AI course launch](#deeplearningai-course-launch)
* [Invoice threshold update](#invoice-threshold-update)

### Agent v2 is now available

<Frame>
  <iframe src="https://www.youtube.com/embed/1IQUY2QXpjg" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen />
</Frame>

Agent v2 is now available for all users. This release brings significant performance improvements and new features to enhance the development experience. [Learn more about Agent v2](/replitai/agent) and start building today.

### DeepLearningAI course launch

<Frame>
  <iframe src="https://www.youtube.com/embed/55k6J9djOB4" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen />
</Frame>

Replit's latest free course, Vibe Coding 101 with Replit, is now live on DeepLearningAI. This course takes you from idea to app in minutes, making software development more accessible. [Register for the course](https://www.deeplearning.ai/short-courses/vibe-coding-101-with-replit/?utm_campaign=replit-launch\&utm_medium=partner\&utm_source=replit) and start your development journey today.

### Invoice threshold update

The invoice threshold for core subscriptions has increased from {OldInvoiceThreshold} to {NewInvoiceThreshold}. This update reduces invoice frequency and payment-related service interruptions, creating a smoother experience for developers. The implementation includes comprehensive risk assessment and monitoring measures.


